{
    "basePath": "/api/v1",
    "definitions": {
        "MetaData": {
            "description": "",
            "properties": {
                "system": {
                    "type": "object",
                    "properties": {
                        "projectId": {
                            "type": "string",
                            "description": ""
                        }
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "system"
            ]
        },
        "DriverPayload": {
            "description": "",
            "properties": {
                "type": {
                    "enum": [
                        "mongo",
                        "gcs",
                        "s3",
                        "fs",
                        "azureblob"
                    ],
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "integrationId": {
                    "type": "string",
                    "description": ""
                },
                "integrationConfig": {
                    "enum": [
                        "S3IntegrationConfig",
                        "GcsIntegrationConfig",
                        "AzureBlobIntegrationConfig"
                    ],
                    "type": "string",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "payload": {
                    "enum": [
                        "S3DriverPayload",
                        "GcsDriverPayload",
                        "AzureBlobDriverPayload",
                        "FSDriverPayload"
                    ],
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "type",
                "creator",
                "metadata",
                "name",
                "payload"
            ]
        },
        "PartialDriverPayload": {
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": ""
                },
                "payload": {
                    "enum": [
                        "S3DriverPayload",
                        "Partial<GcsDriverPayload>",
                        "AzureBlobDriverPayload"
                    ],
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "payload"
            ]
        },
        "Dictionary": {
            "description": "",
            "properties": {},
            "type": "object"
        },
        "APIMetadata": {
            "description": "",
            "properties": {
                "system": {
                    "$ref": "#/definitions/Dictionary"
                }
            },
            "type": "object",
            "required": [
                "system",
                "system"
            ]
        },
        "ExpirationOptions": {
            "description": "",
            "properties": {
                "itemMaxDays": {
                    "type": "number",
                    "format": "double",
                    "description": "Specifies the number of days after which each item becomes expired and should be deleted"
                }
            },
            "type": "object",
            "required": [
                "itemMaxDays"
            ]
        },
        "APIDataset": {
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": ""
                },
                "annotated": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "itemsCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "items": {
                    "type": "string",
                    "description": ""
                },
                "directoryTree": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "export": {
                    "type": "object",
                    "properties": {
                        "zip": {
                            "type": "object",
                            "description": ""
                        },
                        "json": {
                            "type": "string",
                            "description": ""
                        }
                    },
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "readableType": {
                    "type": "string",
                    "description": ""
                },
                "accessLevel": {
                    "enum": [
                        "private",
                        "project"
                    ],
                    "type": "string",
                    "description": ""
                },
                "driver": {
                    "type": "string",
                    "description": ""
                },
                "readonly": {
                    "type": "boolean",
                    "description": ""
                },
                "error": {
                    "type": "object",
                    "description": ""
                },
                "expirationOptions": {
                    "$ref": "#/definitions/ExpirationOptions"
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "name",
                "annotated",
                "itemsCount",
                "items",
                "directoryTree",
                "creator",
                "projects",
                "export",
                "createdAt",
                "readableType",
                "accessLevel",
                "driver",
                "readonly",
                "id",
                "url"
            ]
        },
        "Errors.BadRequestError": {
            "description": "Represents a BAD REQUEST error. The request could not be understood by the\nserver due to malformed syntax. The client SHOULD NOT repeat the request\nwithout modifications.",
            "properties": {
                "message": {
                    "type": "string",
                    "description": ""
                },
                "statusCode": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "stack": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "message",
                "statusCode",
                "name",
                "message",
                "statusCode",
                "name"
            ]
        },
        "CreateDatasetRequest": {
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Dataset name"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of project ids related to the created dataset"
                },
                "driver": {
                    "enum": [
                        "mongo",
                        "gcs",
                        "fs",
                        "s3",
                        "azureblob"
                    ],
                    "type": "string",
                    "description": "Driver type of an existing driver or new driver configuration"
                },
                "driverId": {
                    "type": "string",
                    "description": "Driver id of an existing external driver"
                },
                "accessLevel": {
                    "enum": [
                        "private",
                        "project"
                    ],
                    "type": "string",
                    "description": "Share options, only user or all project members with the right role (default is project)"
                },
                "createDefaultRecipe": {
                    "type": "boolean",
                    "description": ""
                },
                "expirationOptions": {
                    "$ref": "#/definitions/ExpirationOptions"
                }
            },
            "type": "object",
            "required": [
                "name",
                "projects"
            ]
        },
        "APICommand": {
            "description": "",
            "properties": {
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                },
                "status": {
                    "type": "string",
                    "description": ""
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "type": {
                    "type": "string",
                    "description": ""
                },
                "error": {
                    "type": "string",
                    "description": ""
                },
                "progress": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "spec": {
                    "$ref": "#/definitions/Dictionary"
                },
                "report": {
                    "$ref": "#/definitions/Dictionary"
                }
            },
            "type": "object",
            "required": [
                "id",
                "url",
                "status",
                "createdAt",
                "type",
                "progress",
                "spec"
            ]
        },
        "CloneDatasetParams": {
            "description": "",
            "properties": {
                "withItemsAnnotations": {
                    "type": "boolean",
                    "description": ""
                },
                "withMetadata": {
                    "type": "boolean",
                    "description": ""
                },
                "withTaskAnnotationsStatus": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "withItemsAnnotations",
                "withMetadata",
                "withTaskAnnotationsStatus"
            ]
        },
        "CloneDatasetRequest": {
            "description": "",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/Dictionary"
                },
                "cloneDatasetParams": {
                    "$ref": "#/definitions/CloneDatasetParams"
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "classes": {
                    "type": "object",
                    "properties": {},
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/Dictionary"
                },
                "driver": {
                    "enum": [
                        "mongo",
                        "gcs"
                    ],
                    "type": "string",
                    "description": ""
                },
                "driverId": {
                    "type": "string",
                    "description": ""
                },
                "shareLevel": {
                    "enum": [
                        "private",
                        "project"
                    ],
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "filter",
                "cloneDatasetParams",
                "name",
                "creator",
                "projects"
            ]
        },
        "MergeDatasetParams": {
            "description": "",
            "properties": {
                "withItemsAnnotations": {
                    "type": "boolean",
                    "description": ""
                },
                "withMetadata": {
                    "type": "boolean",
                    "description": ""
                },
                "withTaskAnnotationsStatus": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "withItemsAnnotations",
                "withMetadata",
                "withTaskAnnotationsStatus"
            ]
        },
        "MergeDatasetsRequest": {
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "classes": {
                    "type": "object",
                    "properties": {},
                    "description": ""
                },
                "datasetsIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "mergeDatasetParams": {
                    "$ref": "#/definitions/MergeDatasetParams"
                }
            },
            "type": "object",
            "required": [
                "name",
                "creator",
                "datasetsIds",
                "projectIds",
                "mergeDatasetParams"
            ]
        },
        "APIDatasetConfiguration": {
            "description": "",
            "properties": {
                "_id": {
                    "type": "string",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "driver": {
                    "type": "object",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                }
            },
            "type": "object",
            "required": [
                "_id",
                "name",
                "creator",
                "projects",
                "driver"
            ]
        },
        "APISystemMetadata": {
            "description": "",
            "properties": {
                "system": {
                    "type": "object",
                    "properties": {
                        "originalname": {
                            "type": "string",
                            "description": ""
                        },
                        "mimetype": {
                            "type": "string",
                            "description": ""
                        },
                        "size": {
                            "type": "number",
                            "format": "double",
                            "description": ""
                        },
                        "encoding": {
                            "type": "string",
                            "description": ""
                        },
                        "originalPath": {
                            "type": "string",
                            "description": ""
                        },
                        "height": {
                            "type": "number",
                            "format": "double",
                            "description": ""
                        },
                        "width": {
                            "type": "number",
                            "format": "double",
                            "description": ""
                        }
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "system"
            ]
        },
        "APIDatasetDirectory": {
            "description": "",
            "properties": {
                "items": {
                    "type": "string",
                    "description": ""
                },
                "export": {
                    "type": "object",
                    "properties": {
                        "zip": {
                            "type": "object",
                            "description": ""
                        },
                        "json": {
                            "type": "string",
                            "description": ""
                        }
                    },
                    "description": ""
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                },
                "datasetId": {
                    "type": "string",
                    "description": ""
                },
                "dir": {
                    "type": "string",
                    "description": ""
                },
                "filename": {
                    "type": "string",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "type": {
                    "enum": [
                        "file",
                        "dir"
                    ],
                    "type": "string",
                    "description": ""
                },
                "hidden": {
                    "type": "boolean",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APISystemMetadata"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "dataset": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "items",
                "export",
                "id",
                "url",
                "datasetId",
                "dir",
                "filename",
                "name",
                "type",
                "hidden",
                "metadata",
                "createdAt",
                "dataset",
                "creator"
            ]
        },
        "DatasetDirectoryTree": {
            "description": "",
            "properties": {
                "value": {
                    "$ref": "#/definitions/APIDatasetDirectory"
                },
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DatasetDirectoryTree"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "QueryFilter": {
            "description": "",
            "properties": {
                "context": {
                    "type": "object",
                    "properties": {
                        "datasets": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": ""
                        },
                        "projects": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": ""
                        },
                        "projectIds": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": ""
                        }
                    },
                    "description": ""
                },
                "page": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "pageSize": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "resource": {
                    "enum": [
                        "items",
                        "annotations",
                        "datasets",
                        "items",
                        "annotations",
                        "datasets",
                        "tasks",
                        "assignments"
                    ],
                    "type": "string",
                    "description": ""
                },
                "filter": {
                    "$ref": "#/definitions/Dictionary"
                },
                "sort": {
                    "$ref": "#/definitions/Dictionary"
                },
                "update": {
                    "$ref": "#/definitions/Dictionary"
                },
                "delete": {
                    "type": "boolean",
                    "description": ""
                },
                "select": {
                    "$ref": "#/definitions/Dictionary"
                }
            },
            "type": "object",
            "required": [
                "context",
                "page",
                "pageSize",
                "resource",
                "filter",
                "context",
                "page",
                "pageSize",
                "resource",
                "filter"
            ]
        },
        "ExportDatasetRequest": {
            "description": "Export dataset as zip file.\nitems/annotations filters can be specified, only matching results will be included in zip.\nWhen specifying both items & annotations filters - they will be joined.",
            "properties": {
                "itemsQuery": {
                    "$ref": "#/definitions/QueryFilter"
                },
                "annotationsQuery": {
                    "$ref": "#/definitions/QueryFilter"
                },
                "annotations": {
                    "type": "object",
                    "properties": {
                        "include": {
                            "type": "boolean",
                            "description": "determine if export should contain annotations"
                        },
                        "convertSemantic": {
                            "type": "boolean",
                            "description": "determine if semantic annotations should exported as png files"
                        },
                        "filter": {
                            "type": "boolean",
                            "description": "given an export by filter - determine if to filter out annotations"
                        }
                    },
                    "description": "annotations export options"
                },
                "exportVersion": {
                    "enum": [
                        "V1",
                        "V2"
                    ],
                    "type": "string",
                    "description": "`V2` - exported items will have original extension in filename, `V1` - no original extension in filenames"
                }
            },
            "type": "object"
        },
        "ClassifyFilteredItems": {
            "description": "",
            "properties": {
                "query": {
                    "type": "object",
                    "properties": {
                        "filter": {
                            "$ref": "#/definitions/Dictionary"
                        },
                        "join": {
                            "$ref": "#/definitions/Dictionary"
                        }
                    },
                    "description": ""
                },
                "annotation": {
                    "type": "object",
                    "properties": {
                        "label": {
                            "type": "string",
                            "description": ""
                        },
                        "attributes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": ""
                        },
                        "metadata": {
                            "$ref": "#/definitions/Dictionary"
                        }
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "query",
                "annotation"
            ]
        },
        "LabelSuggestions": {
            "description": "",
            "properties": {},
            "type": "object",
            "additionalProperties": {}
        },
        "APIAnnotation": {
            "description": "",
            "properties": {
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                },
                "type": {
                    "enum": [
                        "class",
                        "point",
                        "line",
                        "box",
                        "cube",
                        "segment",
                        "ellipse",
                        "binary",
                        "note",
                        "polyline",
                        "comparison",
                        "recording",
                        "subtitle",
                        "item_description",
                        "text_mark",
                        "pose",
                        "cube_3d",
                        "semantic_3d"
                    ],
                    "type": "string",
                    "description": ""
                },
                "label": {
                    "type": "string",
                    "description": ""
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "coordinates": {
                    "type": "object",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/Dictionary"
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "updatedBy": {
                    "type": "string",
                    "description": ""
                },
                "itemId": {
                    "type": "string",
                    "description": ""
                },
                "item": {
                    "type": "string",
                    "description": ""
                },
                "datasetId": {
                    "type": "string",
                    "description": ""
                },
                "dataset": {
                    "type": "string",
                    "description": ""
                },
                "hash": {
                    "type": "string",
                    "description": ""
                },
                "labelSuggestions": {
                    "$ref": "#/definitions/LabelSuggestions"
                },
                "source": {
                    "enum": [
                        "ui",
                        "sdk",
                        "other",
                        "system",
                        "unknown"
                    ],
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "id",
                "url",
                "type",
                "label",
                "creator",
                "createdAt",
                "updatedAt",
                "updatedBy",
                "itemId",
                "item",
                "datasetId",
                "dataset",
                "hash",
                "labelSuggestions"
            ]
        },
        "RestoreAnnotationsRequest": {
            "description": "",
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "annotations"
            ]
        },
        "ImportItemRequest": {
            "description": "",
            "properties": {
                "filename": {
                    "type": "string",
                    "description": ""
                },
                "storageId": {
                    "type": "string",
                    "description": ""
                },
                "size": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "filename",
                "storageId"
            ]
        },
        "APIDatasetFileItem": {
            "description": "",
            "properties": {
                "annotationsCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "annotated": {
                    "type": "object",
                    "description": ""
                },
                "stream": {
                    "type": "string",
                    "description": ""
                },
                "thumbnail": {
                    "type": "string",
                    "description": ""
                },
                "annotations": {
                    "type": "string",
                    "description": ""
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                },
                "datasetId": {
                    "type": "string",
                    "description": ""
                },
                "dir": {
                    "type": "string",
                    "description": ""
                },
                "filename": {
                    "type": "string",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "type": {
                    "enum": [
                        "file",
                        "dir"
                    ],
                    "type": "string",
                    "description": ""
                },
                "hidden": {
                    "type": "boolean",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APISystemMetadata"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "dataset": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "annotationsCount",
                "annotated",
                "stream",
                "thumbnail",
                "annotations",
                "id",
                "url",
                "datasetId",
                "dir",
                "filename",
                "name",
                "type",
                "hidden",
                "metadata",
                "createdAt",
                "dataset",
                "creator"
            ]
        },
        "APIDatasetItemCursor": {
            "description": "For documentation purposes - swagger gen does not handle generics so well...",
            "properties": {
                "totalItemsCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIDatasetFileItem"
                    },
                    "description": ""
                },
                "totalPagesCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "hasNextPage": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "totalItemsCount",
                "items",
                "totalPagesCount",
                "hasNextPage"
            ]
        },
        "PartialAPIDatasetItem": {
            "description": "",
            "properties": {
                "filename": {
                    "type": "string",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APISystemMetadata"
                }
            },
            "type": "object"
        },
        "ItemCloneRequest": {
            "description": "",
            "properties": {
                "targetDatasetId": {
                    "type": "string",
                    "description": "Target dataset id"
                },
                "remoteFileName": {
                    "type": "string",
                    "description": "path at target dataset"
                },
                "metadata": {
                    "$ref": "#/definitions/Dictionary"
                },
                "cloneDatasetParams": {
                    "$ref": "#/definitions/CloneDatasetParams"
                },
                "allowMany": {
                    "type": "boolean",
                    "description": "allow multiple copies of the same source item"
                }
            },
            "type": "object",
            "required": [
                "targetDatasetId",
                "remoteFileName",
                "metadata",
                "cloneDatasetParams"
            ]
        },
        "UpdateAnnotationRequest": {
            "description": "",
            "properties": {
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "type": {
                    "enum": [
                        "class",
                        "point",
                        "line",
                        "box",
                        "cube",
                        "segment",
                        "ellipse",
                        "binary",
                        "note",
                        "polyline",
                        "comparison",
                        "recording",
                        "subtitle",
                        "item_description",
                        "text_mark",
                        "pose",
                        "cube_3d",
                        "semantic_3d"
                    ],
                    "type": "string",
                    "description": ""
                },
                "label": {
                    "type": "string",
                    "description": ""
                },
                "coordinates": {
                    "type": "object",
                    "description": ""
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                }
            },
            "type": "object",
            "required": [
                "creator",
                "type",
                "label"
            ]
        },
        "APIAnnotationCursor": {
            "description": "",
            "properties": {
                "totalItemsCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIAnnotation"
                    },
                    "description": ""
                },
                "totalPagesCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "hasNextPage": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "totalItemsCount",
                "items",
                "totalPagesCount",
                "hasNextPage"
            ]
        },
        "APIAnnotationsQuery": {
            "description": "",
            "properties": {
                "annotationId": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "annotationTypes": {
                    "type": "array",
                    "items": {
                        "enum": [
                            "class",
                            "point",
                            "line",
                            "box",
                            "cube",
                            "segment",
                            "ellipse",
                            "binary",
                            "note",
                            "polyline",
                            "comparison",
                            "recording",
                            "subtitle",
                            "item_description",
                            "text_mark",
                            "pose",
                            "cube_3d",
                            "semantic_3d"
                        ],
                        "type": "string"
                    },
                    "description": ""
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "creators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "annotationMetadata": {
                    "$ref": "#/definitions/Dictionary"
                }
            },
            "type": "object",
            "required": [
                "annotationId",
                "labels",
                "annotationTypes",
                "attributes",
                "creators",
                "annotationMetadata"
            ]
        },
        "APIFeatureVector": {
            "description": "",
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": ""
                },
                "org": {
                    "type": "string",
                    "description": ""
                },
                "project": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "value": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "format": "double"
                    },
                    "description": "value - actual vector - immutable"
                },
                "featureSetId": {
                    "type": "string",
                    "description": "featureSetId - ref to a featureSet this vector is a part of"
                },
                "version": {
                    "type": "string",
                    "description": "version - version of the feature set generator"
                },
                "parentId": {
                    "type": "string",
                    "description": "parentId - used when FeatureVector is a subFeature"
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "project",
                "creator",
                "createdAt",
                "value",
                "featureSetId",
                "version",
                "id",
                "url"
            ]
        },
        "APIFeatureSet": {
            "description": "",
            "properties": {
                "type": {
                    "type": "string",
                    "description": ""
                },
                "entityType": {
                    "type": "string",
                    "description": ""
                },
                "org": {
                    "type": "string",
                    "description": ""
                },
                "project": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "updatedBy": {
                    "type": "string",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "tags - optional tag per feature  - matched by index"
                },
                "size": {
                    "type": "number",
                    "format": "double",
                    "description": "size - set size"
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "type",
                "entityType",
                "project",
                "creator",
                "createdAt",
                "updatedAt",
                "updatedBy",
                "name",
                "tags",
                "size",
                "id",
                "url"
            ]
        },
        "PartialFeatureSet": {
            "description": "",
            "properties": {
                "_id": {
                    "type": "string",
                    "description": ""
                },
                "type": {
                    "type": "string",
                    "description": ""
                },
                "entityType": {
                    "type": "string",
                    "description": ""
                },
                "project": {
                    "type": "string",
                    "description": ""
                },
                "org": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "updatedBy": {
                    "type": "string",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "size": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                }
            },
            "type": "object"
        },
        "ProjectStorageRequest": {
            "description": "",
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": ""
                },
                "external": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "projectId",
                "external"
            ]
        },
        "ItemStatus": {
            "description": "",
            "properties": {
                "approved": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "completed": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "remaining": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "approved",
                "completed",
                "remaining"
            ]
        },
        "APIAssignment": {
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": ""
                },
                "annotator": {
                    "type": "string",
                    "description": ""
                },
                "status": {
                    "type": "object",
                    "description": ""
                },
                "projectId": {
                    "type": "string",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                },
                "totalItems": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "itemStatus": {
                    "$ref": "#/definitions/ItemStatus"
                },
                "annotationStatus": {
                    "type": "object",
                    "properties": {},
                    "description": ""
                },
                "taskType": {
                    "type": "string",
                    "description": ""
                },
                "progress": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "forReview": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "issues": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "error": {
                    "type": "string",
                    "description": ""
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "name",
                "annotator",
                "status",
                "projectId",
                "metadata",
                "totalItems",
                "itemStatus",
                "annotationStatus",
                "taskType",
                "progress",
                "forReview",
                "issues",
                "id",
                "url"
            ]
        },
        "AssignmentPayload": {
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": ""
                },
                "annotator": {
                    "type": "string",
                    "description": ""
                },
                "status": {
                    "type": "object",
                    "description": ""
                },
                "projectId": {
                    "type": "string",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/Dictionary"
                }
            },
            "type": "object",
            "required": [
                "name",
                "annotator",
                "status",
                "projectId",
                "metadata"
            ]
        },
        "PartialAssignmentPayload": {
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": ""
                },
                "annotator": {
                    "type": "string",
                    "description": ""
                },
                "status": {
                    "type": "object",
                    "description": ""
                },
                "projectId": {
                    "type": "string",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/Dictionary"
                }
            },
            "type": "object"
        },
        "APIAssignmentCursor": {
            "description": "",
            "properties": {
                "totalItemsCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIAssignment"
                    },
                    "description": ""
                },
                "totalPagesCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "hasNextPage": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "totalItemsCount",
                "items",
                "totalPagesCount",
                "hasNextPage"
            ]
        },
        "Errors.NotFoundError": {
            "description": "Represents a NOT FOUND error. The server has not found anything matching\nthe Request-URI. No indication is given of whether the condition is temporary\nor permanent. The 410 (GoneError) status code SHOULD be used if the server knows,\nthrough some internally configurable mechanism, that an old resource is permanently\nunavailable and has no forwarding address.\n\nThis error is commonly used when\nthe server does not wish to reveal exactly why the request has been refused,\nor when no other response is applicable.",
            "properties": {
                "message": {
                    "type": "string",
                    "description": ""
                },
                "statusCode": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "stack": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "message",
                "statusCode",
                "name"
            ]
        },
        "ReassignAssignmentPayload": {
            "description": "",
            "properties": {
                "taskId": {
                    "type": "string",
                    "description": ""
                },
                "annotator": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "taskId",
                "annotator"
            ]
        },
        "AssignmentWorkload": {
            "description": "",
            "properties": {
                "assigneeId": {
                    "type": "string",
                    "description": ""
                },
                "load": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "assigneeId",
                "load"
            ]
        },
        "RedistributeAssignmentPayload": {
            "description": "",
            "properties": {
                "taskId": {
                    "type": "string",
                    "description": ""
                },
                "workload": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AssignmentWorkload"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "taskId",
                "workload"
            ]
        },
        "APILabelTree": {
            "description": "",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APILabelTree"
                    },
                    "description": ""
                },
                "value": {
                    "$ref": "#/definitions/APILabel"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "APILabel": {
            "description": "",
            "properties": {
                "tag": {
                    "type": "string",
                    "description": ""
                },
                "displayLabel": {
                    "type": "string",
                    "description": ""
                },
                "color": {
                    "type": "string",
                    "description": ""
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "tag",
                "displayLabel",
                "color"
            ]
        },
        "APIOntology": {
            "description": "",
            "properties": {
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "title": {
                    "type": "string",
                    "description": ""
                },
                "roots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APILabelTree"
                    },
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "creator",
                "title",
                "roots",
                "metadata",
                "id",
                "url"
            ]
        },
        "Label": {
            "description": "",
            "properties": {
                "tag": {
                    "type": "string",
                    "description": ""
                },
                "displayLabel": {
                    "type": "string",
                    "description": ""
                },
                "color": {
                    "type": "string",
                    "description": ""
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "system": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "tag",
                "color"
            ]
        },
        "LabelTree": {
            "description": "",
            "properties": {
                "value": {
                    "$ref": "#/definitions/Label"
                },
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LabelTree"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "value",
                "children"
            ]
        },
        "CreateOntologyPayload": {
            "description": "",
            "properties": {
                "roots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LabelTree"
                    },
                    "description": ""
                },
                "title": {
                    "type": "string",
                    "description": ""
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "system": {
                    "type": "boolean",
                    "description": ""
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "roots",
                "title"
            ]
        },
        "APIOntologyConfiguration": {
            "description": "",
            "properties": {
                "id": {
                    "type": "string",
                    "description": ""
                },
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "roots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APILabelTree"
                    },
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "id",
                "creator",
                "roots",
                "metadata"
            ]
        },
        "CreateLabelPayload": {
            "description": "",
            "properties": {
                "tag": {
                    "type": "string",
                    "description": ""
                },
                "displayLabel": {
                    "type": "string",
                    "description": ""
                },
                "color": {
                    "type": "string",
                    "description": ""
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "tag"
            ]
        },
        "AddLabelsNodePayload": {
            "description": "",
            "properties": {
                "labelsNode": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CreateLabelPayload"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "labelsNode"
            ]
        },
        "UpdateLabelsNodePayload": {
            "description": "",
            "properties": {
                "upsert": {
                    "type": "boolean",
                    "description": ""
                },
                "labelsNode": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CreateLabelPayload"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "labelsNode"
            ]
        },
        "APIOntologyCursor": {
            "description": "",
            "properties": {
                "totalItemsCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIOntology"
                    },
                    "description": ""
                },
                "totalPagesCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "hasNextPage": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "totalItemsCount",
                "items",
                "totalPagesCount",
                "hasNextPage"
            ]
        },
        "APIInstruction": {
            "description": "",
            "properties": {
                "scope": {
                    "type": "object",
                    "description": ""
                },
                "action": {
                    "type": "object",
                    "description": ""
                },
                "tool": {
                    "type": "string",
                    "enum": [
                        "class",
                        "point",
                        "line",
                        "box",
                        "segment",
                        "binary",
                        "note",
                        "polyline"
                    ],
                    "description": ""
                },
                "options": {
                    "type": "object",
                    "description": ""
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "scope",
                "action",
                "tool",
                "options",
                "tags"
            ]
        },
        "APIGoodExample": {
            "description": "",
            "properties": {
                "instructions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIInstruction"
                    },
                    "description": ""
                },
                "itemId": {
                    "type": "string",
                    "description": ""
                },
                "comments": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "instructions",
                "itemId"
            ]
        },
        "APIBadExample": {
            "description": "",
            "properties": {
                "itemId": {
                    "type": "string",
                    "description": ""
                },
                "comments": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "itemId"
            ]
        },
        "APICustomAction": {
            "description": "",
            "properties": {
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "ontologyId": {
                                "type": "string",
                                "description": ""
                            },
                            "labelId": {
                                "type": "string",
                                "description": ""
                            }
                        }
                    },
                    "description": ""
                },
                "controls": {
                    "type": "object",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "targets",
                "controls"
            ]
        },
        "APIRecipe": {
            "description": "",
            "properties": {
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "title": {
                    "type": "string",
                    "description": ""
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "description": {
                    "type": "string",
                    "description": ""
                },
                "ontologyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "instructions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIInstruction"
                    },
                    "description": ""
                },
                "examples": {
                    "type": "object",
                    "properties": {
                        "good": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIGoodExample"
                            },
                            "description": ""
                        },
                        "bad": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIBadExample"
                            },
                            "description": ""
                        }
                    },
                    "description": ""
                },
                "customActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APICustomAction"
                    },
                    "description": ""
                },
                "uiSettings": {
                    "$ref": "#/definitions/Dictionary"
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "creator",
                "title",
                "projectIds",
                "description",
                "ontologyIds",
                "instructions",
                "examples",
                "customActions",
                "uiSettings",
                "metadata",
                "id",
                "url"
            ]
        },
        "RecipePayload": {
            "description": "",
            "properties": {
                "title": {
                    "type": "string",
                    "description": ""
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "description": {
                    "type": "string",
                    "description": ""
                },
                "ontologyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "instructions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIInstruction"
                    },
                    "description": ""
                },
                "examples": {
                    "type": "object",
                    "properties": {
                        "good": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIGoodExample"
                            },
                            "description": ""
                        },
                        "bad": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIBadExample"
                            },
                            "description": ""
                        }
                    },
                    "description": ""
                },
                "customActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APICustomAction"
                    },
                    "description": ""
                },
                "uiSettings": {
                    "$ref": "#/definitions/Dictionary"
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                }
            },
            "type": "object",
            "required": [
                "title",
                "projectIds",
                "ontologyIds"
            ]
        },
        "CloneRecipePayload": {
            "description": "",
            "properties": {
                "shallow": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object"
        },
        "PartialRecipePayload": {
            "description": "",
            "properties": {
                "title": {
                    "type": "string",
                    "description": ""
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "description": {
                    "type": "string",
                    "description": ""
                },
                "ontologyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "instructions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIInstruction"
                    },
                    "description": ""
                },
                "examples": {
                    "type": "object",
                    "properties": {
                        "good": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIGoodExample"
                            },
                            "description": ""
                        },
                        "bad": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIBadExample"
                            },
                            "description": ""
                        }
                    },
                    "description": ""
                },
                "customActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APICustomAction"
                    },
                    "description": ""
                },
                "uiSettings": {
                    "$ref": "#/definitions/Dictionary"
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                }
            },
            "type": "object"
        },
        "APIRecipeCursor": {
            "description": "",
            "properties": {
                "totalItemsCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIRecipe"
                    },
                    "description": ""
                },
                "totalPagesCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "hasNextPage": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "totalItemsCount",
                "items",
                "totalPagesCount",
                "hasNextPage"
            ]
        },
        "APITask": {
            "description": "",
            "properties": {
                "creator": {
                    "type": "string",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": ""
                },
                "taskOwner": {
                    "type": "string",
                    "description": ""
                },
                "dueDate": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "datasetId": {
                    "type": "string",
                    "description": ""
                },
                "recipeId": {
                    "type": "string",
                    "description": ""
                },
                "projectId": {
                    "type": "string",
                    "description": ""
                },
                "spec": {
                    "type": "object",
                    "description": ""
                },
                "hasParent": {
                    "type": "boolean",
                    "description": ""
                },
                "query": {
                    "type": "string",
                    "description": ""
                },
                "assignmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "status": {
                    "type": "string",
                    "description": ""
                },
                "metadata": {
                    "$ref": "#/definitions/APIMetadata"
                },
                "totalItems": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "itemStatus": {
                    "$ref": "#/definitions/ItemStatus"
                },
                "annotationStatus": {
                    "type": "object",
                    "properties": {},
                    "description": ""
                },
                "progress": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "forReview": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "issues": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "error": {
                    "type": "string",
                    "description": ""
                },
                "id": {
                    "type": "string",
                    "description": ""
                },
                "url": {
                    "type": "string",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "creator",
                "name",
                "createdAt",
                "updatedAt",
                "taskOwner",
                "dueDate",
                "datasetId",
                "recipeId",
                "projectId",
                "spec",
                "hasParent",
                "query",
                "assignmentIds",
                "status",
                "metadata",
                "totalItems",
                "itemStatus",
                "annotationStatus",
                "progress",
                "forReview",
                "issues",
                "id",
                "url"
            ]
        },
        "TaskWorkload": {
            "description": "",
            "properties": {
                "assigneeId": {
                    "type": "string",
                    "description": ""
                },
                "load": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "assigneeId",
                "load"
            ]
        },
        "TaskPayload": {
            "description": "",
            "properties": {
                "datasetId": {
                    "type": "string",
                    "description": ""
                },
                "recipeId": {
                    "type": "string",
                    "description": ""
                },
                "projectId": {
                    "type": "string",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "taskOwner": {
                    "type": "string",
                    "description": ""
                },
                "dueDate": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "query": {
                    "type": "string",
                    "description": ""
                },
                "status": {
                    "type": "string",
                    "description": ""
                },
                "assignmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "spec": {
                    "type": "object",
                    "description": ""
                },
                "workload": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaskWorkload"
                    },
                    "description": ""
                },
                "limit": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "percentage": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "datasetId",
                "recipeId",
                "projectId",
                "name",
                "taskOwner",
                "dueDate",
                "query",
                "status",
                "assignmentIds",
                "spec"
            ]
        },
        "AddToTaskPayload": {
            "description": "",
            "properties": {
                "query": {
                    "type": "string",
                    "description": ""
                },
                "workload": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TaskWorkload"
                    },
                    "description": ""
                },
                "limit": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "percentage": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "PartialTaskPayload": {
            "description": "",
            "properties": {
                "datasetId": {
                    "type": "string",
                    "description": ""
                },
                "recipeId": {
                    "type": "string",
                    "description": ""
                },
                "projectId": {
                    "type": "string",
                    "description": ""
                },
                "query": {
                    "type": "string",
                    "description": ""
                },
                "name": {
                    "type": "string",
                    "description": ""
                },
                "dueDate": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "status": {
                    "type": "string",
                    "description": ""
                },
                "assignmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ""
                },
                "spec": {
                    "type": "object",
                    "description": ""
                }
            },
            "type": "object"
        },
        "APITaskCursor": {
            "description": "",
            "properties": {
                "totalItemsCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APITask"
                    },
                    "description": ""
                },
                "totalPagesCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "hasNextPage": {
                    "type": "boolean",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "totalItemsCount",
                "items",
                "totalPagesCount",
                "hasNextPage"
            ]
        },
        "APITaskCounters": {
            "description": "",
            "properties": {
                "activeProjects": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "activeDatasets": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "activeTasks": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                },
                "tasksCount": {
                    "type": "number",
                    "format": "double",
                    "description": ""
                }
            },
            "type": "object",
            "required": [
                "activeProjects",
                "activeDatasets",
                "activeTasks",
                "tasksCount"
            ]
        }
    },
    "info": {
        "description": "# Drive your AI to production with end-to-end data management, automation pipelines and a quality-first data labeling platform.",
        "title": "Dataloop.ai REST API",
        "contact": {
            "email": "support@dataloop.ai"
        },
        "x-logo": {
            "url": "https://console.dataloop.ai/img/logo-for-white-bkg-big.3ad1a938.png"
        },
        "version": "1.11.2"
    },
    "paths": {
        "/accounts": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "List all user's accounts",
                "responses": {
                    "200": {
                        "description": "Allowed for org admin or account admin only",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountDetails"
                                    }
                                }
                            }
                        }
                    }
                },
                "response": {}
            },
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Creates a new account",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "org"
                                ],
                                "properties": {
                                    "org": {
                                        "type": "string",
                                        "description": "Org ID"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Account name"
                                    },
                                    "createdBy": {
                                        "type": "string",
                                        "description": "Account creator"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "Account owner"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountDetails"
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/accounts/{account_id}": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "get a specific account",
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "Account id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Allowed for org admin or account admin only",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountDetails"
                                }
                            }
                        }
                    }
                },
                "response": {}
            },
            "delete": {
                "tags": [
                    "Account"
                ],
                "summary": "Delete an account",
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "Account id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "response": {}
            },
            "patch": {
                "tags": [
                    "Account"
                ],
                "summary": "Change an account name, creator or owner",
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "description": "Account id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "New name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "description": "New creator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "New owner",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "response": {}
            }
        },
        "/activities/": {
            "get": {
                "operationId": "UiActivities_getUiActivities",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivitiesDescriptor_"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Activities"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/annotations/{annotationId}": {
            "get": {
                "operationId": "AnnotationsGetAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nannotation = item.annotations.get(annotation_id='annotation_id')\n\n# \n# Get a single annotation.\n# \n# **Prerequisites**: You must have an item that has been annotated. You must have the role of an *owner* or\n# *developer* or be assigned a task that includes that item as an *annotation manager* or *annotator*.\n# \n# :param str annotation_id: The id of the annotation\n# :return: Annotation object or None\n# :return: Annotation object or None\n# :rtype: dtlpy.entities.annotation.Annotation\n# \n# "
                    }
                ],
                "summary": "List all annotations of an item",
                "response": {}
            },
            "delete": {
                "operationId": "AnnotationsDeleteAnnotation",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Annotation from an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = item.annotations.delete(annotation_id='annotation_id')\n\n# \n# Remove an annotation from item.\n# \n# **Prerequisites**: You must have an item that has been annotated. You must have the role of an *owner* or\n# *developer* or be assigned a task that includes that item as an *annotation manager* or *annotator*.\n# \n# :param dtlpy.entities.annotation.Annotation annotation: Annotation object\n# :param str annotation_id: The id of the annotation\n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :return: True/False\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Delete an Annotation from an item",
                "response": {}
            },
            "put": {
                "operationId": "AnnotationsUpdateAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "Update an item's annotation",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Updated annotation object",
                        "in": "body",
                        "name": "annotation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAnnotationRequest"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "replace",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nannotations = item.annotations.update(annotation='annotation')\n\n# \n# Update an existing annotation. For example, you may change the annotation's label and then use the update method.\n# \n# **Prerequisites**: You must have an item that has been annotated. You must have the role of an *owner* or\n# *developer* or be assigned a task that includes that item as an *annotation manager* or *annotator*.\n# \n# :param dtlpy.entities.annotation.Annotation annotations: Annotation object\n# :param bool system_metadata: bool - True, if you want to change metadata system\n# \n# :return: True if successful or error if unsuccessful\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Update an item's annotation",
                "response": {}
            }
        },
        "/annotations/{annotationId}/issue": {
            "put": {
                "operationId": "AnnotationsAnnotationIssues",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "Update an item's annotation status to issue",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Update an item's annotation status to issue",
                "response": {}
            }
        },
        "/annotationtasks": {
            "post": {
                "operationId": "TasksCreateTask",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APITask"
                        }
                    }
                },
                "description": "Create a new Task",
                "tags": [
                    "Tasks"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": Task creation payload",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TaskPayload"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.create(task= 'task_entity',\ndue_date = datetime.datetime(day= 1, month= 1, year= 2029).timestamp(),\nassignee_ids =[ 'annotator1@dataloop.ai', 'annotator2@dataloop.ai'])\n\n# \n# Create a new Task (Annotation or QA).\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned to be *owner* of the annotation task.\n# \n# :param str task_name: the name of the task\n# :param float due_date: date by which the task should be finished; for example, due_date=datetime.datetime(day=1, month=1, year=2029).timestamp()\n# :param list assignee_ids: list the task assignees (contributors) that should be working on the task. Provide a list of users' emails\n# :param List[WorkloadUnit] List[WorkloadUnit] workload: list of WorkloadUnit objects. Customize distribution (percentage) between the task assignees. For example: [dl.WorkloadUnit(annotator@hi.com, 80), dl.WorkloadUnit(annotator2@hi.com, 20)]\n# :param entities.Dataset dataset: dataset object, the dataset that refer to the task\n# :param str task_owner: task owner. Provide user email\n# :param str task_type: task type \"annotation\" or \"qa\"\n# :param str task_parent_id: optional if type is qa - parent annotation task id\n# :param str project_id: the Id of the project where task will be created\n# :param str recipe_id: recipe id for the task\n# :param list assignments_ids: assignments ids to the task\n# :param dict metadata: metadata for the task\n# :param entities.Filters filters: dl.Filters entity to filter items for the task\n# :param List[entities.Item] items: list of items (item Id or objects) to insert to the task\n# :param dict DQL query: filter items for the task\n# :param list available_actions: list of available actions (statuses) that will be available for the task items; The default statuses are: \"completed\" and \"discard\"\n# :param bool wait: wait until create task finish\n# :param entities.Filters check_if_exist: dl.Filters check if task exist according to filter\n# :param int limit: the limit items that the task can include\n# :param int  batch_size: Pulling batch size (items), use with pulling allocation method. Restrictions - Min 3, max 100\n# :param int max_batch_workload: max_batch_workload: Max items in assignment, use with pulling allocation method. Restrictions - Min batchSize + 2, max batchSize * 2\n# :param list allowed_assignees: list the task assignees (contributors) that should be working on the task. Provide a list of users' emails\n# :param entities.TaskPriority priority: priority of the task options in entities.TaskPriority\n# :param int consensus_percentage: percentage of items to be copied to multiple annotators (consensus items)\n# :param int consensus_assignees: the number of different annotators per item (number of copies per item)\n# :return: Task object\n# :rtype: dtlpy.entities.task.Task\n# \n# "
                    }
                ],
                "summary": "Create a new Task",
                "response": {}
            },
            "get": {
                "operationId": "TasksFindTasks",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APITaskCursor"
                        }
                    }
                },
                "description": "Find tasks by query",
                "tags": [
                    "Tasks"
                ],
                "parameters": [
                    {
                        "description": "- An array of project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by dataset",
                        "in": "query",
                        "name": "dataset",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Find by recipe",
                        "in": "query",
                        "name": "recipe",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Find by task status",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Filter by creator",
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Filter by task owner",
                        "in": "query",
                        "name": "taskOwner",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Find by task name",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Due date lower limit",
                        "in": "query",
                        "name": "minDate",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "- Due date upper limit",
                        "in": "query",
                        "name": "maxDate",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "- An array of assignment IDs",
                        "in": "query",
                        "name": "assignments",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "- How many tasks in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "- Filter by parent task",
                        "in": "query",
                        "name": "parentTaskId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Filter by task type - Annotation or QA",
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "type": "string"
                    }
                ],
                "summary": "Find tasks by query",
                "response": {}
            }
        },
        "/annotationtasks/count": {
            "post": {
                "operationId": "TasksActiveCounters",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APITaskCounters"
                        }
                    }
                },
                "description": "For org admin / owner:\r\nGet active counters for projects",
                "tags": [
                    "Tasks"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "For org admin / owner:\r\nGet active counters for projects",
                "response": {}
            }
        },
        "/annotationtasks/query": {
            "post": {
                "operationId": "TasksQueryTasks",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Tasks"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryFilter"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.list(project_ids='project_ids',pages_size=100, page_offset=0)\n\n# \n# List all tasks.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer* or *annotation manager* who has been assigned the task.\n# \n# :param project_ids: search tasks by given list of project ids\n# :param str status: search tasks by a given task status\n# :param str task_name: search tasks by a given task name\n# :param int pages_size: pages size of the output generator\n# :param int page_offset: page offset of the output generator\n# :param dtlpy.entities.recipe.Recipe recipe: Search tasks that use a given recipe. Provide the required recipe object\n# :param str creator: search tasks created by a given creator (user email)\n# :param dtlpy.entities.assignment.Assignment recipe assignments: assignments object\n# :param double min_date: search all tasks created AFTER a given date, use a milliseconds format. For example: 1661780622008\n# :param double max_date: search all tasks created BEFORE a given date, use a milliseconds format. For example: 1661780622008\n# :param dtlpy.entities.filters.Filters filters: dl.Filters entity to filters tasks using DQL\n# :return: List of Task objects\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/annotationtasks/{id}": {
            "patch": {
                "operationId": "TasksPatchTask",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APITask"
                        }
                    }
                },
                "description": "Update an existing task",
                "tags": [
                    "Tasks"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": The fields to update",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartialTaskPayload"
                        }
                    },
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.update(task='task_entity')\n\n# \n# Update a Task.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer* or *annotation manager* who created that task.\n# \n# :param dtlpy.entities.task.Task task: the task object\n# :param bool system_metadata: True, if you want to change metadata system\n# :return: Task object\n# :rtype: dtlpy.entities.task.Task\n# \n# "
                    }
                ],
                "summary": "Update an existing task",
                "response": {}
            },
            "get": {
                "operationId": "TasksGetTask",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APITask"
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/Errors.NotFoundError"
                        }
                    }
                },
                "description": "Get a specific task",
                "tags": [
                    "Tasks"
                ],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.get(task_id='task_id')\n\n# \n# Get a Task object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer* or *annotation manager* who has been assigned the task.\n# \n# :param str task_name: optional - search by name\n# :param str task_id: optional - search by id\n# :return: task object\n# :rtype: dtlpy.entities.task.Task\n# \n# "
                    }
                ],
                "summary": "Get a specific task",
                "response": {}
            },
            "delete": {
                "operationId": "TasksDeleteTask",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a task",
                "tags": [
                    "Tasks"
                ],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.delete(task_id='task_id')\n\n# \n# Delete the Task.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer* or *annotation manager* who created that task.\n# \n# :param dtlpy.entities.task.Task task: the task object\n# :param str task_name: the name of the task\n# :param str task_id: the Id of the task\n# :param bool wait: wait until delete task finish\n# :return: True is success\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Delete a task",
                "response": {}
            }
        },
        "/annotationtasks/{id}/addToTask": {
            "post": {
                "operationId": "TasksAddItemsToTask",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APITask"
                        }
                    }
                },
                "description": "Add work to an existing Task",
                "tags": [
                    "Tasks"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": Task update payload",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddToTaskPayload"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Add work to an existing Task",
                "response": {}
            }
        },
        "/app-registry": {
            "post": {
                "operationId": "Dpk_publish",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDpk"
                                }
                            }
                        }
                    }
                },
                "description": "Publish an DPK app.\nSupply the dpk settings in the body request to create the object.",
                "tags": [
                    "dpk"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIPostDpk"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Publish an DPK app.\nSupply the dpk settings in the body request to create the object.",
                "response": {}
            }
        },
        "/app-registry/query": {
            "post": {
                "operationId": "Dpk_query",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIDpk"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "dpk"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/QueryString"
                },
                "summary": "",
                "response": {}
            }
        },
        "/app-registry/{id}": {
            "get": {
                "operationId": "Dpk_get",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDpk"
                                }
                            }
                        }
                    }
                },
                "description": "Get an dpk updated object from the db.",
                "tags": [
                    "dpk"
                ],
                "parameters": [
                    {
                        "description": "The dpk id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get an dpk updated object from the db.",
                "response": {}
            },
            "delete": {
                "operationId": "Dpk_deleteOne",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "dpk"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/app-registry/{name}/revisions": {
            "post": {
                "operationId": "Dpk_getRevisions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIDpk"
                                }
                            }
                        }
                    }
                },
                "description": "Get the revisions of dpk by name.",
                "tags": [
                    "dpk"
                ],
                "parameters": [
                    {
                        "description": "The dpk id",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/QueryString"
                },
                "summary": "Get the revisions of dpk by name.",
                "response": {}
            }
        },
        "/apps": {
            "post": {
                "operationId": "App_install",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIApp"
                                }
                            }
                        }
                    }
                },
                "description": "Install a new app.\nCreate and install a new app on the platform by given dpk name in the body request.",
                "tags": [
                    "apps"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIPostApp"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Install a new app.\nCreate and install a new app on the platform by given dpk name in the body request.",
                "response": {}
            }
        },
        "/apps/{id}": {
            "put": {
                "operationId": "App_update",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIApp"
                                }
                            }
                        }
                    }
                },
                "description": "Update existing app.\nThe server will save the new app props and refresh all the components belonging to the dpk app",
                "tags": [
                    "apps"
                ],
                "parameters": [
                    {
                        "description": "The app id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIPatchApp"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update existing app.\nThe server will save the new app props and refresh all the components belonging to the dpk app",
                "response": {}
            },
            "get": {
                "operationId": "App_get",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIApp"
                                }
                            }
                        }
                    }
                },
                "description": "Get an app updated object from the db.",
                "tags": [
                    "apps"
                ],
                "parameters": [
                    {
                        "description": "The app id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get an app updated object from the db.",
                "response": {}
            },
            "delete": {
                "operationId": "App_uninstall",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Uninstall running application.\nwill remove all the components belonging to the app",
                "tags": [
                    "apps"
                ],
                "parameters": [
                    {
                        "description": "The app id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Uninstall running application.\nwill remove all the components belonging to the app",
                "response": {}
            }
        },
        "/assignments": {
            "post": {
                "operationId": "AssignmentsCreateAssignment",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAssignment"
                        }
                    }
                },
                "description": "Create a new Assignment",
                "tags": [
                    "Assignments"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": Assignment creation payload",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssignmentPayload"
                        }
                    }
                ],
                "summary": "Create a new Assignment",
                "response": {}
            },
            "get": {
                "operationId": "AssignmentsFindAssignments",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAssignmentCursor"
                        }
                    }
                },
                "description": "Find assignments by query",
                "tags": [
                    "Assignments"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Filter by project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by assignee",
                        "in": "query",
                        "name": "annotator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Find by status",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "- How many assignments in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "taskId",
                        "required": false,
                        "type": "string"
                    }
                ],
                "summary": "Find assignments by query",
                "response": {}
            }
        },
        "/assignments/{id}": {
            "patch": {
                "operationId": "AssignmentsPatchAssignment",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAssignment"
                        }
                    }
                },
                "description": "Update an existing assignment",
                "tags": [
                    "Assignments"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": The fields to update",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartialAssignmentPayload"
                        }
                    },
                    {
                        "description": ": Assignment ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nassignment = task.assignments.update(assignment='assignment_entity', system_metadata=False)\n\n# \n# Update an assignment.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned as *owner* of the annotation task.\n# \n# :param dtlpy.entities.assignment.Assignment assignment assignment: assignment entity\n# :param bool system_metadata: True, if you want to change metadata system\n# :return: Assignment object\n# :rtype: dtlpy.entities.assignment.Assignment assignment\n# \n# "
                    }
                ],
                "summary": "Update an existing assignment",
                "response": {}
            },
            "get": {
                "operationId": "AssignmentsGetAssignment",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAssignment"
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    },
                    "404": {
                        "description": "Assignment not found",
                        "schema": {
                            "$ref": "#/definitions/Errors.NotFoundError"
                        }
                    }
                },
                "description": "Get a specific assignment",
                "tags": [
                    "Assignments"
                ],
                "parameters": [
                    {
                        "description": ": Assignment ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nassignment = task.assignments.get(assignment_id='assignment_id')\n\n# \n# Get Assignment object to use it in your code.\n# \n# :param str assignment_name: optional - search by name\n# :param str assignment_id: optional - search by id\n# :return: Assignment object\n# :rtype: dtlpy.entities.assignment.Assignment\n# \n# "
                    }
                ],
                "summary": "Get a specific assignment",
                "response": {}
            },
            "delete": {
                "operationId": "AssignmentsDeleteAssignment",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a assignment",
                "tags": [
                    "Assignments"
                ],
                "parameters": [
                    {
                        "description": ": Assignment ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Delete a assignment",
                "response": {}
            }
        },
        "/assignments/{id}/reassign": {
            "post": {
                "operationId": "AssignmentsReassignAssignment",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAssignment"
                        }
                    }
                },
                "description": "Reassign Assignment to annotator",
                "tags": [
                    "Assignments"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": ": Assignment creation payload",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReassignAssignmentPayload"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nassignment = task.assignments.reassign(assignee_ids='annotator1@dataloop.ai')\n\n# \n# Reassign an assignment.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned as *owner* of the annotation task.\n# \n# :param str assignee_id: the email of the user that want to assign the assignment\n# :param dtlpy.entities.assignment.Assignment assignment: assignment object\n# :param assignment_id: the Id of the assignment\n# :param dtlpy.entities.task.Task task: task object\n# :param str task_id: the Id of the task that include the assignment\n# :param bool wait: wait until reassign assignment finish\n# :return: Assignment object\n# :rtype: dtlpy.entities.assignment.Assignment\n# \n# "
                    }
                ],
                "summary": "Reassign Assignment to annotator",
                "response": {}
            }
        },
        "/assignments/{id}/redistribute": {
            "post": {
                "operationId": "AssignmentsRedistributeAssignment",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIAssignment"
                            }
                        }
                    }
                },
                "description": "Redistribute Assignment to annotators",
                "tags": [
                    "Assignments"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": ": Assignment creation payload",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RedistributeAssignmentPayload"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nassignment = task.assignments.redistribute(workload=dl.Workload([dl.WorkloadUnit(assignee_id=\"annotator1@dataloop.ai\", load=50),\ndl.WorkloadUnit(assignee_id=\"annotator2@dataloop.ai\", load=50)]))\n\n# \n# Redistribute an assignment.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned as *owner* of the annotation task.\n# \n# \n# :param dtlpy.entities.assignment.Workload workload: list of WorkloadUnit objects. Customize distribution (percentage) between the task assignees. For example: [dl.WorkloadUnit(annotator@hi.com, 80), dl.WorkloadUnit(annotator2@hi.com, 20)]\n# :param dtlpy.entities.assignment.Assignment assignment: assignment object\n# :param str assignment_id: the Id of the assignment\n# :param dtlpy.entities.task.Task task: the task object that include the assignment\n# :param str task_id: the Id of the task that include the assignment\n# :param bool wait: wait until redistribute assignment finish\n# :return: Assignment object\n# :rtype: dtlpy.entities.assignment.Assignment assignment\n# "
                    }
                ],
                "summary": "Redistribute Assignment to annotators",
                "response": {}
            }
        },
        "/audit/logs": {
            "post": {
                "operationId": "Query Audit Logs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditLogsCursorPage"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Audit"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "descending": {
                                        "type": "boolean"
                                    },
                                    "sortBy": {
                                        "type": "string"
                                    },
                                    "pageSize": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "page": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "toDate": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "fromDate": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "user": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "action": {
                                        "type": "string"
                                    },
                                    "entityName": {
                                        "type": "string"
                                    },
                                    "entityType": {
                                        "type": "string"
                                    },
                                    "id": {
                                        "type": "string"
                                    },
                                    "orgId": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "orgId"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/audit/logs/csv": {
            "get": {
                "operationId": "Get Audit Logs CSV",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Audit"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fromDate",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "toDate",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "entityType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "entityName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "entityId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "descending",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing": {
            "get": {
                "operationId": "List Usage Entries",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIUsageEntry"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "project",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/account/{account}/alerts/{id}": {
            "get": {
                "operationId": "Get Alert",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAlert"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/account/{account}/alerts/{id}/status": {
            "patch": {
                "operationId": "Update Alert",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAlert"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "$ref": "#/components/schemas/AlertStatus"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/billing/account/{id}": {
            "get": {
                "operationId": "List Usage Entries",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIUsageEntry"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/account/{id}/alerts/query": {
            "post": {
                "operationId": "ListAccountAlerts",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIAlert"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "sort": {
                                        "$ref": "#/components/schemas/FieldSort"
                                    },
                                    "pageSize": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "page": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "tier": {
                                        "$ref": "#/components/schemas/AlertTier"
                                    },
                                    "code": {
                                        "type": "string"
                                    },
                                    "status": {
                                        "$ref": "#/components/schemas/AlertStatus"
                                    },
                                    "orgId": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "accountId": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "subscriptionId": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "_id": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/billing/account/{id}/apicalls/csv": {
            "get": {
                "operationId": "Get Account API Calls CSV",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "skipSumming",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/account/{id}/apicalls/json": {
            "get": {
                "operationId": "Get Account API Calls JSON",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/account/{id}/csv": {
            "get": {
                "operationId": "List Usage CSV",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/accounts": {
            "post": {
                "operationId": "Create Billing Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBBillingAccount"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialBillingAccount"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/billing/accounts/dl/{id}": {
            "get": {
                "operationId": "Get Billing Account By DLAccount",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBBillingAccount"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/accounts/{id}": {
            "get": {
                "operationId": "Get Billing Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBBillingAccount"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            },
            "patch": {
                "operationId": "Edit Billing Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBBillingAccount"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialBillingAccount"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/billing/accounts/{id}/payments/drivers": {
            "get": {
                "operationId": "List Payment Drivers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DBPaymentDriverConfiguration"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/accounts/{id}/payments/methods": {
            "get": {
                "operationId": "List Payment Methods",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentMethod"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/accounts/{id}/payments/methods/{methodid}": {
            "get": {
                "operationId": "Get Payment Method",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentMethod"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "methodid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            },
            "delete": {
                "operationId": "Delete Payment Method",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "methodid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/{id}": {
            "get": {
                "operationId": "Get Usage Entry",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIUsageEntry"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/billing/{projectId}/serviceUsage/{serviceId}": {
            "get": {
                "operationId": "Get Service Usage",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FaasUsageServiceInstanceDescriptor"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "serviceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/compositions": {
            "post": {
                "operationId": "Composition_create",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new Composition.\nSupply the entities in the body request to create a Composition.",
                "tags": [
                    "compositions"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostComposition"
                },
                "summary": "Create a new Composition.\nSupply the entities in the body request to create a Composition.",
                "response": {}
            },
            "get": {
                "operationId": "Composition_list",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves Composition.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "filter: accepts any string",
                        "in": "query",
                        "name": "filter",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "sort: accepts any string",
                        "in": "query",
                        "name": "sort",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "page: accepts any number",
                        "in": "query",
                        "name": "page",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "pageSize: accepts any number",
                        "in": "query",
                        "name": "pageSize",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "summary": "Retrieves Composition.\n\nSupply query parameters to filter the list.",
                "response": {}
            }
        },
        "/compositions/{compositionId}": {
            "get": {
                "operationId": "Composition_get",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Get an composition updated object from the db.",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get an composition updated object from the db.",
                "response": {}
            },
            "patch": {
                "operationId": "Composition_update",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Update existing composition.\nThe server will save the new composition props and refresh all the entities belonging to the composition",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostComposition"
                },
                "summary": "Update existing composition.\nThe server will save the new composition props and refresh all the entities belonging to the composition",
                "response": {}
            }
        },
        "/compositions/{compositionId}/install": {
            "post": {
                "operationId": "Composition_install",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Install existing composition. setting all the entities",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "resumeOption": {
                                        "enum": [
                                            "terminateExistingCycles",
                                            "resumeExistingCycles"
                                        ],
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "description": "Pipeline resume option",
                    "required": true
                },
                "summary": "Install existing composition. setting all the entities",
                "response": {}
            }
        },
        "/compositions/{compositionId}/terminate": {
            "post": {
                "operationId": "Composition_terminate",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "enum": [
                                        "Created",
                                        "Initializing",
                                        "Installed",
                                        "Activated",
                                        "Deactivated",
                                        "Uninstalled",
                                        "Terminating",
                                        "Terminated",
                                        "Updating",
                                        "Failure"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Delete the composition. delete all the entities",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete the composition. delete all the entities",
                "response": {}
            }
        },
        "/compositions/{compositionId}/uninstall": {
            "post": {
                "operationId": "Composition_uninstall",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Uninstall existing composition. move all the entities to uninstall state",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "boolean"
                            }
                        }
                    },
                    "description": "Keep Composition Triggers Active"
                },
                "summary": "Uninstall existing composition. move all the entities to uninstall state",
                "response": {}
            }
        },
        "/compute/orgs/{orgId}/cleanup": {
            "delete": {
                "operationId": "Compute_cleanupOrg",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Cleanup org driver",
                "tags": [
                    "compute"
                ],
                "parameters": [
                    {
                        "description": "The org id",
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Cleanup org driver",
                "response": {}
            }
        },
        "/compute/registry/orgs/{orgId}/integrations/{integrationId}": {
            "post": {
                "operationId": "Compute_registryCred",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Apply docker private registry credentials on the user compute system.",
                "tags": [
                    "compute"
                ],
                "parameters": [
                    {
                        "description": "The org id",
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The integration id, each registry credentials should be saved as an integration vault",
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Apply docker private registry credentials on the user compute system.",
                "response": {}
            },
            "delete": {
                "operationId": "Compute_deleteRegistryCred",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete docker private registry credentials from the user compute system.",
                "tags": [
                    "compute"
                ],
                "parameters": [
                    {
                        "description": "The org id",
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The integration id, each registry credentials should be saved as an integration vault",
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete docker private registry credentials from the user compute system.",
                "response": {}
            }
        },
        "/datasets": {
            "get": {
                "operationId": "DatasetsListDatasets",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIDataset"
                            }
                        }
                    }
                },
                "description": "Get a names list of all existing datasets",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndatasets = project.datasets.list(name='name')\n\n# \n# List all datasets.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param str name: list by name\n# :param str creator: list by creator\n# :return: List of datasets\n# :rtype: list\n# \n# "
                    }
                ],
                "summary": "Get a names list of all existing datasets",
                "response": {}
            },
            "post": {
                "operationId": "DatasetsCreateDataset",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDataset"
                        },
                        "examples": {
                            "application/json": {
                                "name": "New Set Name",
                                "projects": [
                                    "project-id-1",
                                    "project-id-2"
                                ],
                                "driver": "mongo",
                                "accessLevel": "project"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    }
                },
                "description": "Create a new dataset",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Dataset creation options",
                        "in": "body",
                        "name": "options",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateDatasetRequest"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset = project.datasets.create(dataset_name='dataset_name', ontology_ids='ontology_ids')\n\n# \n# Create a new dataset\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str dataset_name: The Name of the dataset\n# :param list labels: dictionary of {tag: color} or list of label entities\n# :param list attributes: dataset's ontology's attributes\n# :param list ontology_ids: optional - dataset ontology\n# :param dtlpy.entities.driver.Driver driver: optional - storage driver Driver object or driver name\n# :param str driver_id: optional - driver id\n# :param bool checkout: set the dataset as a default dataset object (cookies)\n# :param ExpirationOptions expiration_options: dl.ExpirationOptions object that contain definitions for dataset like MaxItemDays\n# :param str index_driver: dl.IndexDriver, dataset driver version\n# :param str recipe_id: optional - recipe id\n# :return: Dataset object\n# :rtype: dtlpy.entities.dataset.Dataset\n# \n# "
                    }
                ],
                "summary": "Create a new dataset",
                "response": {}
            }
        },
        "/datasets/count": {
            "post": {
                "operationId": "DatasetsGetProjectDatasets",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "For org admin / owner:\nGet datasets count for projects\nGet datasets if a single project required",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "projectIds": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": ""
                                }
                            }
                        }
                    }
                ],
                "summary": "For org admin / owner:\nGet datasets count for projects\nGet datasets if a single project required",
                "response": {}
            }
        },
        "/datasets/deleteExpiredItems": {
            "post": {
                "operationId": "DatasetsDeleteExpiredItems",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APICommand"
                        }
                    }
                },
                "description": "Deletes all expired items\nEach dataset has the option to set it's SLA according to the attached example\n\nWhen setting expirationOptions.itemMaxAge to a number (100 for example),\nEach item in the dataset will be deleted once the corresponding number of days have passed since it's creation",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [],
                "summary": "Deletes all expired items\nEach dataset has the option to set it's SLA according to the attached example\n\nWhen setting expirationOptions.itemMaxAge to a number (100 for example),\nEach item in the dataset will be deleted once the corresponding number of days have passed since it's creation",
                "response": {}
            }
        },
        "/datasets/merge": {
            "post": {
                "operationId": "DatasetsMergeDatasets",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APICommand"
                        },
                        "examples": {
                            "application/json": {
                                "name": "New Set Name",
                                "datasetsIds": [],
                                "projectIds": [],
                                "mergeDatasetParams": {
                                    "withItemsAnnotations": true,
                                    "withMetadata": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "options",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MergeDatasetsRequest"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = project.datasets.merge(dataset_ids=['dataset_id1','dataset_id2'],\nmerge_name='dataset_merge_name',\nwith_metadata=True,\nwith_items_annotations=False,\nwith_task_annotations_status=False)\n\n# \n# Merge a dataset. See our `SDK docs <https://dataloop.ai/docs/sdk-create-dataset#merge-datasets>`_ for more information.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param str merge_name: new dataset name\n# :param list dataset_ids: list id's of the datatsets you wish to merge\n# :param str project_ids: the project id that include the datasets\n# :param bool with_items_annotations: true to merge with items annotations\n# :param bool with_metadata: true to merge with metadata\n# :param bool with_task_annotations_status: true to merge with task annotations' status\n# :param bool wait: wait for the command to finish\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/query": {
            "post": {
                "operationId": "DatasetsQueryDatasets",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "enum": [
                                "FilterQuery",
                                "UpdateQuery",
                                "DeleteQuery"
                            ],
                            "type": "string"
                        },
                        "enum": [
                            "FilterQuery",
                            "UpdateQuery",
                            "DeleteQuery"
                        ]
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/storage/project": {
            "post": {
                "operationId": "StorageGetProjectSizeInBytes",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                },
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProjectStorageRequest"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{datasetId}/annotations": {
            "post": {
                "operationId": "DatasetAnnotationsQueryAnnotations",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotationCursor"
                        }
                    }
                },
                "description": "Query annotations for a specified dataset",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/APIAnnotationsQuery"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "summary": "Query annotations for a specified dataset",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items": {
            "get": {
                "operationId": "DatasetItemsGetItems",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDatasetItemCursor"
                        },
                        "examples": {
                            "application/json": {
                                "example_query": {
                                    "itemType": "file",
                                    "directories": [
                                        "/some/dir",
                                        "/",
                                        "..."
                                    ],
                                    "filenames": [
                                        "/some/file.jpg",
                                        "/item/in/directory",
                                        "/",
                                        "..."
                                    ],
                                    "createdAt": {},
                                    "size": {
                                        "$gt": 50000
                                    },
                                    "mimetypes": [
                                        "image/jpeg",
                                        "video/mp4",
                                        "..."
                                    ],
                                    "annotated": true,
                                    "itemMetadata": {
                                        "my": {
                                            "metadata": {
                                                "has": {
                                                    "these": {
                                                        "field1": true,
                                                        "field2": 1
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "labels": [
                                        "dog",
                                        "cat",
                                        "..."
                                    ],
                                    "annotationTypes": [
                                        null,
                                        null,
                                        null
                                    ],
                                    "attributes": [
                                        "1",
                                        ",2",
                                        "..."
                                    ],
                                    "creators": [
                                        "assaf@dataloop.ai",
                                        "john",
                                        "some-org.com"
                                    ],
                                    "annotationMetadata": {
                                        "some": {
                                            "annotation": {
                                                "metadata": {
                                                    "is": true,
                                                    "queried": "123"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "List items in a dataset",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "URL encoded JSON query - See JSON example below",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Pages to skip",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "Number of items to fetch in each page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "summary": "List items in a dataset",
                "response": {}
            },
            "post": {
                "operationId": "DatasetItemsCreateItem",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDatasetFileItem"
                        }
                    }
                },
                "description": "Create a new item in a dataset\nOrder is important - FILE MUST BE LAST FIELD OF THE FORM",
                "tags": [
                    "Items"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Item type - 'file' or 'dir'",
                        "in": "formData",
                        "name": "type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Path in dataset for the new item, i.e: /my/file/path.jpg",
                        "in": "formData",
                        "name": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Stringified JSON object that represents the item metadata. i.e: {\"some\":{\"meta\":\"data\",\"bool\":true,\"numeric\":123}}",
                        "in": "formData",
                        "name": "metadata",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "File input (binary data)",
                        "in": "formData",
                        "name": "file",
                        "required": false,
                        "type": "file"
                    }
                ],
                "summary": "Create a new item in a dataset\nOrder is important - FILE MUST BE LAST FIELD OF THE FORM",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/": {
            "delete": {
                "operationId": "DatasetItemsRemoveItemsByQuery",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "filter": {
                                    "$ref": "#/definitions/Dictionary"
                                },
                                "join": {
                                    "$ref": "#/definitions/Dictionary"
                                }
                            }
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{id}": {
            "put": {
                "operationId": "DatasetItemsMoveItems",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Move files to a specified directory",
                "tags": [
                    "Items"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Dataset Id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "List of files to move to the specified directory",
                        "in": "body",
                        "name": "itemIds",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "summary": "Move files to a specified directory",
                "response": {}
            },
            "get": {
                "operationId": "DatasetItemsGetItem",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "enum": [
                                "APIDatasetFileItem",
                                "APIDatasetDirectory"
                            ],
                            "type": "string"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "",
                "response": {}
            },
            "delete": {
                "operationId": "DatasetItemsRemoveItem",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "",
                "response": {}
            },
            "patch": {
                "operationId": "DatasetItemsEditItem",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "enum": [
                                "APIDatasetFileItem",
                                "APIDatasetDirectory"
                            ],
                            "type": "string"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "item",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartialAPIDatasetItem"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{id}/clone": {
            "post": {
                "operationId": "DatasetItemsCloneItem",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APICommand"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "options",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ItemCloneRequest"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{id}/items": {
            "get": {
                "operationId": "DatasetItemsGetDirectoryChildItems",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDatasetItemCursor"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{id}/revisions": {
            "post": {
                "operationId": "DatasetItemsCreateItemRevision",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDatasetFileItem"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{id}/stream": {
            "get": {
                "operationId": "DatasetItemsStreamItem",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{id}/thumbnail": {
            "get": {
                "operationId": "DatasetItemsStreamItemThumbnail",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "width",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "height",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "annotations",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations": {
            "get": {
                "operationId": "DatasetItemAnnotationsListAnnotations",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIAnnotation"
                            }
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "List all annotations of an item",
                "response": {}
            },
            "post": {
                "operationId": "DatasetItemAnnotationsCreateAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "description": "Create an annotation or annotations for an item",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Annotation/s to be created\nIn the case of annotation parenting, annotation will need to include a parent - annotation request object and children - array of annotation request objects\nIn that case only the parent and children will be used\nThere is handling for mixed requests - both simple annotation and parent/children will be accepted and handled together",
                        "in": "body",
                        "name": "annotations",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Create an annotation or annotations for an item",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations-log": {
            "get": {
                "operationId": "DatasetItemAnnotationsLogListAnnotationsLog",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "List all annotations of an item",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations-log/{annotationId}": {
            "get": {
                "operationId": "DatasetItemAnnotationsLogGetAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "List all annotations of an item",
                "response": {}
            },
            "delete": {
                "operationId": "DatasetItemAnnotationsLogDeleteAnnotation",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Annotation from an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Delete an Annotation from an item",
                "response": {}
            },
            "put": {
                "operationId": "DatasetItemAnnotationsLogUpdateAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "Update an item's annotation",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Updated annotation object",
                        "in": "body",
                        "name": "annotation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAnnotationRequest"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "replace",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "summary": "Update an item's annotation",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations-log/{annotationId}/issue": {
            "put": {
                "operationId": "DatasetItemAnnotationsLogAnnotationIssues",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "Update an item's annotation status to issue",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Update an item's annotation status to issue",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations/{annotationId}": {
            "get": {
                "operationId": "DatasetItemAnnotationsGetAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "List all annotations of an item",
                "response": {}
            },
            "delete": {
                "operationId": "DatasetItemAnnotationsDeleteAnnotation",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Annotation from an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Delete an Annotation from an item",
                "response": {}
            },
            "put": {
                "operationId": "DatasetItemAnnotationsUpdateAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "Update an item's annotation",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Updated annotation object",
                        "in": "body",
                        "name": "annotation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAnnotationRequest"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "replace",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "summary": "Update an item's annotation",
                "response": {}
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations/{annotationId}/issue": {
            "put": {
                "operationId": "DatasetItemAnnotationsAnnotationIssues",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "Update an item's annotation status to issue",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Update an item's annotation status to issue",
                "response": {}
            }
        },
        "/datasets/{id}": {
            "get": {
                "operationId": "DatasetsGetDataset",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDataset"
                        }
                    }
                },
                "description": "Get a specific Dataset",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset = project.datasets.get(dataset_id='dataset_id')\n\n# \n# Get dataset by name or id.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# You must provide at least ONE of the following params: dataset_id, dataset_name.\n# \n# :param str dataset_name: optional - search by name\n# :param str dataset_id: optional - search by id\n# :param bool checkout: set the dataset as a default dataset object (cookies)\n# :param bool fetch: optional - fetch entity from platform (True), default taken from cookie\n# :return: Dataset object\n# :rtype: dtlpy.entities.dataset.Dataset\n# \n# "
                    }
                ],
                "summary": "Get a specific Dataset",
                "response": {}
            },
            "delete": {
                "operationId": "DatasetsDeleteDataset",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a dataset",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = project.datasets.delete(dataset_id='dataset_id', sure=True, really=True)\n\n:param str dataset_name: optional - search by name\n:param str dataset_id: optional - search by id\n:param bool sure: Are you sure you want to delete?\n:param bool really: Really really sure?\n:return: True is success\n:rtype: bool\n\n# \n# Delete a dataset forever!\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# "
                    }
                ],
                "summary": "Delete a dataset",
                "response": {}
            },
            "patch": {
                "operationId": "DatasetsPatchDataset",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDataset"
                        }
                    }
                },
                "description": "Update dataset properties",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Properties to update on the dataset",
                        "in": "body",
                        "name": "params",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/APIDatasetConfiguration"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset = project.datasets.update(dataset='dataset_entity')\n\n# \n# Update dataset field.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.dataset.Dataset dataset: dataset object\n# :param bool system_metadata: True, if you want to change metadata system\n# :param dict patch: Specific patch request\n# :return: Dataset object\n# :rtype: dtlpy.entities.dataset.Dataset\n# \n# "
                    }
                ],
                "summary": "Update dataset properties",
                "response": {}
            }
        },
        "/datasets/{id}/annotations": {
            "post": {
                "operationId": "DatasetsAnnotateItemsByRQL",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ClassifyFilteredItems"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{id}/annotations/json": {
            "get": {
                "operationId": "DatasetsGetAnnotationsAsJSON",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Download a JSON file representing all annotations in the specified dataset",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "directory",
                        "required": false,
                        "type": "string"
                    }
                ],
                "summary": "Download a JSON file representing all annotations in the specified dataset",
                "response": {}
            }
        },
        "/datasets/{id}/annotations/labels": {
            "get": {
                "operationId": "DatasetsGetDatasetLabelAggregation",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "",
                "response": {}
            },
            "post": {
                "operationId": "DatasetsGetFilteredDatasetLabelAggregation",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "filter",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "creators": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": ""
                                }
                            }
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{id}/annotations/zip": {
            "get": {
                "operationId": "DatasetsGetAnnotationsAsZIP",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Download a zip archive containing all annotations in the specified dataset\nDirectory structure is preserved in the zip archive\nEach item will be represented by a json file containing it's annotations",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "directory",
                        "required": false,
                        "type": "string"
                    }
                ],
                "summary": "Download a zip archive containing all annotations in the specified dataset\nDirectory structure is preserved in the zip archive\nEach item will be represented by a json file containing it's annotations",
                "response": {}
            }
        },
        "/datasets/{id}/annotations/zip/chunks": {
            "get": {
                "operationId": "DatasetsGetAnnotationsZIPChunks",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{id}/annotations/zip/chunks/{chunk}": {
            "get": {
                "operationId": "DatasetsStreamAnnotationsZIPChunk",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "chunk",
                        "required": true,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{id}/clone": {
            "post": {
                "operationId": "DatasetsCloneDataset",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APICommand"
                        },
                        "examples": {
                            "application/json": {
                                "name": "",
                                "filter": {
                                    "filter": {}
                                },
                                "cloneDatasetParams": {
                                    "withItemsAnnotations": true,
                                    "withMetadata": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "options",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CloneDatasetRequest"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset = project.datasets.clone(dataset_id='dataset_id',\nclone_name='dataset_clone_name',\nwith_metadata=True,\nwith_items_annotations=False,\nwith_task_annotations_status=False)\n\n# \n# Clone a dataset. Read more about cloning datatsets and items in our `documentation <https://dataloop.ai/docs/clone-merge-dataset#cloned-dataset>`_ and `SDK documentation <https://dataloop.ai/docs/sdk-create-dataset#clone-dataset>`_.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str dataset_id: id of the dataset you wish to clone\n# :param str clone_name: new dataset name\n# :param dtlpy.entities.filters.Filters filters: Filters entity or a query dict\n# :param bool with_items_annotations: true to clone with items annotations\n# :param bool with_metadata: true to clone with metadata\n# :param bool with_task_annotations_status: true to clone with task annotations' status\n# :return: dataset object\n# :rtype: dtlpy.entities.dataset.Dataset\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{id}/counters": {
            "delete": {
                "operationId": "DatasetsResetDatasetCounters",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Reset dataset counters (items count, anntotated count, etc...)",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "Dataset to be reset",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Reset dataset counters (items count, anntotated count, etc...)",
                "response": {}
            }
        },
        "/datasets/{id}/directoryTree": {
            "get": {
                "operationId": "DatasetsGetDirectoryTree",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/DatasetDirectoryTree"
                        }
                    }
                },
                "description": "Get a directory tree of the dataset",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Get a directory tree of the dataset",
                "response": {}
            }
        },
        "/datasets/{id}/export": {
            "post": {
                "operationId": "DatasetsExportDatasetAsZip",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "options",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExportDatasetRequest"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{id}/imports": {
            "post": {
                "operationId": "DatasetsImportItemsToDataset",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "importRequests",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ImportItemRequest"
                            }
                        }
                    }
                ],
                "summary": "",
                "response": {}
            },
            "delete": {
                "operationId": "DatasetsDetachItemsFromDataset",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Datasets"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "storageIds",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/datasets/{id}/query": {
            "post": {
                "operationId": "DatasetsQueryDataset",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Detailed information about RQL can be found at /api/v1/rql-docs",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Dataset to be queried",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Query JSON",
                        "in": "body",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "enum": [
                                "FilterQuery",
                                "UpdateQuery",
                                "DeleteQuery"
                            ],
                            "type": "string"
                        },
                        "enum": [
                            "FilterQuery",
                            "UpdateQuery",
                            "DeleteQuery"
                        ]
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.list(page_offset=0, page_size=100)\n\n# \n# List items in a dataset.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :param int page_offset: start page\n# :param int page_size: page size\n# :return: Pages object\n# :rtype: dtlpy.entities.paged_entities.PagedEntities\n# \n# "
                    }
                ],
                "summary": "Detailed information about RQL can be found at /api/v1/rql-docs",
                "response": {}
            }
        },
        "/datasets/{id}/restore": {
            "post": {
                "operationId": "DatasetsRestoreAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIAnnotation"
                            }
                        }
                    }
                },
                "description": "Update an item's annotation",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RestoreAnnotationsRequest"
                        }
                    }
                ],
                "summary": "Update an item's annotation",
                "response": {}
            }
        },
        "/datasets/{id}/sync": {
            "post": {
                "operationId": "DatasetsSync",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "202": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APICommand"
                        }
                    }
                },
                "description": "Synchronize missing files from storage",
                "tags": [
                    "Datasets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = project.datasets.sync(dataset_id='dataset_id')\n\n# \n# Sync dataset with external storage.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str dataset_id: The Id of the dataset to sync\n# :param bool wait: wait for the command to finish\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Synchronize missing files from storage",
                "response": {}
            }
        },
        "/datasets/{}/directoryTree": {
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndirectory_tree = project.datasets.directory_tree(dataset='dataset_entity')\n\n# \n# Get dataset's directory tree.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# You must provide at least ONE of the following params: dataset, dataset_name, dataset_id.\n# \n# :param dtlpy.entities.dataset.Dataset dataset: dataset object\n# :param str dataset_name: The Name of the dataset\n# :param str dataset_id: The Id of the dataset\n# :return: DirectoryTree\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/drivers": {
            "get": {
                "operationId": "DriversGetAllDrivers",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "List storage drivers",
                "tags": [
                    "Drivers"
                ],
                "parameters": [
                    {
                        "description": "- when specified - filter drivers by project",
                        "in": "query",
                        "name": "projectId",
                        "required": false,
                        "type": "string"
                    }
                ],
                "summary": "List storage drivers",
                "response": {}
            },
            "post": {
                "operationId": "DriversCreate",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Create a new storage driver",
                "tags": [
                    "Drivers"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": driver payload",
                        "in": "body",
                        "name": "config",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DriverPayload"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.drivers.create(name='driver_name',\ndriver_type=dl.ExternalStorage.S3,\nintegration_id='integration_id',\nbucket_name='bucket_name',\nproject_id='project_id',\nregion='ey-west-1')\n\n# \n# Create a storage driver.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str name: the driver name\n# :param ExternalStorage driver_type: dl.ExternalStorage (Enum). For all options run: list(dl.ExsternalStorage)\n# :param str integration_id: the integration id\n# :param str bucket_name: the external bucket name\n# :param IntegrationType integration_type: dl.IntegrationType (Enum). For all options run: list(dl.IntegrationType)\n# :param str project_id: project id\n# :param bool allow_external_delete: true to allow deleting files from external storage when files are deleted in your Dataloop storage\n# :param str region: relevant only for s3 - the bucket region\n# :param str storage_class: relevant only for s3\n# :param str path: Optional. By default path is the root folder. Path is case sensitive integration\n# :return: driver object\n# :rtype: dtlpy.entities.driver.Driver\n# \n# "
                    }
                ],
                "summary": "Create a new storage driver",
                "response": {}
            }
        },
        "/drivers/test": {
            "post": {
                "operationId": "DriversVerifyDriver",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Test external storage access",
                "tags": [
                    "Drivers"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": driver payload",
                        "in": "body",
                        "name": "config",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DriverPayload"
                        }
                    }
                ],
                "summary": "Test external storage access",
                "response": {}
            }
        },
        "/drivers/{id}": {
            "get": {
                "operationId": "DriversGetDriver",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Get storage driver configuration",
                "tags": [
                    "Drivers"
                ],
                "parameters": [
                    {
                        "description": "driver id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.drivers.get(driver_id='driver_id')\n\n# \n# Get a Driver object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# You must provide at least ONE of the following params: driver_name, driver_id.\n# \n# :param str driver_name: optional - search by name\n# :param str driver_id: optional - search by id\n# :return: Driver object\n# :rtype: dtlpy.entities.driver.Driver\n# \n# "
                    }
                ],
                "summary": "Get storage driver configuration",
                "response": {}
            },
            "patch": {
                "operationId": "DriversUpdateDriver",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Update storage driver configuration",
                "tags": [
                    "Drivers"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": fields to update",
                        "in": "body",
                        "name": "config",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartialDriverPayload"
                        }
                    },
                    {
                        "description": ": driverId",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Update storage driver configuration",
                "response": {}
            },
            "delete": {
                "operationId": "DriversDeleteDriver",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete storage driver\nNOTICE: datasets using the deleted driver will not be able to access storage after deletion",
                "tags": [
                    "Drivers"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.drivers.delete(dataset_id='dataset_id', sure=True, really=True)\n\n:param str driver_name: optional - search by name\n:param str driver_id: optional - search by id\n:param bool sure: Are you sure you want to delete?\n:param bool really: Really really sure?\n:return: True if success\n:rtype: bool\n\n# \n# Delete a driver forever!\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# "
                    }
                ],
                "summary": "Delete storage driver\nNOTICE: datasets using the deleted driver will not be able to access storage after deletion",
                "response": {}
            }
        },
        "/drivers/{id}/test": {
            "get": {
                "operationId": "DriversTestDriverPermissions",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Test external storage access",
                "tags": [
                    "Drivers"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Test external storage access",
                "response": {}
            }
        },
        "/drivers?projectId={id}": {
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.drivers.list()\n\n\n# \n# Get the project's drivers list.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :return: List of Drivers objects\n# :rtype: list\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/executions": {
            "get": {
                "operationId": "Executions_listExecutions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExecutionsPage"
                                }
                            }
                        }
                    }
                },
                "description": "List service executions.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "The project id",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The service name which the execution was running of",
                        "in": "query",
                        "name": "service",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The trigger name that has create the execution",
                        "in": "query",
                        "name": "trigger",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The function name",
                        "in": "query",
                        "name": "functionName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "orderByType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "createdAt",
                                "updatedAt"
                            ]
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "orderByDirection",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "createdAfter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "createdBefore",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The execution status",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "in-progress",
                                "failed",
                                "success",
                                "canceled",
                                "aborted",
                                "rerun",
                                "system-failure"
                            ]
                        }
                    },
                    {
                        "description": "The resourceType should be executions",
                        "in": "query",
                        "name": "resourceType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Dataset",
                                "Item",
                                "Annotation",
                                "Execution",
                                "Task",
                                "Assignment",
                                "Service",
                                "Package",
                                "Project",
                                "Json",
                                "String",
                                "Number",
                                "Integer",
                                "Float",
                                "Boolean",
                                "Model",
                                "Recipe",
                                "Dataset[]",
                                "Item[]",
                                "Annotation[]",
                                "Execution[]",
                                "Task[]",
                                "Assignment[]",
                                "Service[]",
                                "Package[]",
                                "Project[]",
                                "Json[]",
                                "String[]",
                                "Number[]",
                                "Integer[]",
                                "Float[]",
                                "Boolean[]",
                                "Model[]",
                                "Recipe[]"
                            ]
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "resourceId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "summary": "List service executions.",
                "response": {}
            }
        },
        "/executions/counters": {
            "get": {
                "operationId": "Executions_getExecutionCounters",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {}
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/executions/rerun": {
            "post": {
                "operationId": "Executions_rerunExecutionQuery",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "description": "Rerun batch execution.",
                "tags": [
                    "Executions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "description": "Rerun options.",
                    "required": true
                },
                "summary": "Rerun batch execution.",
                "response": {}
            }
        },
        "/executions/{executionId}/rerun": {
            "post": {
                "operationId": "Executions_rerunExecution",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "enum": [
                                        "APIExecution",
                                        "PiperSettingsCommands"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Rerun execution.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "executionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Wait for the execution to finish",
                        "in": "query",
                        "name": "sync",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.rerun(execution='execution_entity')\n\n# \n# Rerun execution\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.execution.Execution execution:\n# :param bool sync: wait for the execution to finish\n# :return: Execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ],
                "summary": "Rerun execution.",
                "response": {}
            }
        },
        "/executions/{id}": {
            "get": {
                "operationId": "Executions_getExecution",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIExecution"
                                }
                            }
                        }
                    }
                },
                "description": "Get an execution by id.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "if true, wait for the execution to finish",
                        "in": "query",
                        "name": "sync",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.get(execution_id='execution_id')\n\n# \n# Get Service execution object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param str execution_id: execution id\n# :param bool sync: if true, wait for the execution to finish\n# :return: Service execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ],
                "summary": "Get an execution by id.",
                "response": {}
            },
            "patch": {
                "operationId": "Executions_updateExecution",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIExecution"
                                }
                            }
                        }
                    }
                },
                "description": "Update execution changes to platform.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIExecutionPatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.update(execution='execution_entity')\n\n# \n# Update execution changes to platform\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.execution.Execution execution: execution entity\n# :return: Service execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ],
                "summary": "Update execution changes to platform.",
                "response": {}
            }
        },
        "/executions/{id}/attempts": {
            "post": {
                "operationId": "Executions_incrementExecutionAttempts",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "description": "Increment the number of attempts that an execution is allowed to attempt to run a service that is not responding.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Increment the number of attempts that an execution is allowed to attempt to run a service that is not responding.",
                "response": {}
            }
        },
        "/executions/{id}/progress": {
            "post": {
                "operationId": "Executions_pushProgress",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Update Execution Progress.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "timestamp": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": ""
                                    },
                                    "status": {
                                        "enum": [
                                            "created",
                                            "in-progress",
                                            "failed",
                                            "success",
                                            "canceled",
                                            "aborted",
                                            "rerun",
                                            "system-failure"
                                        ],
                                        "type": "string",
                                        "description": "Execution status"
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "message"
                                    },
                                    "percentComplete": {
                                        "type": "number",
                                        "format": "double",
                                        "description": "percent work done"
                                    },
                                    "error": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "output": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "serviceVersion": {
                                        "type": "string",
                                        "description": "service version"
                                    },
                                    "duration": {
                                        "type": "number",
                                        "format": "double",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update Execution Progress.",
                "response": {}
            }
        },
        "/executions/{id}/terminate": {
            "post": {
                "operationId": "Executions_terminateExecution",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Terminate Execution.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExecutionStatusReport"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.terminate(execution='execution_entity')\n\n# \n# Terminate Execution\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.execution.Execution execution:\n# :return: execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ],
                "summary": "Terminate Execution.",
                "response": {}
            }
        },
        "/executions/{serviceId}": {
            "post": {
                "operationId": "Executions_createExecution",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "enum": [
                                        "APIExecution",
                                        "APICommand"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Execute a function on an existing service.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Service id to execute on.",
                        "in": "path",
                        "name": "serviceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "if true, wait for function to end.",
                        "in": "query",
                        "name": "sync",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "batch": {
                                        "$ref": "#/components/schemas/ExecuteOptionsBatch"
                                    },
                                    "functionName": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "input": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "projectId": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "pipeline": {
                                        "$ref": "#/components/schemas/IPipelineExecution"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ncommand = service.executions.create_batch(\nexecution_inputs=dl.FunctionIO(type=dl.PackageInputType.STRING, value='test', name='string'),\nfilters=dl.Filters(field='dir', values='/test'),\nfunction_name='run')\n\n# \n# Execute a function on an existing service\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param str service_id: service id to execute on\n# :param filters: Filters entity for a filtering before execute\n# :param str function_name: function name to run\n# :param List[FunctionIO] or dict execution_inputs: input dictionary or list of FunctionIO entities\n# :param bool wait: wait until create task finish\n# :return: execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ],
                "summary": "Execute a function on an existing service.",
                "response": {}
            }
        },
        "/features/sets": {
            "get": {
                "operationId": "FeatureSetsGetFeatureSets",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIFeatureSet"
                            }
                        }
                    }
                },
                "description": "Get a feature set by id",
                "tags": [
                    "features",
                    "sets"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# List of features\n# \n# :return: List of features\n# :rtype: list\n# "
                    }
                ],
                "summary": "Get a feature set by id",
                "response": {}
            },
            "post": {
                "operationId": "FeatureSetsAddFeatureSets",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIFeatureSet"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    }
                },
                "description": "Add a new feature set",
                "tags": [
                    "features",
                    "sets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Feature set/s to be uploaded",
                        "in": "body",
                        "name": "sets",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Create a new Feature Set\n# \n# :param str name: the Feature name\n# :param int size: the length of a single vector in the set\n# :param str set_type: string of the feature type: 2d, 3d, modelFC, TSNE,PCA,FFT\n# :param entity_type: the entity that feature vector is linked to. Use the enum dl.FeatureEntityType\n# :param str project_id: the ID of the project where feature set will be created\n# :param list tags: optional tag per feature  - matched by index\n# :param str org_id: the ID of the org where feature set will be created\n# :param data_type: optional, only when using feature vector as scores. Use the enum dl.FeatureDataType\n# :return: Feature Set object\n# "
                    }
                ],
                "summary": "Add a new feature set",
                "response": {}
            }
        },
        "/features/sets/{id}": {
            "get": {
                "operationId": "FeatureSetsGetFeatureSet",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIFeatureSet"
                        }
                    }
                },
                "description": "Get a feature set by id",
                "tags": [
                    "features",
                    "sets"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Get Feature Set object\n# \n# :param str feature_set_name: name of the feature set\n# :param str feature_set_id: id of the feature set\n# :return: Feature object\n# "
                    }
                ],
                "summary": "Get a feature set by id",
                "response": {}
            },
            "delete": {
                "operationId": "FeatureSetsDeleteFeatureSet",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a feature set by id",
                "tags": [
                    "features",
                    "sets"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Delete feature vector\n# \n# :param str feature_set_id: feature set id to delete\n# :return: success\n# :rtype: bool\n# "
                    }
                ],
                "summary": "Delete a feature set by id",
                "response": {}
            },
            "patch": {
                "operationId": "FeatureSetsEditFeatureSet",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIFeatureSet"
                        }
                    }
                },
                "description": "Update a feature set by id",
                "tags": [
                    "features",
                    "sets"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "partial feature set to update",
                        "in": "body",
                        "name": "featureSet",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartialFeatureSet"
                        }
                    }
                ],
                "summary": "Update a feature set by id",
                "response": {}
            }
        },
        "/features/vectors": {
            "get": {
                "operationId": "FeatureVectorsGetFeatureVectors",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIFeatureVector"
                            }
                        }
                    }
                },
                "description": "Get feature vectors by creator",
                "tags": [
                    "features",
                    "vectors"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "summary": "Get feature vectors by creator",
                "response": {}
            },
            "post": {
                "operationId": "FeatureVectorsAddFeatureVectors",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIFeatureVector"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    }
                },
                "description": "Add new feature vector/s",
                "tags": [
                    "features",
                    "vectors"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "feature vector/s to be uploaded",
                        "in": "body",
                        "name": "vectors",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Create a new Feature vector\n# \n# :param immutable value: actual vector - immutable (list of floats [1,2,3])\n# :param str project_id: the id of the project where feature will be created\n# :param str feature_set_id: ref to a featureSet this vector is a part of\n# :param str entity_id: id of the entity the featureVector is linked to (item.id, annotation.id etc)\n# :param str version: version of the featureSet generator\n# :param str parent_id: optional: parent FeatureSet id - used when FeatureVector is a subFeature\n# :param str org_id: the id of the org where featureVector will be created\n# :param str refs: the context of the featureVector (feautureSet must be defined with dataType)\n# :return: Feature vector:\n# "
                    }
                ],
                "summary": "Add new feature vector/s",
                "response": {}
            }
        },
        "/features/vectors/query": {
            "post": {
                "operationId": "FeatureVectorsQueryFeatures",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Query feature vectors",
                "tags": [
                    "features",
                    "vectors"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "query to filter features by",
                        "in": "body",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryFilter"
                        }
                    }
                ],
                "summary": "Query feature vectors",
                "response": {}
            }
        },
        "/features/vectors/{id}": {
            "get": {
                "operationId": "FeatureVectorsGetFeatureVector",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIFeatureVector"
                        }
                    }
                },
                "description": "Get a feature vector by id",
                "tags": [
                    "features",
                    "vectors"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Get Feature object\n# \n# :param str feature_id: feature id\n# :return: Feature object\n# "
                    }
                ],
                "summary": "Get a feature vector by id",
                "response": {}
            },
            "delete": {
                "operationId": "FeatureVectorsDeleteFeatureVector",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a feature vector by id",
                "tags": [
                    "features",
                    "vectors"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Delete feature vector\n# \n# :param str feature_id: feature id to delete\n# :return: success\n# :rtype: bool\n# "
                    }
                ],
                "summary": "Delete a feature vector by id",
                "response": {}
            },
            "patch": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Update Feature Vector changes to platform\n# \n# :param entities.Feature feature: Feature object to update\n# :return: dl.Feature entity\n# "
                    }
                ],
                "response": {}
            }
        },
        "/instance_catalog": {
            "get": {
                "operationId": "InstanceCatalog_getInstanceCatalog",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "InstanceCatalog"
                ],
                "summary": "",
                "response": {}
            }
        },
        "/invoices": {
            "get": {
                "operationId": "List Account Invoices",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Invoice"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "tags": [
                    "Invoices"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "DL account ID",
                        "in": "query",
                        "name": "account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Invoice status, one of 'submitted', 'paid', 'partiallyPaid', 'debt', 'Failed Payment'",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date string, format: 'YYYY-MM-DD'. '2022-06-30' will be June 30th 2022",
                        "in": "query",
                        "name": "fromDate",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date string, format: 'YYYY-MM-DD'. '2022-06-30' will be June 30th 2022",
                        "in": "query",
                        "name": "toDate",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/invoices/{id}": {
            "get": {
                "operationId": "Get Invoice",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves the details of an invoice.\n\nSupply the unique invoice ID to fetch it's details.",
                "tags": [
                    "Invoices"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the invoice to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Retrieves the details of an invoice.\n\nSupply the unique invoice ID to fetch it's details.",
                "response": {}
            }
        },
        "/invoices/{id}/stream": {
            "get": {
                "operationId": "Stream Invoice Pdf",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Invoices"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/items/{id}": {
            "get": {
                "operationId": "ItemsGetItem",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "enum": [
                                "APIDatasetFileItem",
                                "APIDatasetDirectory"
                            ],
                            "type": "string"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.get(item_id='item_id')\n\n# \n# Get Item object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str filepath: optional - search by remote path\n# :param str item_id: optional - search by id\n# :param bool fetch: optional - fetch entity from platform, default taken from cookie\n# :param bool is_dir: True if you want to get an item from dir type\n# :return: Item object\n# :rtype: dtlpy.entities.item.Item\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            },
            "delete": {
                "operationId": "ItemsRemoveItem",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.delete(item_id='item_id')\n\n# \n# Delete item from platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# You must provide at least ONE of the following params: item id, filename, filters.\n# \n# :param str filename: optional - search item by remote path\n# :param str item_id: optional - search item by id\n# :param dtlpy.entities.filters.Filters filters: optional - delete items by filter\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            },
            "patch": {
                "operationId": "ItemsEditItem",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "enum": [
                                "APIDatasetFileItem",
                                "APIDatasetDirectory"
                            ],
                            "type": "string"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "item",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartialAPIDatasetItem"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.update(item='item_entity')\n\n# \n# Update item metadata.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# You must provide at least ONE of the following params: update_values, system_update_values.\n# \n# :param dtlpy.entities.item.Item item: Item object\n# :param dtlpy.entities.filters.Filters filters: optional update filtered items by given filter\n# :param update_values: optional field to be updated and new values\n# :param system_update_values: values in system metadata to be updated\n# :param bool system_metadata: True, if you want to update the metadata system\n# :return: Item object\n# :rtype: dtlpy.entities.item.Item\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/items/{id}/clone": {
            "post": {
                "operationId": "ItemsCloneItem",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APICommand"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "options",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ItemCloneRequest"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.clone(item_id='item_id',\ndst_dataset_id='dist_dataset_id',\nwith_metadata=True,\nwith_task_annotations_status=False,\nwith_annotations=False)\n\n# \n# Clone item. Read more about cloning datatsets and items in our `documentation <https://dataloop.ai/docs/clone-merge-dataset#cloned-dataset>`_ and `SDK documentation <https://dataloop.ai/docs/sdk-create-dataset#clone-dataset>`_.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str item_id: item to clone\n# :param str dst_dataset_id: destination dataset id\n# :param str remote_filepath: complete filepath\n# :param dict metadata: new metadata to add\n# :param bool with_annotations: clone annotations\n# :param bool with_metadata: clone metadata\n# :param bool with_task_annotations_status: clone task annotations status\n# :param bool allow_many: `bool` if True, using multiple clones in single dataset is allowed, (default=False)\n# :param bool wait: wait for the command to finish\n# :return: Item object\n# :rtype: dtlpy.entities.item.Item\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/items/{id}/items": {
            "get": {
                "operationId": "ItemsGetDirectoryChildItems",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDatasetItemCursor"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/items/{id}/revisions": {
            "post": {
                "operationId": "ItemsCreateItemRevision",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIDatasetFileItem"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/items/{id}/stream": {
            "get": {
                "operationId": "ItemsStreamItem",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/items/{id}/thumbnail": {
            "get": {
                "operationId": "ItemsStreamItemThumbnail",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "width",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "height",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "annotations",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/items/{itemId}/annotations": {
            "get": {
                "operationId": "ItemAnnotationsListAnnotations",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/APIAnnotation"
                            }
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "List all annotations of an item",
                "response": {}
            },
            "post": {
                "operationId": "ItemAnnotationsCreateAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "description": "Create an annotation for an item",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "body",
                        "name": "annotations",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nannotations = item.annotations.upload(annotations='builder')\n\n# \n# Upload a new annotation/annotations. You must first create the annotation using the annotation *builder* method.\n# \n# **Prerequisites**: Any user can upload annotations.\n# \n# :param List[dtlpy.entities.annotation.Annotation] or dtlpy.entities.annotation.Annotation annotations: list or\n# single annotation of type Annotation\n# :return: list of annotation objects\n# :rtype: entities.AnnotationCollection\n# \n# "
                    }
                ],
                "summary": "Create an annotation for an item",
                "response": {}
            }
        },
        "/items/{itemId}/annotations/{annotationId}": {
            "get": {
                "operationId": "ItemAnnotationsGetAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "List all annotations of an item",
                "response": {}
            },
            "delete": {
                "operationId": "ItemAnnotationsDeleteAnnotation",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Annotation from an item",
                "tags": [
                    "Annotations"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Delete an Annotation from an item",
                "response": {}
            },
            "put": {
                "operationId": "ItemAnnotationsUpdateAnnotation",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "Update an item's annotation",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Updated annotation object",
                        "in": "body",
                        "name": "annotation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAnnotationRequest"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "replace",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "summary": "Update an item's annotation",
                "response": {}
            }
        },
        "/items/{itemId}/annotations/{annotationId}/issue": {
            "put": {
                "operationId": "ItemAnnotationsAnnotationIssues",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIAnnotation"
                        }
                    }
                },
                "description": "Update an item's annotation status to issue",
                "tags": [
                    "Annotations"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Update an item's annotation status to issue",
                "response": {}
            }
        },
        "/ml/metrics/publish": {
            "post": {
                "operationId": "Publish Model Metrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errorMap": {
                                            "properties": {},
                                            "additionalProperties": {
                                                "$ref": "#/components/schemas/Error"
                                            },
                                            "type": "object"
                                        },
                                        "failed": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "succeeded": {
                                            "type": "number",
                                            "format": "double"
                                        }
                                    },
                                    "required": [
                                        "failed",
                                        "succeeded"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Publish Model Metrics\n\nSupply single or multiple metrics to publish",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The metric or metrics to publish",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/MetricRequest"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/components/schemas/MetricRequest"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "The metric or metrics to publish"
                            }
                        }
                    }
                },
                "summary": "Publish Model Metrics\n\nSupply single or multiple metrics to publish",
                "response": {}
            }
        },
        "/ml/metrics/query": {
            "post": {
                "operationId": "Query Model Metrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPISetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Query Model Metrics\n\nSupply the query requested to query Metrics",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                },
                "summary": "Query Model Metrics\n\nSupply the query requested to query Metrics",
                "response": {}
            }
        },
        "/ml/metrics/shebang": {
            "post": {
                "operationId": "Generate Model Metrics Report",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Generate Model Metrics Report\n\nSupply single or multiple Model ids to generate report for",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "datasetIds": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ],
                                        "description": "The dataset or datasets to generate report for"
                                    },
                                    "modelIds": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ],
                                        "description": "The models to generate report for"
                                    }
                                },
                                "required": [
                                    "modelIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Generate Model Metrics Report\n\nSupply single or multiple Model ids to generate report for",
                "response": {}
            }
        },
        "/ml/metrics/{id}": {
            "delete": {
                "operationId": "Delete Metric",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Delete a Metric\n\nSupply the unique id of the Metric to delete",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Metric to Delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a Metric\n\nSupply the unique id of the Metric to delete",
                "response": {}
            }
        },
        "/ml/models": {
            "get": {
                "operationId": "List Models",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPISetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves Models.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "filter: accepts any string",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "sort: accepts any string",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "page: accepts any number",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "pageSize: accepts any number",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ],
                "summary": "Retrieves Models.\n\nSupply query parameters to filter the list.",
                "response": {}
            },
            "post": {
                "operationId": "Create Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Creates a new Model.\n\nSupply the appropriate Create Request object in order to create a Model.",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The Model to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateModelRequest",
                                "description": "The Model to create"
                            }
                        }
                    }
                },
                "summary": "Creates a new Model.\n\nSupply the appropriate Create Request object in order to create a Model.",
                "response": {}
            }
        },
        "/ml/models/datasets/count": {
            "get": {
                "operationId": "Models Datasets Count",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "datasetsCount": {
                                            "type": "number",
                                            "format": "double"
                                        }
                                    },
                                    "required": [
                                        "datasetsCount"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Models Datasets Count\n\nThis will return the total dataset count that models have been assigned to",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "summary": "Models Datasets Count\n\nThis will return the total dataset count that models have been assigned to",
                "response": {}
            }
        },
        "/ml/models/executions": {
            "post": {
                "operationId": "Models Executions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModelJoinMap"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Models Executions\n\nThis will return latest 1000 models executions",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                },
                "summary": "Models Executions\n\nThis will return latest 1000 models executions",
                "response": {}
            }
        },
        "/ml/models/query": {
            "post": {
                "operationId": "Query Models",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPISetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Query Models\n\nSupply the query requested to query Models",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                },
                "summary": "Query Models\n\nSupply the query requested to query Models",
                "response": {}
            }
        },
        "/ml/models/services": {
            "post": {
                "operationId": "Models Services",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModelJoinMap"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Models Services\n\nThis will return latest 1000 models servuces",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                },
                "summary": "Models Services\n\nThis will return latest 1000 models servuces",
                "response": {}
            }
        },
        "/ml/models/{id}": {
            "get": {
                "operationId": "Get Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves the details of a Model.\n\nSupply the unique Model ID to fetch it's details.",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Retrieves the details of a Model.\n\nSupply the unique Model ID to fetch it's details.",
                "response": {}
            },
            "patch": {
                "operationId": "Update Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Update a Model\n\nSupply the unique id of the Model to update and an object describing which fields update",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to Update",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values to update with",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchModelRequest",
                                "description": "The values to update with"
                            }
                        }
                    }
                },
                "summary": "Update a Model\n\nSupply the unique id of the Model to update and an object describing which fields update",
                "response": {}
            },
            "delete": {
                "operationId": "Delete Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Delete a Model\n\nSupply the unique id of the Model to delete",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to Delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a Model\n\nSupply the unique id of the Model to delete",
                "response": {}
            }
        },
        "/ml/models/{id}/clone": {
            "post": {
                "operationId": "Clone Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIModel"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Clone Model\n\nthis will either clone or create a copy both dataset and model and create new instances of them\n\nProvide the model ID of the Model to clone from\n\nAlso provide the Clone spec to clone a dataset with a filter and the model\nOr provide parameters to overwrite the current values in the model you want to clone",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to clone from",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Provide the Clone spec to clone a dataset with a filter and the model\nOr Provide parameters to overwrite the current values in the model you want to clone",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/Partial_CreateModelRequest_"
                                    },
                                    {
                                        "$ref": "#/components/schemas/APICopyEnvironmentSpec"
                                    }
                                ],
                                "description": "Provide the Clone spec to clone a dataset with a filter and the model\nOr Provide parameters to overwrite the current values in the model you want to clone"
                            }
                        }
                    }
                },
                "summary": "Clone Model\n\nthis will either clone or create a copy both dataset and model and create new instances of them\n\nProvide the model ID of the Model to clone from\n\nAlso provide the Clone spec to clone a dataset with a filter and the model\nOr provide parameters to overwrite the current values in the model you want to clone",
                "response": {}
            }
        },
        "/ml/models/{id}/deploy": {
            "post": {
                "operationId": "Deploy Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Deploy Model\n\nSupply the model id to deploy it as a service\nYou can also supply specific config for the deployed service",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to train",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Service Configuration",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pipeline": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "serviceConfig": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    }
                                },
                                "type": "object",
                                "description": "Service Configuration"
                            }
                        }
                    }
                },
                "summary": "Deploy Model\n\nSupply the model id to deploy it as a service\nYou can also supply specific config for the deployed service",
                "response": {}
            }
        },
        "/ml/models/{id}/evaluate": {
            "post": {
                "operationId": "Evaluate Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Execution"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Evaluate Model\n\nSupply data to evaluate the model on\nYou can also supply specific config for the deployed service",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to train",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "config": {
                                        "properties": {
                                            "pipeline": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            },
                                            "serviceConfig": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            }
                                        },
                                        "type": "object",
                                        "description": "Service Configuration"
                                    },
                                    "input": {
                                        "properties": {
                                            "datasetQuery": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            },
                                            "datasetId": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object",
                                        "description": "Evaluate input"
                                    }
                                },
                                "required": [
                                    "input"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Evaluate Model\n\nSupply data to evaluate the model on\nYou can also supply specific config for the deployed service",
                "response": {}
            }
        },
        "/ml/models/{id}/predict": {
            "post": {
                "operationId": "Model Prediction",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Execution"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Model Prediction\n\nSupply the resource to perform prediction on\nYou can also supply specific config for the deployed service",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to train",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "config": {
                                        "properties": {
                                            "serviceId": {
                                                "type": "string"
                                            },
                                            "pipeline": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            },
                                            "serviceConfig": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            }
                                        },
                                        "type": "object",
                                        "description": "Service Configuration"
                                    },
                                    "input": {
                                        "properties": {
                                            "datasetQuery": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            },
                                            "datasetId": {
                                                "type": "string"
                                            },
                                            "itemIds": {
                                                "anyOf": [
                                                    {
                                                        "type": "string"
                                                    },
                                                    {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object",
                                        "description": "Predict input"
                                    }
                                },
                                "required": [
                                    "input"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "summary": "Model Prediction\n\nSupply the resource to perform prediction on\nYou can also supply specific config for the deployed service",
                "response": {}
            }
        },
        "/ml/models/{id}/train": {
            "post": {
                "operationId": "Train Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Execution"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Train Model\n\nSupply the model id to initiate a training session\nYou can also supply specific config for the deployed service",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to train",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Service Configuration",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pipeline": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "serviceConfig": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    }
                                },
                                "type": "object",
                                "description": "Service Configuration"
                            }
                        }
                    }
                },
                "summary": "Train Model\n\nSupply the model id to initiate a training session\nYou can also supply specific config for the deployed service",
                "response": {}
            }
        },
        "/ontologies": {
            "post": {
                "operationId": "OntologiesCreateOntology",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIOntology"
                        }
                    }
                },
                "description": "Create a new Ontology",
                "tags": [
                    "Ontologies"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": Ontology creation payload",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOntologyPayload"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nrecipe.ontologies.create(labels='labels_entity',\ntitle='new_ontology',\nproject_ids='project_ids')\n\n# \n# Create a new ontology.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param labels: recipe tags\n# :param str title: ontology title, name\n# :param list project_ids: recipe project/s\n# :param list attributes: recipe attributes\n# :return: Ontology object\n# :rtype: dtlpy.entities.ontology.Ontology\n# \n# "
                    }
                ],
                "summary": "Create a new Ontology",
                "response": {}
            },
            "get": {
                "operationId": "OntologiesFindOntologies",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIOntologyCursor"
                        }
                    }
                },
                "description": "Find ontologies by query",
                "tags": [
                    "Ontologies"
                ],
                "parameters": [
                    {
                        "description": "- An array of project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- System flag",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "ids",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "- How many ontologies in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "summary": "Find ontologies by query",
                "response": {}
            }
        },
        "/ontologies/{id}": {
            "put": {
                "operationId": "OntologiesUpdateOntology",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIOntology"
                        }
                    }
                },
                "description": "Update an existing Ontology",
                "tags": [
                    "Ontologies"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "ontology",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/APIOntologyConfiguration"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nrecipe.ontologies.delete(ontology='ontology_entity')\n# \n# Update the Ontology metadata.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.ontology.Ontology ontology: Ontology object\n# :param bool system_metadata: bool - True, if you want to change metadata system\n# :return: Ontology object\n# :rtype: dtlpy.entities.ontology.Ontology\n# \n# \n# "
                    }
                ],
                "summary": "Update an existing Ontology",
                "response": {}
            },
            "get": {
                "operationId": "OntologiesGetOntology",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIOntology"
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    },
                    "404": {
                        "description": "Ontology not found",
                        "schema": {
                            "$ref": "#/definitions/Errors.NotFoundError"
                        }
                    }
                },
                "description": "Get a specific Ontology",
                "tags": [
                    "Ontologies"
                ],
                "parameters": [
                    {
                        "description": ": Ontology ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nrecipe.ontologies.get(ontology_id='ontology_id')\n\n# \n# Get Ontology object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str ontology_id: ontology id\n# :return: Ontology object\n# :rtype: dtlpy.entities.ontology.Ontology\n# \n# "
                    }
                ],
                "summary": "Get a specific Ontology",
                "response": {}
            },
            "delete": {
                "operationId": "OntologiesDeleteOntology",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Ontology",
                "tags": [
                    "Ontologies"
                ],
                "parameters": [
                    {
                        "description": ": Ontology ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nrecipe.ontologies.delete(ontology_id='ontology_id')\n\n# \n# Delete Ontology from the platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param ontology_id: ontology id\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Delete an Ontology",
                "response": {}
            }
        },
        "/ontologies/{id}/addLabels": {
            "patch": {
                "operationId": "OntologiesAddLabels",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIOntology"
                        }
                    }
                },
                "description": "Update an existing Ontology",
                "tags": [
                    "Ontologies"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "labelsPayload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddLabelsNodePayload"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Update an existing Ontology",
                "response": {}
            }
        },
        "/ontologies/{id}/labels": {
            "patch": {
                "operationId": "OntologiesUpdateLabels",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIOntology"
                        }
                    }
                },
                "description": "Update an existing Ontology",
                "tags": [
                    "Ontologies"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "labelsPayload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateLabelsNodePayload"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "summary": "Update an existing Ontology",
                "response": {}
            }
        },
        "/orgs": {
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\norganizations = dl.organizations.list()\n\n# \n# Lists all the organizations in Dataloop.\n# \n# **Prerequisites**: You must be a **superuser** to use this method.\n# \n# :return: List of Organization objects\n# :rtype: list\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/orgs/{id}": {
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\norg = dl.organizations.get(organization_id='organization_id')\n\n# \n# Get Organization object to be able to use it in your code.\n# \n# **Prerequisites**: You must be a **superuser** to use this method.\n# \n# You must provide at least ONE of the following params: organization_name or organization_id.\n# \n# :param str organization_id: optional - search by id\n# :param str organization_name: optional - search by name\n# :param fetch: optional - fetch entity from platform, default taken from cookie\n# :return: Organization object\n# :rtype: dtlpy.entities.organization.Organization\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/orgs/{org_id}": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "summary": "api/v1/orgs/{org_id}",
                "description": "get a specific Org",
                "parameters": [
                    {
                        "name": "org_id",
                        "in": "path",
                        "description": "Org id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contributor"
                                }
                            }
                        }
                    }
                },
                "response": {}
            },
            "delete": {
                "tags": [
                    "Organization"
                ],
                "summary": "Delete an organization",
                "parameters": [
                    {
                        "name": "org_id",
                        "in": "path",
                        "description": "Org id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "response": {}
            }
        },
        "/orgs/{org_id}/integrations": {
            "post": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.create(integrations_type=dl.IntegrationType.S3,\nname='S3ntegration',\noptions={key: \"Access key ID\", secret: \"Secret access key\"})\n\n# \n# Create an integration between an external storage and the organization.\n# \n# **Examples for options include**:\n# s3 - {key: \"\", secret: \"\"};\n# gcs - {key: \"\", secret: \"\", content: \"\"};\n# azureblob - {key: \"\", secret: \"\", clientId: \"\", tenantId: \"\"};\n# key_value - {key: \"\", value: \"\"}\n# aws-sts - {key: \"\", secret: \"\", roleArns: \"\"}\n# aws-cross - {}\n# \n# **Prerequisites**: You must be an *owner* in the organization.\n# \n# :param IntegrationType integrations_type: integrations type dl.IntegrationType\n# :param str name: integrations name\n# :param dict options: dict of storage secrets\n# :return: success\n# :rtype: bool\n# \n# "
                    }
                ],
                "response": {}
            },
            "patch": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.update(integrations_id='integrations_id', new_options={roleArn: \"\"})\n\n# \n# Update the integration's name.\n# \n# **Prerequisites**: You must be an *owner* in the organization.\n# \n# :param str new_name: new name\n# :param str integrations_id: integrations id\n# :param Integration integration: integration object\n# :param dict new_options: new value\n# :return: Integration object\n# :rtype: dtlpy.entities.integration.Integration\n# \n# **Examples for options include**:\n# s3 - {key: \"\", secret: \"\"};\n# gcs - {key: \"\", secret: \"\", content: \"\"};\n# azureblob - {key: \"\", secret: \"\", clientId: \"\", tenantId: \"\"};\n# key_value - {key: \"\", value: \"\"}\n# aws-sts - {key: \"\", secret: \"\", roleArns: \"\"}\n# aws-cross - {roleArn: \"\"}\n# \n# "
                    }
                ],
                "response": {}
            },
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.list(only_available=True)\n\n# \n# List all the organization's integrations with external storage.\n# \n# **Prerequisites**: You must be an *owner* in the organization.\n# \n# :param bool only_available: if True list only the available integrations.\n# :return: groups list\n# :rtype: list\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/orgs/{org_id}/integrations/{id}": {
            "delete": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.delete(integrations_id='integrations_id', sure=True, really=True)\n\n# \n# Delete integrations from the organization.\n# \n# **Prerequisites**: You must be an organization *owner* to delete an integration.\n# \n# :param str integrations_id: integrations id\n# :param bool sure: Are you sure you want to delete?\n# :param bool really: Really really sure?\n# :return: success\n# :rtype: bool\n# \n# "
                    }
                ],
                "response": {}
            },
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.get(integrations_id='integrations_id')\n\n# \n# Get organization integrations. Use this method to access your integration and be able to use it in your code.\n# \n# **Prerequisites**: You must be an *owner* in the organization.\n# \n# :param str integrations_id: integrations id\n# :return: Integration object\n# :rtype: dtlpy.entities.integration.Integration\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/orgs/{org_id}/members": {
            "post": {
                "tags": [
                    "Organization"
                ],
                "summary": "Adding new member to existing org",
                "parameters": [
                    {
                        "name": "org_id",
                        "in": "path",
                        "description": "Org id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "emails": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "role": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Contributor"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "payload",
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = dl.organizations.add_member(email='user@domain.com',\norganization_id='organization_id',\nrole=dl.MemberOrgRole.MEMBER)\n\n# \n# Add members to your organization. Read about members and groups `here <https://dataloop.ai/docs/org-members-groups>`_.\n# \n# **Prerequisities**: To add members to an organization, you must be an *owner* in that organization.\n# \n# You must provide at least ONE of the following params: organization, organization_name, or organization_id.\n# \n# :param str email: the member's email\n# :param str role: MemberOrgRole.ADMIN, MemberOrgRole.OWNER, MemberOrgRole.MEMBER, MemberOrgRole.WORKER\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :param entities.Organization organization: Organization object\n# :return: True if successful or error if unsuccessful\n# :rtype: bool\n# \n# "
                    }
                ],
                "response": {}
            },
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nlist_members = dl.organizations.list_members(organization='organization-entity',\nrole=dl.MemberOrgRole.MEMBER)\n\n# \n# List all organization members.\n# \n# **Prerequisites**: You must be an organization *owner* to use this method.\n# \n# You must provide at least ONE of the following params: organization_id, organization_name, or organization.\n# \n# :param entities.Organization organization: Organization object\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :param entities.MemberOrgRole role: MemberOrgRole.ADMIN, MemberOrgRole.OWNER, MemberOrgRole.MEMBER, MemberOrgRole.WORKER\n# :return: projects list\n# :rtype: list\n# \n# "
                    }
                ],
                "response": {}
            },
            "patch": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nmember_json = dl.organizations.update_member(email='user@domain.com',\norganization_id='organization_id',\nrole=dl.MemberOrgRole.MEMBER)\n\n# \n# Update member role.\n# \n# **Prerequisites**: You must be an organization *owner* to update a member's role.\n# \n# You must provide at least ONE of the following params: organization, organization_name, or organization_id.\n# \n# :param str email: the member's email\n# :param str role: MemberOrgRole.ADMIN, MemberOrgRole.OWNER, MemberOrgRole.MEMBER, MemberOrgRole.WORKER\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :param entities.Organization organization: Organization object\n# :return: json of the member fields\n# :rtype: dict\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/orgs/{org_id}/members/{user_id}": {
            "delete": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = dl.organizations.delete_member(user_id='user_id',\norganization_id='organization_id',\nsure=True,\nreally=True)\n\n# \n# Delete member from the Organization.\n# \n# **Prerequisites**: Must be an organization *owner* to delete members.\n# \n# You must provide at least ONE of the following params: organization_id, organization_name, organization.\n# \n# :param str user_id: user id\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :param entities.Organization organization: Organization object\n# :param bool sure: Are you sure you want to delete?\n# :param bool really: Really really sure?\n# :return: True if success and error if not\n# :rtype: bool\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/orgs/{org_id}/members/{user_id}/projects": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "summary": "List user's org projects",
                "parameters": [
                    {
                        "name": "org_id",
                        "in": "path",
                        "description": "Org id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Allowed for org's admin and for user in org only",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectDetails"
                                    }
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/orgs/{org_id}/plan": {
            "patch": {
                "tags": [
                    "Organization"
                ],
                "summary": "Update existing org",
                "parameters": [
                    {
                        "name": "org_id",
                        "in": "path",
                        "description": "Org id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plan",
                        "in": "query",
                        "description": "update plan for org",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "freemium",
                                "premium"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Contributor"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\norg = dl.organizations.update(organization='organization-entity',\nplan=dl.OrganizationsPlans.FREEMIUM)\n\n# \n# Update an organization.\n# \n# **Prerequisites**: You must be a **superuser** to update an organization.\n# \n# You must provide at least ONE of the following params: organization, organization_name, or organization_id.\n# \n# :param str plan: OrganizationsPlans.FREEMIUM, OrganizationsPlans.PREMIUM\n# :param entities.Organization organization: Organization object\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :return: organization object\n# :rtype: dtlpy.entities.organization.Organization\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/orgs/{org_id}/projects": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "summary": "List all org projects",
                "parameters": [
                    {
                        "name": "org_id",
                        "in": "path",
                        "description": "Org id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Allowed for org's admin only",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectDetails"
                                    }
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/packages": {
            "get": {
                "operationId": "Packages_listPackages",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PackagesPage"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            },
            "post": {
                "operationId": "Packages_createPackage",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPackage"
                                }
                            }
                        }
                    }
                },
                "description": "Create new package.",
                "tags": [
                    "Packages"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/APIPackage"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.push(package_name='package_name',\nmodules=[module],\nversion='1.0.0',\nsrc_path=os.getcwd()\n)\n\n# \n# Push your local package to the UI.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# Project will be taken in the following hierarchy:\n# project(input) -> project_id(input) -> self.project(context) -> checked out\n# \n# :param dtlpy.entities.project.Project project: optional - project entity to deploy to. default from context or checked-out\n# :param str project_id: optional - project id to deploy to. default from context or checked-out\n# :param str package_name: package name\n# :param str src_path: path to package codebase\n# :param dtlpy.entities.codebase.Codebase codebase: codebase object\n# :param list modules: list of modules PackageModules of the package\n# :param bool is_global: is package is global or local\n# :param bool checkout: checkout package to local dir\n# :param str revision_increment: optional - str - version bumping method - major/minor/patch - default = None\n# :param str version: semver version f the package\n# :param bool ignore_sanity_check: NOT RECOMMENDED - skip code sanity check before pushing\n# :param bool service_update: optional - bool - update the service\n# :param dict service_config : Service object as dict. Contains the spec of the default service to create.\n# :param list slots: optional - list of slots PackageSlot of the package\n# :param list requirements: requirements - list of package requirements\n# :param str package_type: default 'faas', options: 'app', 'ml\n# :param dict metadata: dictionary of system and user metadata\n# \n# :return: Package object\n# :rtype: dtlpy.entities.package.Package\n# \n# "
                    }
                ],
                "summary": "Create new package.",
                "response": {}
            }
        },
        "/packages/{ids}": {
            "delete": {
                "operationId": "Packages_deletePackages",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete Package object.",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "List of Package id.",
                        "in": "path",
                        "name": "ids",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.delete(package_name='package_name')\n\n# \n# Delete a Package object.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.package.Package package: package entity\n# :param str package_id: package id\n# :param str package_name: package name\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Delete Package object.",
                "response": {}
            }
        },
        "/packages/{id}": {
            "get": {
                "operationId": "Packages_getPackage",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPackage"
                                }
                            }
                        }
                    }
                },
                "description": "Get package by id.",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "Package id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The package version",
                        "in": "query",
                        "name": "version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.get(package_id='package_id')\n\n# \n# Get Package object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str package_id: package id\n# :param str package_name: package name\n# :param bool checkout: set the package as a default package object (cookies)\n# :param fetch: optional - fetch entity from platform, default taken from cookie\n# :return: Package object\n# :rtype: dtlpy.entities.package.Package\n# \n# "
                    }
                ],
                "summary": "Get package by id.",
                "response": {}
            },
            "patch": {
                "operationId": "Packages_updatePackage",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPackage"
                                }
                            }
                        }
                    }
                },
                "description": "Update package changes.",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "package id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/APIPackage"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.delete(package='package_entity')\n\n# \n# Update Package changes to the platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.package.Package package:\n# :param revision_increment: optional - str - version bumping method - major/minor/patch - default = None\n# :return: Package object\n# :rtype: dtlpy.entities.package.Package\n# \n# "
                    }
                ],
                "summary": "Update package changes.",
                "response": {}
            }
        },
        "/packages/{id}/revisions": {
            "get": {
                "operationId": "Packages_getPackageRevisions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/APIPackage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Get package revisions by id.",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "package id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.revisions(package='package_entity')\n\n# \n# Get the package revisions history.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.package.Package package: package entity\n# :param str package_id: package id\n# \n# "
                    }
                ],
                "summary": "Get package revisions by id.",
                "response": {}
            }
        },
        "/pipelines": {
            "post": {
                "operationId": "Pipeline_create",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Create a pipeline.",
                "tags": [
                    "pipelines"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostPipeline"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline = project.pipelines.create(name='pipeline_name')\n\n# \n# Create a new pipeline.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param str name: pipeline name\n# :param str project_id: project id\n# :param dict pipeline_json: json containing the pipeline fields\n# :return: Pipeline object\n# :rtype: dtlpy.entities.pipeline.Pipeline\n# \n# "
                    }
                ],
                "summary": "Create a pipeline.",
                "response": {}
            }
        },
        "/pipelines/query": {
            "post": {
                "operationId": "Query_query",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageT"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines/query"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/QueryString"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline_executions = pipeline.pipeline_executions.list()\n\n# \n# List project pipeline executions.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :return: Paged entity\n# :rtype: dtlpy.entities.paged_entities.PagedEntities\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/templates/": {
            "post": {
                "operationId": "PipelineTemplates_create",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines/templates"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostPipeline"
                },
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/templates/query": {
            "post": {
                "operationId": "PipelineTemplates_query",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITemplateQuery"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines/templates"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "projectId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TemplateQuery"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/{compositionsId}/install": {
            "post": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.pipelines.install(pipeline='pipeline_entity')\n\n# \n# Install (start) a pipeline.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :param dtlpy.entities.pipeline.PipelineResumeOption resume_option: optional - resume pipeline method (what to do with existing cycles)\n# :return: Composition object\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/pipelines/{compositionsId}/uninstall": {
            "post": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.pipelines.pause(pipeline='pipeline_entity')\n\n# \n# Pause a pipeline.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :param bool keep_triggers_active: Do we want the triggers to stay active and collect events\n# :return: Composition object\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/pipelines/{id}/statistics": {
            "get": {
                "operationId": "Pipeline_getStatistics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPipelineStatistics"
                                }
                            }
                        }
                    }
                },
                "description": "Get pipeline counters.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline_stats = project.pipelines.stats(pipeline='pipeline_entity')\n\n# \n# Get pipeline counters.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity - optional\n# :param str pipeline_id: pipeline_id -  optional\n# :param str pipeline_name: pipeline_name -  optional\n# :return: PipelineStats\n# :rtype: dtlpy.entities.pipeline.PipelineStats\n# \n# "
                    }
                ],
                "summary": "Get pipeline counters.",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}": {
            "get": {
                "operationId": "Pipeline_get",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Get pipeline by id.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline = project.pipelines.get(pipeline_id='pipeline_id')\n\n# \n# Get Pipeline object to use in your code.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# You must provide at least ONE of the following params: pipeline_name, pipeline_id.\n# \n# :param str pipeline_id: pipeline id\n# :param str pipeline_name: pipeline name\n# :param fetch: optional - fetch entity from platform, default taken from cookie\n# :return: Pipeline object\n# :rtype: dtlpy.entities.pipeline.Pipeline\n# \n# "
                    }
                ],
                "summary": "Get pipeline by id.",
                "response": {}
            },
            "patch": {
                "operationId": "Pipeline_update",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Update pipeline changes.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostPipeline"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline = project.pipelines.update(pipeline='pipeline_entity')\n\n# \n# Update pipeline changes to platform.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :return: Pipeline object\n# :rtype: dtlpy.entities.pipeline.Pipeline\n# \n# "
                    }
                ],
                "summary": "Update pipeline changes.",
                "response": {}
            },
            "delete": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = project.pipelines.delete(pipeline_id='pipeline_id')\n# \n# Delete Pipeline object.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :param str pipeline_id: pipeline id\n# :param str pipeline_name: pipeline name\n# :return: True if success\n# :rtype: bool\n# \n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/execute": {
            "post": {
                "operationId": "Pipeline_execute",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "enum": [
                                        "APIPipelineState",
                                        "APICommand"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Execute a pipeline and return the pipeline execution as an object - or command in case batch is defined on the body.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExecuteOptions"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ncommand = pipeline.pipeline_executions.create_batch(\nexecution_inputs=dl.FunctionIO(type=dl.PackageInputType.STRING, value='test', name='string'),\nfilters=dl.Filters(field='dir', values='/test'))\n\n# \n# Execute a pipeline and return the execute.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param pipeline_id: pipeline id\n# :param filters: Filters entity for a filtering before execute\n# :param execution_inputs: list of the dl.FunctionIO or dict of pipeline input - example {'item': 'item_id'}\n# :param bool wait: wait until create task finish\n# :return: entities.PipelineExecution object\n# :rtype: dtlpy.entities.pipeline_execution.PipelineExecution\n# \n# "
                    }
                ],
                "summary": "Execute a pipeline and return the pipeline execution as an object - or command in case batch is defined on the body.",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/executions": {
            "get": {
                "operationId": "PipelineExecution_executions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIPipelineState"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/install": {
            "post": {
                "operationId": "Pipeline_install",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "resumeOption": {
                                        "enum": [
                                            "terminateExistingCycles",
                                            "resumeExistingCycles"
                                        ],
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/nodes/{nodeId}": {
            "get": {
                "operationId": "Pipeline_getNode",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDescriptor"
                                }
                            }
                        }
                    }
                },
                "description": "get one of pipeline nodes by pipeline id and node id.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "nodeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "get one of pipeline nodes by pipeline id and node id.",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/purge": {
            "post": {
                "operationId": "Pipeline_purge",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Boolean"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/reset": {
            "post": {
                "operationId": "Pipeline_reset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Reset pipeline counters.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = project.pipelines.reset(pipeline='pipeline_entity')\n\n# \n# Reset pipeline counters.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity - optional\n# :param str pipeline_id: pipeline_id -  optional\n# :param str pipeline_name: pipeline_name -  optional\n# :param bool stop_if_running: If the pipeline is installed it will stop the pipeline and reset the counters.\n# :return: bool\n# \n# "
                    }
                ],
                "summary": "Reset pipeline counters.",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/settings": {
            "patch": {
                "operationId": "Pipeline_updateSettings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IPipelineSettings"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline = project.pipelines.update_settings(pipeline='pipeline_entity', settings=dl.PipelineSettings(keep_triggers_active=True))\n\n# \n# Update pipeline settings.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :param dtlpy.entities.pipeline.PipelineSettings settings: settings entity\n# :return: Pipeline object\n# :rtype: dtlpy.entities.pipeline.Pipeline\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/terminate": {
            "delete": {
                "operationId": "Pipeline_terminate",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Delete the pipeline, should terminate the composition.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete the pipeline, should terminate the composition.",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/uninstall": {
            "post": {
                "operationId": "Pipeline_uninstall",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "boolean"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/{pipelineId}/variables": {
            "patch": {
                "operationId": "Pipeline_updateVariables",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/APIVariable"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/{pipeline_id}/executions/{executionId}": {
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline_executions = pipeline.pipeline_executions.get(pipeline_id='pipeline_id')\n\n# \n# Get Pipeline Execution object\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param str pipeline_execution_id: pipeline execution id\n# :param str pipeline_id: pipeline id\n# :return: PipelineExecution object\n# :rtype: dtlpy.entities.pipeline_execution.PipelineExecution\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/pipelines/{piplineId}/logs": {
            "post": {
                "operationId": "PipelineLogs_logs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PipelineExecutionLogs"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "piplineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "logsOptions": {
                                        "$ref": "#/components/schemas/LogQuery"
                                    },
                                    "query": {
                                        "$ref": "#/components/schemas/QueryString"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "summary": "",
                "response": {}
            }
        },
        "/pipelines/{projectId}/compositionStatus": {
            "get": {
                "operationId": "Pipeline_list",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves pipelines.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "filter: accepts any string",
                        "in": "query",
                        "name": "filter",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "sort: accepts any string",
                        "in": "query",
                        "name": "sort",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "page: accepts any number",
                        "in": "query",
                        "name": "page",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "pageSize: accepts any number",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "summary": "Retrieves pipelines.\n\nSupply query parameters to filter the list.",
                "response": {}
            }
        },
        "/piper-misc/naming/packages/{name}": {
            "get": {
                "operationId": "Misc_validatePackageName",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "PiperMisc"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/piper-misc/naming/services/{name}": {
            "get": {
                "operationId": "Misc_validateServiceName",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "PiperMisc"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/piper-misc/naming/triggers/{name}": {
            "get": {
                "operationId": "Misc_validateTriggerName",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "PiperMisc"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/plans": {
            "get": {
                "operationId": "List All Plans",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Plan"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": [],
                "response": {}
            }
        },
        "/plans/store/metrics": {
            "get": {
                "operationId": "List All Plan Metrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIBillableResource"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": [],
                "response": {}
            }
        },
        "/plans/store/metrics/query": {
            "post": {
                "operationId": "Query Billing Metrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIBillableResource"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "keys": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "keys"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/plans/{id}": {
            "get": {
                "operationId": "Get Plan",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Plan"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/plans/{id}/subscriptions": {
            "post": {
                "operationId": "Create Subscription",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APISubscription"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "account": "subscriptionDLAccount",
                                            "autoRenewal": true,
                                            "period": "annual",
                                            "scope": {
                                                "type": "org",
                                                "entityId": "orgId"
                                            },
                                            "driverId": "paymentDriverId",
                                            "methodId": "paymentMethodId",
                                            "startDate": "2022-05-01T00:00:00.000Z"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Creates a new subscription.\n\nSupply the required subscription input.\n\nRequired fields are: account, autoRenewal, subscription period and scope",
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubscriptionInput"
                            }
                        }
                    }
                },
                "summary": "Creates a new subscription.\n\nSupply the required subscription input.\n\nRequired fields are: account, autoRenewal, subscription period and scope",
                "response": {}
            }
        },
        "/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "List user's active org projects",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectDetails"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nprojects = dl.projects.list()\n\n# \n# Get the user's project list\n# \n# **Prerequisites**: You must be a **superuser** to list all users' projects.\n# \n# :return: List of Project objects\n# \n# "
                    }
                ],
                "response": {}
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Creates a new project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Project name"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDetails"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject = dl.projects.create(project_name='project_name')\n\n# \n# Create a new project.\n# \n# **Prerequisites**: Any user can create a project.\n# \n# :param str project_name: The Name of the project\n# :param bool checkout: set the project as a default project object (cookies)\n# :return: Project object\n# :rtype: dtlpy.entities.project.Project\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/projects/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Returns details of a specific project",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDetails"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject = dl.projects.get(project_id='project_id')\n\n# \n# Get a Project object.\n# \n# **Prerequisites**: You must be in the role of an *owner* to get a project object.\n# \n# You must check out to a project or provide at least one of the following params: project_id, project_name\n# \n# :param str project_name: optional - search by name\n# :param str project_id: optional - search by id\n# :param bool checkout: set the project as a default project object (cookies)\n# :param bool fetch: optional - fetch entity from platform (True), default taken from cookie\n# :param bool log_error: optional - show the logs errors\n# :return: Project object\n# :rtype: dtlpy.entities.project.Project\n# \n# "
                    }
                ],
                "response": {}
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = dl.projects.delete(project_id='project_id', sure=True, really=True)\n\n# \n# Delete a project forever!\n# \n# **Prerequisites**: You must be in the role of an *owner* to delete a project.\n# \n# :param str project_name: optional - search by name\n# :param str project_id: optional - search by id\n# :param bool sure: Are you sure you want to delete?\n# :param bool really: Really really sure?\n# :return: True if success, error if not\n# :rtype: bool\n# \n# "
                    }
                ],
                "response": {}
            },
            "patch": {
                "tags": [
                    "Projects"
                ],
                "summary": "Change project name",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "New name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject = dl.projects.delete(project='project_entity')\n\n# \n# Update a project information (e.g., name, member roles, etc.).\n# \n# **Prerequisites**: You must be in the role of an *owner* to add a member to a project.\n# \n# :param dtlpy.entities.project.Project project: project object\n# :param bool system_metadata: optional - True, if you want to change metadata system\n# :return: Project object\n# :rtype: dtlpy.entities.project.Project\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "/projects/{id}/members": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Lists all project contributors",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Contributor"
                                    }
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/projects/{project_id}/accounts": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Add an account to a project",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "Account id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "response": {}
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Remove an account from a project",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Allowed for superuser only",
                        "content": {}
                    }
                },
                "response": {}
            },
            "patch": {
                "tags": [
                    "Projects"
                ],
                "summary": "Replace an account for a project",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "Account id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Allowed for superuser only",
                        "content": {}
                    }
                },
                "response": {}
            }
        },
        "/projects/{project_id}/members/{user_id}": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Add a user to a project",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Role",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "annotator",
                                "engineer",
                                "owner"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "response": {}
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Remove a member from a project",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "response": {}
            },
            "patch": {
                "tags": [
                    "Projects"
                ],
                "summary": "Change user role",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "role",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "annotator",
                                "engineer",
                                "owner"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "response": {}
            }
        },
        "/projects/{project_id}/org": {
            "patch": {
                "tags": [
                    "Projects"
                ],
                "summary": "Change project org",
                "parameters": [
                    {
                        "name": "project_id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org_id",
                        "in": "query",
                        "description": "Org id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    }
                },
                "response": {}
            }
        },
        "/projects/{project_name}/name'": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "List of user projects by name",
                "parameters": [
                    {
                        "name": "project_name",
                        "in": "path",
                        "description": "Project name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProjectDetails"
                                    }
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/query/faas": {
            "post": {
                "operationId": "FaasQueryQueryEntities",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Query"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "resource": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "filter": {
                                        "type": "object",
                                        "description": ""
                                    },
                                    "sort": {
                                        "type": "object",
                                        "description": ""
                                    },
                                    "page": {
                                        "type": "number",
                                        "format": "double",
                                        "description": ""
                                    },
                                    "pageSize": {
                                        "type": "number",
                                        "format": "double",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.list()\n\n# \n# List service executions\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.filters.Filters filters: dl.Filters entity to filters items\n# :return: Paged entity\n# :rtype: dtlpy.entities.paged_entities.PagedEntities\n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/recipes": {
            "post": {
                "operationId": "RecipesCreateRecipe",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIRecipe"
                        }
                    }
                },
                "description": "Create a new Recipe",
                "tags": [
                    "Recipes"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": Recipe creation payload",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RecipePayload"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.create(recipe_name='My Recipe', labels=labels))\n\n# \n# Create a new Recipe.\n# Note: If the param ontology_ids is None, an ontology will be created first.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str project_ids: project ids\n# :param str or list ontology_ids: ontology ids\n# :param labels: labels\n# :param str recipe_name: recipe name\n# :param attributes: attributes\n# :param str annotation_instruction_file: file path or url of the recipe instruction\n# :return: Recipe entity\n# :rtype: dtlpy.entities.recipe.Recipe\n# \n# "
                    }
                ],
                "summary": "Create a new Recipe",
                "response": {}
            },
            "get": {
                "operationId": "RecipesFindRecipes",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIRecipeCursor"
                        }
                    }
                },
                "description": "Find recipes by query",
                "tags": [
                    "Recipes"
                ],
                "parameters": [
                    {
                        "description": "- An array of project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by creator",
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- Find by title",
                        "in": "query",
                        "name": "title",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "- An array of ontology IDs",
                        "in": "query",
                        "name": "ontologies",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "description": "- How many recipes in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "type": "number",
                        "format": "double"
                    }
                ],
                "summary": "Find recipes by query",
                "response": {}
            }
        },
        "/recipes/{id}": {
            "patch": {
                "operationId": "RecipesPatchRecipe",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIRecipe"
                        }
                    }
                },
                "description": "Update an existing recipe",
                "tags": [
                    "Recipes"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": ": The fields to update",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartialRecipePayload"
                        }
                    },
                    {
                        "description": ": Recipe ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.update(recipe='recipe_entity')\n\n# \n# Update recipe.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.recipe.Recipe recipe: Recipe object\n# :param bool system_metadata: True, if you want to change metadata system\n# :return: Recipe object\n# :rtype: dtlpy.entities.recipe.Recipe\n# \n# "
                    }
                ],
                "summary": "Update an existing recipe",
                "response": {}
            },
            "get": {
                "operationId": "RecipesGetRecipe",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIRecipe"
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id",
                        "schema": {
                            "$ref": "#/definitions/Errors.BadRequestError"
                        }
                    },
                    "404": {
                        "description": "Recipe not found",
                        "schema": {
                            "$ref": "#/definitions/Errors.NotFoundError"
                        }
                    }
                },
                "description": "Get a specific recipe",
                "tags": [
                    "Recipes"
                ],
                "parameters": [
                    {
                        "description": ": Recipe ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.get(recipe_id='recipe_id')\n\n# \n# Get a Recipe object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str recipe_id: recipe id\n# :return: Recipe object\n# :rtype: dtlpy.entities.recipe.Recipe\n# \n# "
                    }
                ],
                "summary": "Get a specific recipe",
                "response": {}
            },
            "delete": {
                "operationId": "RecipesDeleteRecipe",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a recipe",
                "tags": [
                    "Recipes"
                ],
                "parameters": [
                    {
                        "description": ": Recipe ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.delete(recipe_id='recipe_id')\n\n# \n# Delete recipe from platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str recipe_id: recipe id\n# :param bool force: force delete recipe\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Delete a recipe",
                "response": {}
            }
        },
        "/recipes/{id}/clone": {
            "post": {
                "operationId": "RecipesCloneRecipe",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/APIRecipe"
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Recipes"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "body",
                        "name": "payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CloneRecipePayload"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.clone(recipe_id='recipe_id')\n# \n# Clone recipe.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.recipe.Recipe recipe: Recipe object\n# :param str recipe_id: Recipe id\n# :param bool shallow: If True, link to existing ontology, clones all ontologies that are linked to the recipe as well\n# :return: Cloned ontology object\n# :rtype: dtlpy.entities.recipe.Recipe\n# \n# \n# "
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/register": {
            "post": {
                "tags": [
                    "Register"
                ],
                "summary": "Registers a user",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/services": {
            "get": {
                "operationId": "Services_listServices",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServicesPage"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves services.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "projects: array of project id",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "name: service name",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "packageId: the package that service related to",
                        "in": "query",
                        "name": "packageId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "pageOffset: accepts any number",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "pageSize: accepts any number",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "summary": "Retrieves services.\n\nSupply query parameters to filter the list.",
                "response": {}
            },
            "post": {
                "operationId": "Services_createService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIService"
                                }
                            }
                        }
                    }
                },
                "description": "Create new package.",
                "tags": [
                    "Services"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIService"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice = package.services.deploy(service_name=package_name,\nexecution_timeout=3 * 60 * 60,\nmodule_name=module.name,\nruntime=dl.KubernetesRuntime(\nconcurrency=10,\npod_type=dl.InstanceCatalog.REGULAR_S,\nautoscaler=dl.KubernetesRabbitmqAutoscaler(\nmin_replicas=1,\nmax_replicas=20,\nqueue_length=20\n)\n)\n)\n\n# \n# Deploy service.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# :param str service_name: name\n# :param dtlpy.entities.package.Package package: package entity\n# :param str bot: bot email\n# :param str revision: package revision of version\n# :param init_input: config to run at startup\n# :param dict runtime: runtime resources\n# :param str pod_type: pod type dl.InstanceCatalog\n# :param str sdk_version:  - optional - string - sdk version\n# :param str agent_versions: - dictionary - - optional -versions of sdk\n# :param bool verify: if true, verify the inputs\n# :param bool checkout: if true, checkout (switch) to service\n# :param str module_name: module name\n# :param str project_id: project id\n# :param str driver_id: driver id\n# :param Callable func: function to deploy\n# :param bool run_execution_as_process: if true, run execution as process\n# :param int execution_timeout: execution timeout in seconds\n# :param int drain_time: drain time in seconds\n# :param int max_attempts: maximum execution retries in-case of a service reset\n# :param str on_reset: what happens on reset\n# :param bool force: optional - if true, terminate old replicas immediately\n# :param list secrets: list of the integrations ids\n# :param kwargs: list of additional arguments\n# :return: Service object\n# :rtype: dtlpy.entities.service.Service\n# \n# "
                    }
                ],
                "summary": "Create new package.",
                "response": {}
            }
        },
        "/services/cache": {
            "post": {
                "operationId": "Services_cache",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Add or remove Cache for the org.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Cache request mode",
                        "in": "query",
                        "name": "mode",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "apply",
                                "destroy",
                                "get",
                                "apply-filestore"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ICacheOptions"
                },
                "summary": "Add or remove Cache for the org.",
                "response": {}
            }
        },
        "/services/fs-cache": {
            "post": {
                "operationId": "Services_fsCache",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "mode",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "apply",
                                "destroy",
                                "get",
                                "apply-filestore"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ICacheOptions"
                },
                "summary": "",
                "response": {}
            }
        },
        "/services/global": {
            "post": {
                "operationId": "Services_getGlobalServices",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Get all global services\nby using list of projectId and service name\n\nExample: [{ projectId: 'my-project-id', name: 'my-service-name' },\n          { projectId: 'my-project-id2', name: 'my-service-name2' }, ... ]\n\n the server will search in the db for the service with the name my-service-name belonging to the project 'my-project-id\n also the service with the name my-service-name2 belonging to the project 'my-project-id2\n and so on...",
                "tags": [
                    "Services"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "projectId": {
                                            "type": "string",
                                            "description": ""
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "summary": "Get all global services\nby using list of projectId and service name\n\nExample: [{ projectId: 'my-project-id', name: 'my-service-name' },\n          { projectId: 'my-project-id2', name: 'my-service-name2' }, ... ]\n\n the server will search in the db for the service with the name my-service-name belonging to the project 'my-project-id\n also the service with the name my-service-name2 belonging to the project 'my-project-id2\n and so on...",
                "response": {}
            }
        },
        "/services/logs": {
            "post": {
                "operationId": "Services_getLogs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceLogsPage"
                                }
                            }
                        }
                    }
                },
                "description": "Get logs for pipelines.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "verbose",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/LogQuery"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice_logs = package.services.log(service='service_entity')\n\n# \n# Get service logs.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# :param dtlpy.entities.service.Service service: service object\n# :param int size: size\n# :param dict checkpoint: the information from the lst point checked in the service\n# :param str start: iso format time\n# :param str end: iso format time\n# :param bool follow: if true, keep stream future logs\n# :param str text: text\n# :param str execution_id: execution id\n# :param str function_name: function name\n# :param str replica_id: replica id\n# :param bool system: system\n# :param bool view: if true, print out all the logs\n# :param bool until_completed: wait until completed\n# :param str log_level: the log level to display dl.LoggingLevel\n# :return: ServiceLog entity\n# :rtype: ServiceLog\n# \n# "
                    }
                ],
                "summary": "Get logs for pipelines.",
                "response": {}
            }
        },
        "/services/status": {
            "get": {
                "operationId": "Services_getServicesStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {}
                                }
                            }
                        }
                    }
                },
                "description": "Get Services Status.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "ids",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get Services Status.",
                "response": {}
            }
        },
        "/services/{id}": {
            "get": {
                "operationId": "Services_getService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIService"
                                }
                            }
                        }
                    }
                },
                "description": "Get service by id and version.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The service version",
                        "in": "query",
                        "name": "version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice = package.services.get(service_id='service_id')\n\n# \n# Get service to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# :param str service_name: optional - search by name\n# :param str service_id: optional - search by id\n# :param bool checkout: if true, checkout (switch) to service\n# :param fetch: optional - fetch entity from platform, default taken from cookie\n# :return: Service object\n# :rtype: dtlpy.entities.service.Service\n# \n# "
                    }
                ],
                "summary": "Get service by id and version.",
                "response": {}
            },
            "patch": {
                "operationId": "Services_updateService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Update service changes.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "optional - force updated old replicas immediately\nif the value has set is true, it will go to services driver(kubernetes...) and restarting all the replicas without waiting",
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIServicePatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice = package.services.update(service='service_entity')\n\n# \n# Update service changes to platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# :param dtlpy.entities.service.Service service: Service entity\n# :param bool force: optional - terminate old replicas immediately\n# :return: Service entity\n# :rtype: dtlpy.entities.service.Service\n# \n# "
                    }
                ],
                "summary": "Update service changes.",
                "response": {}
            },
            "delete": {
                "operationId": "Services_deleteService",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete Service.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = package.services.delete(service_id='service_id')\n\n# \n# Delete Service object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at least ONE of the following params: service_id, service_name.\n# \n# :param str service_name: by name\n# :param str service_id: by id\n# :return: True\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Delete Service.",
                "response": {}
            }
        },
        "/services/{id}/debug": {
            "post": {
                "operationId": "Services_serviceDebug",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Service debug stream",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "force",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DebugSession"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Service debug stream",
                "response": {}
            }
        },
        "/services/{id}/debug(*)?": {
            "get": {
                "operationId": "Services_serviceStream",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "url": {
                                            "type": "string",
                                            "description": ""
                                        },
                                        "token": {
                                            "type": "string",
                                            "description": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Service debug stream",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "getToken",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "Service debug stream",
                "response": {}
            }
        },
        "/services/{id}/logs": {
            "post": {
                "operationId": "Services_getServiceLogs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceLogsPage"
                                }
                            }
                        }
                    }
                },
                "description": "Get service logs.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "verbose",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/LogQuery"
                },
                "summary": "Get service logs.",
                "response": {}
            }
        },
        "/services/{id}/notify": {
            "post": {
                "operationId": "Services_notify",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentNotificationPayload"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "",
                "response": {}
            }
        },
        "/services/{id}/resume": {
            "post": {
                "operationId": "Services_resumeService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Pause service.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice_json = package.services.resume(service_id='service_id')\n\n# \n# Resume service.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at least ONE of the following params: service_id, service_name.\n# \n# :param str service_name: service name\n# :param str service_id: service id\n# :param bool force: optional - terminate old replicas immediately\n# :return: json of the service\n# :rtype: dict\n# \n# "
                    }
                ],
                "summary": "Pause service.",
                "response": {}
            }
        },
        "/services/{id}/revisions": {
            "get": {
                "operationId": "Services_getServiceRevisions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/APIService"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Get service revisions by id.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice_revision = package.services.revisions(service_id='service_id')\n\n# \n# Get service revisions history.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at leats ONE of the following params: service, service_id\n# \n# :param dtlpy.entities.service.Service service: Service entity\n# :param str service_id: service id\n# \n# "
                    }
                ],
                "summary": "Get service revisions by id.",
                "response": {}
            }
        },
        "/services/{id}/rollout": {
            "post": {
                "operationId": "Services_rolloutService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIService"
                                }
                            }
                        }
                    }
                },
                "description": "Rolling out service.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "version": {
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Rolling out service.",
                "response": {}
            }
        },
        "/services/{id}/status": {
            "post": {
                "operationId": "Services_updateReplicaStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIReplicaStatusUpdate"
                                }
                            }
                        }
                    }
                },
                "description": "Update Replica Status.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIReplicaStatusUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nstatus_json = package.services.status(service_id='service_id')\n\n# \n# Get service status.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at least ONE of the following params: service_id, service_name\n# \n# :param str service_name: service name\n# :param str service_id: service id\n# :return: status json\n# :rtype: dict\n# \n# "
                    }
                ],
                "summary": "Update Replica Status.",
                "response": {}
            },
            "get": {
                "operationId": "Services_getServiceStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIServiceStatus"
                                }
                            }
                        }
                    }
                },
                "description": "Get service status.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get service status.",
                "response": {}
            }
        },
        "/services/{id}/stop": {
            "post": {
                "operationId": "Services_stopService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Pause service.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "optional - terminate old replicas immediately",
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = package.services.pause(service_id='service_id')\n\n# \n# Pause service.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at least ONE of the following params: service_id, service_name\n# \n# :param str service_name: service name\n# :param str service_id: service id\n# :param bool force: optional - terminate old replicas immediately\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Pause service.",
                "response": {}
            }
        },
        "/settings": {
            "post": {
                "operationId": "Create Setting",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIFeatureFlag"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIUserSetting"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Creates a new Setting.\n\nSupply the appropriate Create Request object for either Feature flag or User setting.",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The setting to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSettingRequest",
                                "description": "The setting to create"
                            }
                        }
                    }
                },
                "summary": "Creates a new Setting.\n\nSupply the appropriate Create Request object for either Feature flag or User setting.",
                "response": {}
            }
        },
        "/settings/query": {
            "post": {
                "operationId": "Query Settings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPISetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Query settings\n\nSupply the query requested to query settings",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                },
                "summary": "Query settings\n\nSupply the query requested to query settings",
                "response": {}
            }
        },
        "/settings/resolve": {
            "post": {
                "operationId": "Resolve Settings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/components/schemas/APIFeatureFlag"
                                            },
                                            {
                                                "$ref": "#/components/schemas/APIUserSetting"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Resolves the relevant settings for a specific Context.\n\nSupply the specific Context to resolve by",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The context to resolve by",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IUserContext",
                                "description": "The context to resolve by"
                            }
                        }
                    }
                },
                "summary": "Resolves the relevant settings for a specific Context.\n\nSupply the specific Context to resolve by",
                "response": {}
            }
        },
        "/settings/{id}": {
            "get": {
                "operationId": "Get Setting",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIFeatureFlag"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIUserSetting"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves the details of a setting.\n\nSupply the unique setting ID to fetch it's details.",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Setting to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Retrieves the details of a setting.\n\nSupply the unique setting ID to fetch it's details.",
                "response": {}
            },
            "patch": {
                "operationId": "Update Setting",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIFeatureFlag"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIUserSetting"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Update a setting\n\nSupply the unique id of the setting to update and an object describing which fields update",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Setting to update",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values to update with",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/PatchFeatureFlagRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/PatchUserSettingRequest"
                                    }
                                ],
                                "description": "The values to update with"
                            }
                        }
                    }
                },
                "summary": "Update a setting\n\nSupply the unique id of the setting to update and an object describing which fields update",
                "response": {}
            },
            "delete": {
                "operationId": "Delete Setting",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Delete a setting\n\nSupply the unique id of the setting to delete",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Setting to delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a setting\n\nSupply the unique id of the setting to delete",
                "response": {}
            }
        },
        "/subscriptions": {
            "get": {
                "operationId": "List Subscriptions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APISubscription_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/subscriptions/orgs/{orgid}/free": {
            "get": {
                "operationId": "Get Org Free Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APISubscription"
                                        },
                                        {}
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/subscriptions/orgs/{orgid}/plg": {
            "get": {
                "operationId": "Get Org PLG Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APISubscription"
                                        },
                                        {}
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/subscriptions/projects/{projectId}/free": {
            "get": {
                "operationId": "Get Project Free Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APISubscription"
                                        },
                                        {}
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/subscriptions/projects/{projectId}/plg": {
            "get": {
                "operationId": "Get Project PLG Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APISubscription"
                                        },
                                        {}
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "operationId": "Get Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APISubscription"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            },
            "patch": {
                "operationId": "Edit Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APISubscription"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditSubscriptionInput"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/subscriptions/{id}/addon": {
            "post": {
                "operationId": "Create Addon Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APISubscription"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubscriptionExtensionInput"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/subscriptions/{id}/upgrade": {
            "post": {
                "operationId": "Upgrade Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APISubscription"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubscriptionUpgradeInput"
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/trigger-resource-information": {
            "post": {
                "operationId": "TriggerResourceInformation_queryTriggerResourceInformation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TriggerResourceInformationPage"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "TriggerResourceInformation"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TriggerResourceInformationQuery"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "",
                "response": {}
            }
        },
        "/triggers": {
            "get": {
                "operationId": "Triggers_listTriggers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TriggersPage"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves services.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "Triggers"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Event",
                                "Cron"
                            ]
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "resource",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "active",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "executionMode",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "serviceId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "webhookId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "operationType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "entity",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "action",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "summary": "Retrieves services.\n\nSupply query parameters to filter the list.",
                "response": {}
            },
            "post": {
                "operationId": "Triggers_createTrigger",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITrigger"
                                }
                            }
                        }
                    }
                },
                "description": "Create a Trigger. Can create two types: a cron trigger or an event trigger.\nInputs are different for each type",
                "tags": [
                    "Triggers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTriggerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.triggers.create(name='triggername',\nexecution_mode=dl.TriggerExecutionMode.ONCE,\nresource='Item',\nactions='Created',\nfunction_name='run',\nfilters={'$and': [{'hidden': False},\n{'type': 'file'}]}\n)\n\n# \n# Create a Trigger. Can create two types: a cron trigger or an event trigger.\n# Inputs are different for each type\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# Inputs for all types:\n# \n# :param str service_id: Id of services to be triggered\n# :param str trigger_type: can be cron or event. use enum dl.TriggerType for the full list\n# :param str name: name of the trigger\n# :param str webhook_id: id for webhook to be called\n# :param str  function_name: the function name to be called when triggered (must be defined in the package)\n# :param str  project_id: project id where trigger will work\n# :param bool active: optional - True/False, default = True, if true trigger is active\n# \n# Inputs for event trigger:\n# :param dtlpy.entities.filters.Filters filters: optional - Item/Annotation metadata filters, default = none\n# :param str resource: optional - Dataset/Item/Annotation/ItemStatus, default = Item\n# :param str actions: optional - Created/Updated/Deleted, default = create\n# :param str execution_mode: how many times trigger should be activated; default is \"Once\". enum dl.TriggerExecutionMode\n# \n# Inputs for cron trigger:\n# :param start_at: iso format date string to start activating the cron trigger\n# :param end_at: iso format date string to end the cron activation\n# :param inputs: dictionary \"name\":\"val\" of inputs to the function\n# :param str cron: cron spec specifying when it should run. more information: https://en.wikipedia.org/wiki/Cron\n# :param str pipeline_id: Id of pipeline to be triggered\n# :param pipeline: pipeline entity to be triggered\n# :param str pipeline_node_id: Id of pipeline root node to be triggered\n# :param root_node_namespace: namespace of pipeline root node to be triggered\n# \n# :return: Trigger entity\n# :rtype: dtlpy.entities.trigger.Trigger\n# \n# "
                    }
                ],
                "summary": "Create a Trigger. Can create two types: a cron trigger or an event trigger.\nInputs are different for each type",
                "response": {}
            }
        },
        "/triggers/{id}": {
            "get": {
                "operationId": "Triggers_getTrigger",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITrigger"
                                }
                            }
                        }
                    }
                },
                "description": "Get trigger by id.\nSupply query parameters to filter the list.",
                "tags": [
                    "Triggers"
                ],
                "parameters": [
                    {
                        "description": "Trigger id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.triggers.get(trigger_id='trigger_id')\n\n# \n# Get Trigger object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param str trigger_id: trigger id\n# :param str  trigger_name: trigger name\n# :return: Trigger entity\n# :rtype: dtlpy.entities.trigger.Trigger\n# \n# "
                    }
                ],
                "summary": "Get trigger by id.\nSupply query parameters to filter the list.",
                "response": {}
            },
            "patch": {
                "operationId": "Triggers_updateTrigger",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITrigger"
                                }
                            }
                        }
                    }
                },
                "description": "Update trigger.",
                "tags": [
                    "Triggers"
                ],
                "parameters": [
                    {
                        "description": "Trigger Id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APITrigger"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.triggers.update(trigger='trigger_entity')\n\n# \n# Update trigger\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.trigger.Trigger trigger: Trigger entity\n# :return: Trigger entity\n# :rtype: dtlpy.entities.trigger.Trigger\n# \n# "
                    }
                ],
                "summary": "Update trigger.",
                "response": {}
            },
            "delete": {
                "operationId": "Triggers_deleteTriggers",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete Trigger.",
                "tags": [
                    "Triggers"
                ],
                "parameters": [
                    {
                        "description": "Trigger Id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.triggers.delete(trigger_id='trigger_id')\n\n# \n# Delete Trigger object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param str trigger_id: trigger id\n# :param str trigger_name: trigger name\n# :return: True is successful error if not\n# :rtype: bool\n# \n# "
                    }
                ],
                "summary": "Delete Trigger.",
                "response": {}
            }
        },
        "/ui-status": {
            "get": {
                "operationId": "Get OA Version",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IVersion"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves the latest OA versions.",
                "tags": [
                    "Version"
                ],
                "security": [],
                "parameters": [],
                "summary": "Retrieves the latest OA versions.",
                "response": {}
            }
        },
        "/usage/accounts/{id}": {
            "get": {
                "operationId": "Get Account Usage Report",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UsageReport"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Usage"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/usage/orgs/{id}": {
            "get": {
                "operationId": "Get Org Usage CSV",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Usage"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "response": {}
            }
        },
        "/users/projects/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns a list of all projects the logged in user is a member of which",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectDetails"
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns details of the logged in user",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/users/{user_id}/org": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Change or add org to user",
                "description": "Adding or updating org to existing user",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "org_id",
                        "in": "query",
                        "description": "Org id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        }
                    }
                },
                "response": {}
            }
        },
        "/webhooks": {
            "get": {
                "operationId": "WebHooks_listWebHooks",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebHooksPage"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            },
            "post": {
                "operationId": "WebHooks_createWebHook",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIWebHook"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/APIWebHook"
                },
                "summary": "",
                "response": {}
            }
        },
        "/webhooks/{ids}": {
            "delete": {
                "operationId": "WebHooks_deleteWebHooks",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "ids",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            }
        },
        "/webhooks/{id}": {
            "get": {
                "operationId": "WebHooks_getWebHook",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIWebHook"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "",
                "response": {}
            },
            "patch": {
                "operationId": "WebHooks_updateWebHook",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIWebHook"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/APIWebHook"
                },
                "summary": "",
                "response": {}
            }
        },
        "annotationtasks/{id}/addToTask": {
            "post": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.add_items(task= 'task_entity',\nitems = [items])\n\n# \n# Add items to a Task.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned to be *owner* of the annotation task.\n# \n# :param dtlpy.entities.task.Task task: task object\n# :param str task_id: the Id of the task\n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :param list items: list of items (item Ids or objects) to add to the task\n# :param list assignee_ids: list to assignee who works in the task\n# :param dict query: query to filter the items for the task\n# :param list workload: list of WorkloadUnit objects. Customize distribution (percentage) between the task assignees. For example: [dl.WorkloadUnit(annotator@hi.com, 80), dl.WorkloadUnit(annotator2@hi.com, 20)]\n# :param int limit: the limit items that task can include\n# :param bool wait: wait until add items will to finish\n# :return: task entity\n# :rtype: dtlpy.entities.task.Task\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "annotationtasks/{id}/removeFromTask": {
            "post": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.remove_items(task= 'task_entity',\nitems = [items])\n\n\n# \n# remove items from Task.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned to be *owner* of the annotation task.\n# \n# :param dtlpy.entities.task.Task task: task object\n# :param str task_id: the Id of the task\n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :param dict query: query to filter the items use it\n# :param list items: list of items to add to the task\n# :param bool wait: wait until remove items finish\n# :return: True if success and an error if failed\n# :rtype: bool\n# \n# **Examples**:\n# "
                    }
                ],
                "response": {}
            }
        },
        "projects /{id}/members": {
            "get": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nusers_jsons_list = dl.projects.list_members(project_id='project_id', role=dl.MemberRole.DEVELOPER)\n\n# \n# Get a list of the project members.\n# \n# **Prerequisites**: You must be in the role of an *owner* to list project members.\n# \n# :param dtlpy.entities.project.Project project: Project object\n# :param role: The required role for the user. Use the enum dl.MemberRole\n# :return: list of the project members\n# :rtype: list\n# \n# "
                    }
                ],
                "response": {}
            }
        },
        "projects /{project_id}/members/{user_id}": {
            "post": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nuser_json = dl.projects.add_member(project_id='project_id', email='user@dataloop.ai', role=dl.MemberRole.DEVELOPER)\n\n# \n# Add a member to the project.\n# \n# **Prerequisites**: You must be in the role of an *owner* to add a member to a project.\n# \n# :param str email: member email\n# :param str project_id: The Id of the project\n# :param role: The required role for the user. Use the enum dl.MemberRole\n# :return: dict that represent the user\n# :rtype: dict\n# \n# "
                    }
                ],
                "response": {}
            },
            "patch": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nuser_json = = dl.projects.update_member(project_id='project_id', email='user@dataloop.ai', role=dl.MemberRole.DEVELOPER)\n\n# \n# Update member's information/details in the project.\n# \n# **Prerequisites**: You must be in the role of an *owner* to update a member.\n# \n# :param str email: member email\n# :param str project_id: The Id of the project\n# :param role: The required role for the user. Use the enum dl.MemberRole\n# :return: dict that represent the user\n# :rtype: dict\n# \n# "
                    }
                ],
                "response": {}
            },
            "delete": {
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nuser_json = dl.projects.remove_member(project_id='project_id', email='user@dataloop.ai')\n\n# \n# Remove a member from the project.\n# \n# **Prerequisites**: You must be in the role of an *owner* to delete a member from a project.\n# \n# :param str email: member email\n# :param str project_id: The Id of the project\n# :return: dict that represents the user\n# :rtype: dict\n# \n# "
                    }
                ],
                "response": {}
            }
        }
    },
    "securityDefinitions": {},
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://rc-gate.dataloop.ai/api/v1",
            "description": "Main Dataloop Gateway"
        }
    ],
    "components": {
        "schemas": {
            "UserDetails": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstname": {
                        "type": "string"
                    },
                    "lastname": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    }
                }
            },
            "Org": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "logoUrl": {
                        "type": "string"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    }
                }
            },
            "Contributor": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstname": {
                        "type": "string"
                    },
                    "lastname": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "annotator",
                            "engineer",
                            "owner"
                        ]
                    }
                }
            },
            "ProjectDetails": {
                "type": "object",
                "properties": {
                    "contributors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Contributor"
                        }
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "org": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Org"
                        }
                    },
                    "role": {
                        "type": "string"
                    }
                }
            },
            "AccountDetails": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    }
                }
            },
            "Dictionary": {
                "properties": {},
                "additionalProperties": {},
                "type": "object",
                "description": ""
            },
            "Error": {
                "properties": {
                    "stack": {
                        "type": "string"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "LineData": {
                "properties": {
                    "y": {
                        "type": "number",
                        "format": "double"
                    },
                    "x": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "y",
                    "x"
                ],
                "type": "object"
            },
            "MatrixData": {
                "properties": {
                    "matrix": {
                        "items": {
                            "items": {
                                "type": "number",
                                "format": "double"
                            },
                            "type": "array"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "matrix"
                ],
                "type": "object"
            },
            "SummaryData": {
                "properties": {
                    "summary": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "required": [
                    "summary"
                ],
                "type": "object"
            },
            "MetricData": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/LineData"
                    },
                    {
                        "$ref": "#/components/schemas/MatrixData"
                    },
                    {
                        "$ref": "#/components/schemas/SummaryData"
                    }
                ]
            },
            "MetricRequest": {
                "properties": {
                    "modelId": {
                        "type": "string",
                        "description": "The model the metric was generated on"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The dataset the metric was generated on"
                    },
                    "figure": {
                        "type": "string",
                        "description": "The figure of the metric"
                    },
                    "legend": {
                        "type": "string",
                        "description": "The legend of the metric"
                    },
                    "data": {
                        "$ref": "#/components/schemas/MetricData",
                        "description": "The metric data"
                    }
                },
                "required": [
                    "modelId",
                    "figure",
                    "data"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "MetricDataTypes": {
                "enum": [
                    "line",
                    "matrix",
                    "summary"
                ],
                "type": "string"
            },
            "EntityContext": {
                "properties": {
                    "project": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIMetric": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modelId": {
                        "type": "string",
                        "description": "The model the metric was generated on"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The dataset the metric was generated on"
                    },
                    "figure": {
                        "type": "string",
                        "description": "The figure of the metric"
                    },
                    "legend": {
                        "type": "string",
                        "description": "The legend of the metric"
                    },
                    "data": {
                        "$ref": "#/components/schemas/MetricData",
                        "description": "The metric data"
                    },
                    "type": {
                        "$ref": "#/components/schemas/MetricDataTypes"
                    },
                    "context": {
                        "$ref": "#/components/schemas/EntityContext"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "modelId",
                    "datasetId",
                    "figure",
                    "data",
                    "type",
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPageAPISetting": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APIMetric",
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/APIFeatureFlag"
                                },
                                {
                                    "$ref": "#/components/schemas/APIUserSetting"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage",
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "QueryResource": {
                "enum": [
                    "models",
                    "metrics",
                    "executions",
                    "services",
                    "settings",
                    "setting"
                ],
                "type": "string"
            },
            "ModelOperationTypes": {
                "enum": [
                    "train",
                    "predict",
                    "evaluate",
                    "deploy"
                ],
                "type": "string"
            },
            "QueryModel": {
                "properties": {
                    "resource": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/QueryResource"
                            },
                            {
                                "$ref": "#/components/schemas/QueryResource"
                            }
                        ],
                        "nullable": true
                    },
                    "filter": {
                        "nullable": true
                    },
                    "sort": {
                        "nullable": true
                    },
                    "page": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelOperationTypes"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "filter",
                    "filter"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "EntityScopeLevel": {
                "enum": [
                    "private",
                    "project",
                    "org",
                    "public"
                ],
                "type": "string"
            },
            "ModelStatus": {
                "enum": [
                    "created",
                    "pending",
                    "training",
                    "trained",
                    "deployed",
                    "failed"
                ],
                "type": "string"
            },
            "APIModelConfiguration": {
                "properties": {
                    "label_to_id_map": {
                        "properties": {},
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "type": "number",
                                    "format": "double"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "type": "object"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "ModelInputType": {
                "enum": [
                    "image",
                    "video",
                    "text",
                    "audio"
                ],
                "type": "string"
            },
            "AnnotationType": {
                "enum": [
                    "class",
                    "point",
                    "line",
                    "box",
                    "cube",
                    "segment",
                    "ellipse",
                    "binary",
                    "note",
                    "polyline",
                    "comparison",
                    "recording",
                    "subtitle",
                    "item_description",
                    "text_mark",
                    "pose",
                    "cube_3d",
                    "semantic_3d",
                    "polyline_3d",
                    "pdf_text"
                ],
                "type": "string"
            },
            "ArtifactType": {
                "enum": [
                    "item",
                    "local",
                    "link"
                ],
                "type": "string"
            },
            "ItemArtifact": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ArtifactType"
                    },
                    "itemId": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "itemId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "LocalArtifact": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ArtifactType"
                    },
                    "localPath": {
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ModelOperationMetadata": {
                "properties": {
                    "services": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "executions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "APIModelMetadataSubsets": {
                "properties": {
                    "train": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "validation": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIModelMetadataSystem": {
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "ontologyId": {
                        "type": "string"
                    },
                    "train": {
                        "$ref": "#/components/schemas/ModelOperationMetadata"
                    },
                    "predict": {
                        "$ref": "#/components/schemas/ModelOperationMetadata"
                    },
                    "evaluate": {
                        "$ref": "#/components/schemas/ModelOperationMetadata"
                    },
                    "deploy": {
                        "$ref": "#/components/schemas/ModelOperationMetadata"
                    },
                    "subsets": {
                        "$ref": "#/components/schemas/APIModelMetadataSubsets"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIModelMetadata": {
                "properties": {
                    "system": {
                        "$ref": "#/components/schemas/APIModelMetadataSystem"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIModel": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "description": "The models name"
                    },
                    "packageId": {
                        "type": "string",
                        "description": "The model this model is derived from"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the model\ndefault 'My model'"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/EntityScopeLevel",
                        "description": "Field that shows the scope in which the model exists\ndefault 'private'"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ModelStatus",
                        "description": "the current models status\ndefault ModelStatus.CREATED"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "Tags related to the model\ndefault []"
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "Labels related to the model\ndefault []"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/APIModelConfiguration",
                        "description": "The configuration that the model was created with\ndefault {}"
                    },
                    "inputType": {
                        "$ref": "#/components/schemas/ModelInputType",
                        "description": "Model Input Type\ndefault ModelInputType.IMAGE"
                    },
                    "outputType": {
                        "$ref": "#/components/schemas/AnnotationType",
                        "description": "Model Output Type\ndefault AnnotationType.BOX"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ItemArtifact"
                                },
                                {
                                    "$ref": "#/components/schemas/LocalArtifact"
                                }
                            ]
                        },
                        "type": "array",
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "context": {
                        "$ref": "#/components/schemas/EntityContext",
                        "description": "The context which the model exists in"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIModelMetadata"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "name",
                    "packageId",
                    "description",
                    "scope",
                    "status",
                    "tags",
                    "labels",
                    "configuration",
                    "inputType",
                    "outputType",
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateModelRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The models name"
                    },
                    "packageId": {
                        "type": "string",
                        "description": "The model this model is derived from"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description of the model\ndefault 'My model'"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "the id of the project the model belongs to"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EntityScopeLevel"
                            }
                        ],
                        "nullable": true,
                        "description": "Field that shows the scope in which the model exists\ndefault 'project'"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelStatus"
                            }
                        ],
                        "nullable": true,
                        "description": "the current models status\ndefault ModelStatus.CREATED"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Tags related to the model\ndefault []"
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Labels related to the model"
                    },
                    "configuration": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelConfiguration"
                            }
                        ],
                        "nullable": true,
                        "description": "The configuration that the model was created with\ndefault {}"
                    },
                    "inputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelInputType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Input Type\ndefault ModelInputType.IMAGE"
                    },
                    "outputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AnnotationType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Output Type\ndefault AnnotationType.BOX"
                    },
                    "datasetId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ItemArtifact"
                                },
                                {
                                    "$ref": "#/components/schemas/LocalArtifact"
                                }
                            ]
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelMetadata"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "name",
                    "packageId",
                    "projectId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PatchModelRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true,
                        "description": "The models name"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description of the model"
                    },
                    "datasetId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ItemArtifact"
                                },
                                {
                                    "$ref": "#/components/schemas/LocalArtifact"
                                }
                            ]
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EntityScopeLevel"
                            }
                        ],
                        "nullable": true,
                        "description": "Field that shows the scope in which the model exists"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelStatus"
                            }
                        ],
                        "nullable": true,
                        "description": "the current models status"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Tags related to the model"
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Labels related to the model"
                    },
                    "configuration": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelConfiguration"
                            }
                        ],
                        "nullable": true,
                        "description": "The configuration that the model was created with"
                    },
                    "inputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelInputType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Input Type"
                    },
                    "outputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AnnotationType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Output Type"
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelMetadata"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "ExecutionStatus": {
                "type": "string",
                "enum": [
                    "created",
                    "in-progress",
                    "failed",
                    "success",
                    "canceled",
                    "rerun"
                ]
            },
            "ExecutionStatusReport": {
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "status": {
                        "$ref": "#/components/schemas/ExecutionStatus",
                        "enum": [
                            "created",
                            "in-progress",
                            "failed",
                            "success",
                            "canceled",
                            "rerun"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "percentComplete": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "error": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    }
                },
                "required": [
                    "timestamp",
                    "status",
                    "message",
                    "percentComplete",
                    "timestamp",
                    "status",
                    "message",
                    "percentComplete"
                ],
                "type": "object",
                "additionalProperties": true,
                "description": ""
            },
            "ExecutionPipelineStateReference": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "nodeId": {
                        "type": "string"
                    },
                    "executionId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "nodeId",
                    "executionId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Execution": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "attempts": {
                        "type": "number",
                        "format": "double"
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double"
                    },
                    "toTerminate": {
                        "type": "boolean"
                    },
                    "input": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "feedbackQueue": {
                        "properties": {
                            "routing": {
                                "type": "string"
                            },
                            "exchange": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "routing",
                            "exchange"
                        ],
                        "type": "object"
                    },
                    "status": {
                        "items": {
                            "$ref": "#/components/schemas/ExecutionStatusReport"
                        },
                        "type": "array"
                    },
                    "statusLog": {
                        "items": {
                            "$ref": "#/components/schemas/ExecutionStatusReport"
                        },
                        "type": "array"
                    },
                    "latestStatus": {
                        "$ref": "#/components/schemas/ExecutionStatusReport"
                    },
                    "duration": {
                        "type": "number",
                        "format": "double"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "functionName": {
                        "type": "string"
                    },
                    "serviceId": {
                        "type": "string"
                    },
                    "triggerId": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "packageId": {
                        "type": "string"
                    },
                    "packageName": {
                        "type": "string"
                    },
                    "packageRevision": {
                        "type": "number",
                        "format": "double"
                    },
                    "serviceVersion": {
                        "type": "number",
                        "format": "double"
                    },
                    "pipeline": {
                        "$ref": "#/components/schemas/ExecutionPipelineStateReference"
                    }
                },
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "attempts",
                    "maxAttempts",
                    "toTerminate",
                    "input",
                    "feedbackQueue",
                    "status",
                    "statusLog",
                    "latestStatus",
                    "duration",
                    "projectId",
                    "serviceId",
                    "packageId",
                    "packageName",
                    "packageRevision",
                    "serviceVersion"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APICommand": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "type": {
                        "type": "string",
                        "description": ""
                    },
                    "error": {
                        "type": "string",
                        "description": ""
                    },
                    "progress": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "spec": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "report": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec",
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec",
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec",
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec"
                ],
                "type": "object",
                "additionalProperties": true,
                "description": ""
            },
            "Partial_CreateModelRequest_": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The models name"
                    },
                    "packageId": {
                        "type": "string",
                        "description": "The model this model is derived from"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description of the model\ndefault 'My model'"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "the id of the project the model belongs to"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EntityScopeLevel"
                            }
                        ],
                        "nullable": true,
                        "description": "Field that shows the scope in which the model exists\ndefault 'project'"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelStatus"
                            }
                        ],
                        "nullable": true,
                        "description": "the current models status\ndefault ModelStatus.CREATED"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Tags related to the model\ndefault []"
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Labels related to the model"
                    },
                    "configuration": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelConfiguration"
                            }
                        ],
                        "nullable": true,
                        "description": "The configuration that the model was created with\ndefault {}"
                    },
                    "inputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelInputType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Input Type\ndefault ModelInputType.IMAGE"
                    },
                    "outputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AnnotationType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Output Type\ndefault AnnotationType.BOX"
                    },
                    "datasetId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ItemArtifact"
                                },
                                {
                                    "$ref": "#/components/schemas/LocalArtifact"
                                }
                            ]
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelMetadata"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "APICopyEnvironmentSpec": {
                "properties": {
                    "cloneModelRequest": {
                        "$ref": "#/components/schemas/Partial_CreateModelRequest_"
                    },
                    "fromDatasetId": {
                        "type": "string"
                    },
                    "fromProjectId": {
                        "type": "string"
                    },
                    "cloneDatasetName": {
                        "type": "string"
                    },
                    "fromDatasetFilter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "fromArtifactItemId": {
                        "type": "string",
                        "nullable": true
                    },
                    "clonedModelId": {
                        "type": "string",
                        "nullable": true
                    },
                    "clonedBucketItemId": {
                        "type": "string",
                        "nullable": true
                    },
                    "clonedDatasetId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "cloneModelRequest",
                    "fromDatasetId",
                    "fromProjectId",
                    "cloneDatasetName"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ModelJoinMap": {
                "properties": {},
                "type": "object",
                "additionalProperties": {
                    "properties": {
                        "items": {
                            "items": {},
                            "type": "array"
                        },
                        "ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelName": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "items",
                        "ids",
                        "modelName"
                    ],
                    "type": "object"
                }
            },
            "ServiceRuntime": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ServiceVersions": {
                "description": "",
                "properties": {
                    "dtlpy": {
                        "type": "string",
                        "description": ""
                    },
                    "runner": {
                        "type": "string",
                        "description": ""
                    },
                    "proxy": {
                        "type": "string",
                        "description": ""
                    },
                    "verify": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "Panel": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "role": {
                        "enum": [
                            "owner",
                            "annotator",
                            "engineer",
                            "annotationManager"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "role"
                ]
            },
            "IServiceAppConfig": {
                "description": "",
                "properties": {
                    "isCustomServer": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "Crashloop": {
                "description": "",
                "properties": {
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "action": {
                        "enum": [
                            "deactivate"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "reason": {
                        "enum": [
                            "depletion"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "time",
                    "action"
                ]
            },
            "ServiceMode": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "debug",
                            "regular"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "APIServiceCompositionElement": {
                "description": "",
                "properties": {
                    "state": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "enum": [
                                    "uninstalled",
                                    "installed",
                                    "attached",
                                    "failed",
                                    "pause",
                                    "resume"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "serviceId": {
                                "type": "string",
                                "description": ""
                            },
                            "errorMessage": {
                                "type": "string",
                                "description": ""
                            },
                            "errorDate": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "packageName": {
                        "type": "string",
                        "description": ""
                    },
                    "uiHooks": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "description": ""
                    },
                    "shareable": {
                        "type": "boolean",
                        "description": ""
                    },
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "appId": {
                        "type": "string",
                        "description": ""
                    },
                    "packageRevision": {
                        "type": "string",
                        "description": ""
                    },
                    "initParams": {
                        "type": "object",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    },
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "drainTime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "queueLengthLimit": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of integrations ids - each one will be added to the service deployment as an environment variable"
                    },
                    "panels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Panel"
                        },
                        "description": ""
                    },
                    "config": {
                        "$ref": "#/components/schemas/IServiceAppConfig"
                    },
                    "type": {
                        "enum": [
                            "system",
                            "regular"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "crashloop": {
                        "$ref": "#/components/schemas/Crashloop"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/ServiceMode"
                    }
                },
                "type": "object",
                "required": [
                    "state",
                    "id",
                    "packageId",
                    "initParams",
                    "runtime",
                    "useUserJwt",
                    "botUserName",
                    "versions",
                    "moduleName",
                    "runExecutionAsProcess",
                    "executionTimeout",
                    "drainTime",
                    "onReset",
                    "name",
                    "projectId",
                    "driverId",
                    "version",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator"
                ]
            },
            "NodeNamespace": {
                "description": "",
                "properties": {
                    "projectName": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceName": {
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "packageName": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "projectName",
                    "serviceName",
                    "functionName"
                ]
            },
            "PipelineOperation": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "rootNodeNamespace": {
                        "$ref": "#/components/schemas/NodeNamespace"
                    },
                    "rootNodeProjectId": {
                        "type": "string",
                        "description": ""
                    },
                    "relatedServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "pipeline",
                            "function",
                            "webhook",
                            "rabbitmq"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "webHookId": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "ICompositionTrigger": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "triggerId": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "spec": {
                        "type": "object",
                        "properties": {
                            "resource": {
                                "enum": [
                                    "Dataset",
                                    "Item",
                                    "Annotation",
                                    "ItemStatus",
                                    "Task",
                                    "Assignment",
                                    "Model"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "actions": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "Created",
                                        "Updated",
                                        "Deleted",
                                        "statusChanged",
                                        "taskAssigned",
                                        "Clone"
                                    ],
                                    "type": "string"
                                },
                                "description": ""
                            },
                            "executionMode": {
                                "enum": [
                                    "Once",
                                    "Always"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "filter": {
                                "type": "string",
                                "description": ""
                            },
                            "operation": {
                                "$ref": "#/components/schemas/PipelineOperation"
                            },
                            "cron": {
                                "type": "string",
                                "description": ""
                            },
                            "startAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            },
                            "endAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "type",
                    "spec"
                ]
            },
            "PartialModule": {
                "description": "Make all properties in T optional",
                "properties": {},
                "type": "object"
            },
            "PackageRequirement": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "operator": {
                        "enum": [
                            "==",
                            ">",
                            "<",
                            "<=",
                            ">="
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "Codebase": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "item",
                            "git",
                            "filesystem",
                            "local"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "ICompositionPackage": {
                "description": "",
                "properties": {
                    "state": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "enum": [
                                    "installed",
                                    "deleted",
                                    "placed"
                                ],
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "codebaseId": {
                        "type": "string",
                        "description": ""
                    },
                    "entryFile": {
                        "type": "string",
                        "description": ""
                    },
                    "code": {
                        "type": "string",
                        "description": ""
                    },
                    "module": {
                        "$ref": "#/components/schemas/PartialModule"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "codebase",
                            "code"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "requirements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageRequirement"
                        },
                        "description": ""
                    },
                    "codebase": {
                        "$ref": "#/components/schemas/Codebase"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "module",
                    "name"
                ]
            },
            "TaskWorkload": {
                "description": "",
                "properties": {
                    "assigneeId": {
                        "type": "string",
                        "description": ""
                    },
                    "load": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "assigneeId",
                    "load"
                ]
            },
            "ItemAction": {
                "description": "",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": ""
                    },
                    "color": {
                        "type": "string",
                        "description": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "color",
                    "displayName"
                ]
            },
            "ICompositionTask": {
                "description": "",
                "properties": {
                    "datasetId": {
                        "type": "string",
                        "description": ""
                    },
                    "taskOwner": {
                        "type": "string",
                        "description": ""
                    },
                    "recipeId": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "dueDate": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "state": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "enum": [
                                    "open",
                                    "dismissed",
                                    "completed",
                                    "completed with issues",
                                    "in progress"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "taskId": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "workload": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskWorkload"
                        },
                        "description": ""
                    },
                    "availableActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemAction"
                        },
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "taskType": {
                        "enum": [
                            "annotation",
                            "qa"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "datasetId",
                    "taskOwner",
                    "recipeId",
                    "name",
                    "dueDate",
                    "state",
                    "metadata",
                    "nodeId",
                    "taskType"
                ]
            },
            "ServiceConfig": {
                "description": "Service Configuration",
                "properties": {
                    "initParams": {
                        "type": "object",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    },
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    }
                },
                "type": "object"
            },
            "ICompositionModel": {
                "description": "",
                "properties": {
                    "modelId": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceConfig": {
                        "$ref": "#/components/schemas/ServiceConfig"
                    }
                },
                "type": "object",
                "required": [
                    "modelId"
                ]
            },
            "APIComposition": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "orgId": {
                        "type": "string",
                        "description": ""
                    },
                    "spec": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIServiceCompositionElement"
                        },
                        "description": "Array of services details"
                    },
                    "status": {
                        "enum": [
                            "Created",
                            "Initializing",
                            "Installed",
                            "Activated",
                            "Deactivated",
                            "Uninstalled",
                            "Terminating",
                            "Terminated",
                            "Updating",
                            "Failure"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "terminated": {
                        "type": "boolean",
                        "description": ""
                    },
                    "errorText": {
                        "type": "object",
                        "description": ""
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionTrigger"
                        },
                        "description": "Array of services details"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionPackage"
                        },
                        "description": "Array of packages details"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionTask"
                        },
                        "description": "Array of tasks details"
                    },
                    "models": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionModel"
                        },
                        "description": "Array of models details"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "name",
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "projectId",
                    "orgId",
                    "spec",
                    "status",
                    "terminated"
                ]
            },
            "IPostComposition": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The composition name"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project where the composition should be install the entities"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionTrigger"
                        },
                        "description": "An array of triggers"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionPackage"
                        },
                        "description": "An array of packages"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionTask"
                        },
                        "description": "An array of tasks"
                    },
                    "spec": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIServiceCompositionElement"
                        },
                        "description": "An array of services"
                    },
                    "driverId": {
                        "type": "string",
                        "description": "The user cluster driver id - defining the compute cluster the server should connect to"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "spec",
                    "driverId"
                ]
            },
            "CursorPageAPIComposition": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIComposition"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "INodeConfig": {
                "description": "",
                "properties": {
                    "package": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": ""
                            },
                            "type": {
                                "enum": [
                                    "codebase",
                                    "code"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "entryFile": {
                                "type": "string",
                                "description": ""
                            },
                            "code": {
                                "type": "string",
                                "description": ""
                            },
                            "requirements": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PackageRequirement"
                                },
                                "description": ""
                            },
                            "requirementsFilename": {
                                "type": "string",
                                "description": ""
                            },
                            "codebase": {
                                "$ref": "#/components/schemas/Codebase"
                            },
                            "codebaseFilename": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object"
            },
            "IODescriptor": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "portId": {
                        "type": "string",
                        "description": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "color": {
                        "type": "string",
                        "description": ""
                    },
                    "actionIcon": {
                        "type": "string",
                        "description": ""
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    },
                    "portPercentage": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "defaultValue": {
                        "type": "object",
                        "description": ""
                    },
                    "variableName": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name",
                    "portId"
                ]
            },
            "INodeInfo": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "counts": {
                        "type": "object",
                        "properties": {
                            "pending": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "inProgress": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "failed": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "success": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "queue": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "stats": {
                        "type": "object",
                        "properties": {
                            "avgMs": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "avgPerDay": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "status": {
                        "enum": [
                            "pending",
                            "in-progress",
                            "failed",
                            "success",
                            "queue"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "counts"
                ]
            },
            "PipelineNodeDescriptor": {
                "description": "",
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "appId": {
                        "type": "string",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "config": {
                        "$ref": "#/components/schemas/INodeConfig"
                    },
                    "namespace": {
                        "$ref": "#/components/schemas/NodeNamespace"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IODescriptor"
                        },
                        "description": ""
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IODescriptor"
                        },
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "code",
                            "function",
                            "task",
                            "merge",
                            "split",
                            "ml",
                            "storage",
                            "api",
                            "custom",
                            "updateVariable"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "info": {
                        "$ref": "#/components/schemas/INodeInfo"
                    }
                },
                "type": "object",
                "required": [
                    "metadata",
                    "id",
                    "namespace",
                    "inputs",
                    "outputs",
                    "type",
                    "name"
                ]
            },
            "PipelineNodeSource": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "portId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "portId"
                ]
            },
            "PipelineNodeTarget": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "portId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "portId"
                ]
            },
            "PipelineConnection": {
                "description": "",
                "properties": {
                    "src": {
                        "$ref": "#/components/schemas/PipelineNodeSource"
                    },
                    "tgt": {
                        "$ref": "#/components/schemas/PipelineNodeTarget"
                    },
                    "condition": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "src",
                    "tgt"
                ]
            },
            "IStartNodeTrigger": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "spec": {
                        "type": "object",
                        "properties": {
                            "resource": {
                                "enum": [
                                    "Dataset",
                                    "Item",
                                    "Annotation",
                                    "ItemStatus",
                                    "Task",
                                    "Assignment",
                                    "Model"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "actions": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "Created",
                                        "Updated",
                                        "Deleted",
                                        "statusChanged",
                                        "taskAssigned",
                                        "Clone"
                                    ],
                                    "type": "string"
                                },
                                "description": ""
                            },
                            "executionMode": {
                                "enum": [
                                    "Once",
                                    "Always"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "filter": {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        },
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "spec"
                ]
            },
            "IStartNode": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "root",
                            "trigger"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/IStartNodeTrigger"
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "type"
                ]
            },
            "IPipelineSettings": {
                "description": "",
                "properties": {
                    "defaultResumeOption": {
                        "enum": [
                            "terminateExistingCycles",
                            "resumeExistingCycles"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "keepTriggersActive": {
                        "type": "boolean",
                        "description": ""
                    },
                    "activeTriggerAskAgain": {
                        "type": "boolean",
                        "description": ""
                    },
                    "lastUpdate": {
                        "type": "object",
                        "properties": {
                            "updatedBy": {
                                "type": "string",
                                "description": ""
                            },
                            "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "lastUpdate"
                ]
            },
            "PipelineVariable": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "reference": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "reference",
                    "creator",
                    "value",
                    "type"
                ]
            },
            "APIPipeline": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "orgId": {
                        "type": "string",
                        "description": ""
                    },
                    "compositionId": {
                        "type": "string",
                        "description": ""
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineNodeDescriptor"
                        },
                        "description": ""
                    },
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineConnection"
                        },
                        "description": ""
                    },
                    "description": {
                        "type": "string",
                        "description": ""
                    },
                    "preview": {
                        "type": "string",
                        "description": ""
                    },
                    "startNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IStartNode"
                        },
                        "description": ""
                    },
                    "status": {
                        "enum": [
                            "Created",
                            "Initializing",
                            "Installed",
                            "Activated",
                            "Deactivated",
                            "Uninstalled",
                            "Terminating",
                            "Terminated",
                            "Updating",
                            "Failure"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "settings": {
                        "$ref": "#/components/schemas/IPipelineSettings"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineVariable"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "name",
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "projectId",
                    "orgId",
                    "nodes",
                    "connections",
                    "description",
                    "preview",
                    "status"
                ]
            },
            "IPostPipeline": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "startNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IStartNode"
                        },
                        "description": ""
                    },
                    "spec": {
                        "type": "object",
                        "description": ""
                    },
                    "compositionId": {
                        "type": "string",
                        "description": ""
                    },
                    "description": {
                        "type": "string",
                        "description": ""
                    },
                    "preview": {
                        "type": "string",
                        "description": ""
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineNodeDescriptor"
                        },
                        "description": ""
                    },
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineConnection"
                        },
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineVariable"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "description",
                    "preview",
                    "nodes",
                    "connections",
                    "secrets"
                ]
            },
            "APIVariable": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "reference": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "reference",
                    "creator",
                    "value",
                    "type"
                ]
            },
            "IPipelineExecutionCount": {
                "description": "",
                "properties": {
                    "status": {
                        "enum": [
                            "pending",
                            "in-progress",
                            "failed",
                            "success",
                            "queue",
                            "terminated"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "count": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "count"
                ]
            },
            "IExecutionCount": {
                "description": "",
                "properties": {
                    "status": {
                        "enum": [
                            "created",
                            "in-progress",
                            "failed",
                            "success",
                            "canceled",
                            "rerun"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "count": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "count"
                ]
            },
            "INodeExecutionCount": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "statusCount": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExecutionCount"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "statusCount"
                ]
            },
            "IExecutionStatistics": {
                "description": "",
                "properties": {
                    "avgTimePerExecution": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "avgExecutionsPerDay": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "avgTimePerExecution",
                    "avgExecutionsPerDay"
                ]
            },
            "INodeExecutionStatistics": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "executionStatistics": {
                        "$ref": "#/components/schemas/IExecutionStatistics"
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "executionStatistics"
                ]
            },
            "IPipelineStatistics": {
                "description": "",
                "properties": {
                    "pipelineExecutionCounters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPipelineExecutionCount"
                        },
                        "description": ""
                    },
                    "nodeExecutionsCounters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INodeExecutionCount"
                        },
                        "description": ""
                    },
                    "pipelineExecutionStatistics": {
                        "$ref": "#/components/schemas/IExecutionStatistics"
                    },
                    "nodeExecutionStatistics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INodeExecutionStatistics"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "pipelineExecutionCounters",
                    "nodeExecutionsCounters"
                ]
            },
            "ExecuteOptionsBatchQuery": {
                "description": "",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "resource": {
                        "enum": [
                            "triggers",
                            "executions",
                            "services",
                            "packages",
                            "annotations",
                            "items",
                            "labels",
                            "tasks",
                            "datasets",
                            "assignments",
                            "directory",
                            "pipeline",
                            "pipelineState",
                            "pipelineTemplate",
                            "composition",
                            "resourceExecution",
                            "apps",
                            "dpks"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "context": {
                        "type": "object",
                        "properties": {
                            "datasets": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": ""
                            },
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "filter",
                    "resource"
                ]
            },
            "ExecuteOptionsBatch": {
                "description": "",
                "properties": {
                    "query": {
                        "$ref": "#/components/schemas/ExecuteOptionsBatchQuery"
                    },
                    "args": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "ExecuteOptions": {
                "description": "",
                "properties": {
                    "pipeline": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": ""
                            },
                            "nodeId": {
                                "type": "string",
                                "description": ""
                            },
                            "input": {
                                "type": "object",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "batch": {
                        "$ref": "#/components/schemas/ExecuteOptionsBatch"
                    }
                },
                "type": "object",
                "required": [
                    "batch"
                ]
            },
            "NodeDescriptor": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "config": {
                        "$ref": "#/components/schemas/INodeConfig"
                    },
                    "namespace": {
                        "$ref": "#/components/schemas/NodeNamespace"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IODescriptor"
                        },
                        "description": ""
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IODescriptor"
                        },
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "code",
                            "function",
                            "task",
                            "merge",
                            "split",
                            "ml",
                            "storage",
                            "api",
                            "custom",
                            "updateVariable"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "info": {
                        "$ref": "#/components/schemas/INodeInfo"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "namespace",
                    "inputs",
                    "outputs",
                    "type",
                    "name"
                ]
            },
            "CompositionStatusDescriptor": {
                "description": "",
                "properties": {
                    "running": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "failed": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "pending": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "standBy": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "running",
                    "failed",
                    "pending",
                    "standBy"
                ]
            },
            "CursorPageAPIPipeline": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIPipeline"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "Boolean": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ExecutionIO": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "portId": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name",
                    "portId"
                ]
            },
            "IPipelineNodeState": {
                "description": "",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "namespace": {
                        "$ref": "#/components/schemas/NodeNamespace"
                    },
                    "status": {
                        "enum": [
                            "pending",
                            "in-progress",
                            "failed",
                            "success",
                            "queue"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExecutionIO"
                        },
                        "description": ""
                    },
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "code",
                            "function",
                            "task",
                            "merge",
                            "split",
                            "ml",
                            "storage",
                            "api",
                            "custom",
                            "updateVariable"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "updatedAt",
                    "id",
                    "namespace",
                    "status",
                    "ports",
                    "serviceId",
                    "metadata",
                    "projectId",
                    "name",
                    "type"
                ]
            },
            "INodeTransitionError": {
                "description": "",
                "properties": {
                    "sourceNodeName": {
                        "type": "string",
                        "description": ""
                    },
                    "sourceNodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "targetNodeName": {
                        "type": "string",
                        "description": ""
                    },
                    "targetNodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "error": {
                        "type": "object",
                        "description": ""
                    },
                    "displayMessage": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "sourceNodeName",
                    "sourceNodeId",
                    "targetNodeName",
                    "targetNodeId",
                    "error",
                    "displayMessage"
                ]
            },
            "APIPipelineState": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "executions": {
                        "type": "object",
                        "properties": {},
                        "description": ""
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPipelineNodeState"
                        },
                        "description": ""
                    },
                    "status": {
                        "enum": [
                            "pending",
                            "in-progress",
                            "failed",
                            "success",
                            "queue",
                            "terminated"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "transitionErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INodeTransitionError"
                        },
                        "description": ""
                    },
                    "mergeCount": {
                        "type": "object",
                        "properties": {},
                        "description": ""
                    },
                    "taskNodeItemCount": {
                        "type": "object",
                        "properties": {},
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "pipelineId",
                    "createdAt",
                    "updatedAt",
                    "executions",
                    "nodes",
                    "status",
                    "maxAttempts"
                ]
            },
            "CursorPageAPIPipelineState": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIPipelineState"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "ServiceLogEntry": {
                "description": "",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "timestamp": {
                        "type": "object",
                        "description": ""
                    },
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "executionId": {
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "level": {
                        "enum": [
                            "CRITICAL",
                            "ERROR",
                            "WARNING",
                            "INFO",
                            "DEBUG"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "message",
                    "timestamp",
                    "replicaId"
                ]
            },
            "ExecutionLogs": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "inputs": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "logs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLogEntry"
                        },
                        "description": ""
                    },
                    "stop": {
                        "type": "boolean",
                        "description": ""
                    },
                    "checkpoint": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "inputs",
                    "output",
                    "functionName",
                    "logs",
                    "stop"
                ]
            },
            "PipelineExecutionLogs": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "executions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExecutionLogs"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "executions"
                ]
            },
            "LogQuery": {
                "description": "",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "follow": {
                        "type": "boolean",
                        "description": ""
                    },
                    "size": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "checkpoint": {
                        "type": "string",
                        "description": ""
                    },
                    "direction": {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "start": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "end": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "executionId": {
                        "type": "object",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "text": {
                        "type": "object",
                        "description": ""
                    },
                    "logLevel": {
                        "enum": [
                            "CRITICAL",
                            "ERROR",
                            "WARNING",
                            "INFO",
                            "DEBUG"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "pipelineExecutionId": {
                        "type": "string",
                        "description": ""
                    },
                    "system": {
                        "type": "boolean",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "QueryString": {
                "description": "",
                "properties": {
                    "resource": {
                        "enum": [
                            "triggers",
                            "executions",
                            "services",
                            "packages",
                            "annotations",
                            "items",
                            "labels",
                            "tasks",
                            "datasets",
                            "assignments",
                            "directory",
                            "pipeline",
                            "pipelineState",
                            "pipelineTemplate",
                            "composition",
                            "resourceExecution",
                            "apps",
                            "dpks"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "filter": {
                        "type": "object",
                        "description": ""
                    },
                    "sort": {
                        "type": "object",
                        "description": ""
                    },
                    "page": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "resource",
                    "filter",
                    "sort",
                    "page",
                    "pageSize"
                ]
            },
            "CursorPageAPIPipelineTemplate": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIPipeline"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "APITemplateQuery": {
                "description": "",
                "properties": {
                    "global": {
                        "$ref": "#/components/schemas/CursorPageAPIPipelineTemplate"
                    },
                    "project": {
                        "$ref": "#/components/schemas/CursorPageAPIPipelineTemplate"
                    },
                    "org": {
                        "$ref": "#/components/schemas/CursorPageAPIPipelineTemplate"
                    }
                },
                "type": "object",
                "required": [
                    "global",
                    "project",
                    "org"
                ]
            },
            "QueryStringTemplate": {
                "description": "",
                "properties": {
                    "filter": {
                        "type": "object",
                        "description": ""
                    },
                    "sort": {
                        "type": "object",
                        "description": ""
                    },
                    "page": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "filter",
                    "sort",
                    "page",
                    "pageSize"
                ]
            },
            "TemplateQuery": {
                "description": "",
                "properties": {
                    "project": {
                        "$ref": "#/components/schemas/QueryStringTemplate"
                    },
                    "org": {
                        "$ref": "#/components/schemas/QueryStringTemplate"
                    },
                    "global": {
                        "$ref": "#/components/schemas/QueryStringTemplate"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "org",
                    "global"
                ]
            },
            "CursorPageT": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "enum": [
                            "APIComposition[]",
                            "APIPipeline[]",
                            "APIPipelineState[]",
                            "ResourceExecution[]",
                            "APIDpk[]",
                            "APIApp[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "APITrigger": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "id",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "name",
                    "projectId",
                    "active"
                ]
            },
            "TriggersPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APITrigger"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "CreateTriggerRequest": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name",
                    "projectId",
                    "active"
                ]
            },
            "TriggerResourceInformationItem": {
                "description": "",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceName": {
                        "type": "string",
                        "description": ""
                    },
                    "triggerId": {
                        "type": "string",
                        "description": ""
                    },
                    "triggerActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "packageModuleName": {
                        "type": "string",
                        "description": ""
                    },
                    "packageFunctionName": {
                        "type": "string",
                        "description": ""
                    },
                    "packageFunctionDescription": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "serviceId",
                    "serviceName",
                    "triggerId",
                    "triggerActions",
                    "packageModuleName",
                    "packageFunctionName",
                    "packageFunctionDescription"
                ]
            },
            "TriggerResourceInformationPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerResourceInformationItem"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "TriggerResourceInformationQuery": {
                "description": "",
                "properties": {
                    "resource": {
                        "type": "string",
                        "description": ""
                    },
                    "entity": {
                        "type": "object",
                        "description": ""
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "resource",
                    "entity",
                    "action"
                ]
            },
            "AgentNotificationPayload": {
                "description": "",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": ""
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "notificationName": {
                        "type": "string",
                        "description": ""
                    },
                    "notificationPath": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "action"
                ]
            },
            "ICacheRunner": {
                "description": "",
                "properties": {
                    "redisHost": {
                        "type": "string",
                        "description": ""
                    },
                    "numReplicas": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "size": {
                        "enum": [
                            "large",
                            "medium",
                            "small"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "ssd",
                            "standard"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "minReplica": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "maxReplica": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "redisHost",
                    "numReplicas",
                    "size",
                    "type",
                    "minReplica",
                    "maxReplica"
                ]
            },
            "ICacheOptions": {
                "description": "",
                "properties": {
                    "org": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": ""
                            },
                            "id": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "runner": {
                        "$ref": "#/components/schemas/ICacheRunner"
                    }
                },
                "type": "object",
                "required": [
                    "org"
                ]
            },
            "APIService": {
                "description": "",
                "properties": {
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "appId": {
                        "type": "string",
                        "description": ""
                    },
                    "packageRevision": {
                        "type": "string",
                        "description": ""
                    },
                    "initParams": {
                        "type": "object",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    },
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "drainTime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "queueLengthLimit": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of integrations ids - each one will be added to the service deployment as an environment variable"
                    },
                    "panels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Panel"
                        },
                        "description": ""
                    },
                    "config": {
                        "$ref": "#/components/schemas/IServiceAppConfig"
                    },
                    "type": {
                        "enum": [
                            "system",
                            "regular"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "crashloop": {
                        "$ref": "#/components/schemas/Crashloop"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/ServiceMode"
                    }
                },
                "type": "object",
                "required": [
                    "packageId",
                    "initParams",
                    "runtime",
                    "useUserJwt",
                    "botUserName",
                    "versions",
                    "moduleName",
                    "runExecutionAsProcess",
                    "executionTimeout",
                    "drainTime",
                    "onReset",
                    "name",
                    "projectId",
                    "driverId",
                    "id",
                    "version",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator"
                ]
            },
            "ServicesPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIService"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "APIServicePatch": {
                "description": "",
                "properties": {
                    "packageRevision": {
                        "type": "string",
                        "description": ""
                    },
                    "initParams": {
                        "type": "object",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    },
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "drainTime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "type": "string",
                        "description": ""
                    },
                    "queueLengthLimit": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of integrations ids - each one will be added to the service deployment as an environment variable"
                    },
                    "type": {
                        "enum": [
                            "system",
                            "regular"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "mode": {
                        "$ref": "#/components/schemas/ServiceMode"
                    }
                },
                "type": "object"
            },
            "ServiceLogsPage": {
                "description": "",
                "properties": {
                    "logs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLogEntry"
                        },
                        "description": ""
                    },
                    "stop": {
                        "type": "boolean",
                        "description": ""
                    },
                    "checkpoint": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "logs",
                    "stop"
                ]
            },
            "APIReplicaStatusUpdate": {
                "description": "",
                "properties": {
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "enum": [
                            "down",
                            "initializing",
                            "running",
                            "full",
                            "terminating",
                            "failed",
                            "paused"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "numRestarts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "uptime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "replicaId",
                    "status",
                    "numRestarts",
                    "uptime"
                ]
            },
            "DeploymentStatus": {
                "description": "",
                "properties": {
                    "lastTransitionTime": {
                        "type": "string",
                        "description": ""
                    },
                    "lastUpdateTime": {
                        "type": "string",
                        "description": ""
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "reason": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "lastTransitionTime",
                    "lastUpdateTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                ]
            },
            "ServiceRuntimeStatus": {
                "description": "",
                "properties": {
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "type": "boolean",
                        "description": ""
                    },
                    "reason": {
                        "enum": [
                            "ContainerCreating",
                            "CrashLoopBackOff",
                            "ErrImagePull",
                            "ImagePullBackOff",
                            "CreateContainerConfigError",
                            "InvalidImageName",
                            "CreateContainerError",
                            "Unschedulable",
                            "OOMKilled",
                            "Error",
                            "Completed",
                            "ContainerCannotRun",
                            "DeadlineExceeded",
                            "NodeLost",
                            "Evicted",
                            "UnexpectedAdmissionError",
                            "NodeAffinity",
                            "Shutdown"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "restartCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "replicaId",
                    "status"
                ]
            },
            "APIServiceStatus": {
                "description": "",
                "properties": {
                    "replicaStatus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIReplicaStatusUpdate"
                        },
                        "description": ""
                    },
                    "numMessagesInQueue": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "deploymentStatus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeploymentStatus"
                        },
                        "description": ""
                    },
                    "runtimeStatus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRuntimeStatus"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "replicaStatus",
                    "numMessagesInQueue",
                    "deploymentStatus",
                    "runtimeStatus"
                ]
            },
            "DebugSession": {
                "description": "",
                "properties": {
                    "status": {
                        "enum": [
                            "placed",
                            "activate",
                            "deactivate"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "status"
                ]
            },
            "FunctionIO": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name"
                ]
            },
            "Function": {
                "description": "Creates a new function.",
                "properties": {
                    "prototype": {
                        "type": "object",
                        "description": ""
                    },
                    "length": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "arguments": {
                        "type": "object",
                        "description": ""
                    },
                    "caller": {
                        "$ref": "#/components/schemas/Function"
                    }
                },
                "type": "object",
                "required": [
                    "prototype",
                    "length",
                    "arguments",
                    "caller"
                ]
            },
            "Module": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "entryPoint": {
                        "type": "string",
                        "description": ""
                    },
                    "className": {
                        "type": "string",
                        "description": ""
                    },
                    "initInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionIO"
                        },
                        "description": ""
                    },
                    "functions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Function"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "entryPoint",
                    "initInputs",
                    "functions"
                ]
            },
            "UiHook": {
                "description": "",
                "properties": {
                    "bindTo": {
                        "type": "string",
                        "description": ""
                    },
                    "config": {
                        "type": "object",
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    },
                    "slots": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "bindTo",
                    "config",
                    "icon",
                    "slots"
                ]
            },
            "DisplayScope": {
                "description": "",
                "properties": {
                    "resource": {
                        "enum": [
                            "annotation",
                            "item",
                            "dataset",
                            "datasetQuery",
                            "project",
                            "task",
                            "assignment"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "panel": {
                        "enum": [
                            "browser",
                            "studio",
                            "table",
                            "all"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "resource",
                    "filter"
                ]
            },
            "ExecutionPostAction": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "download",
                            "drawAnnotation",
                            "noAction"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "DLFunctionDefaultInputSpec": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "value"
                ]
            },
            "DLFunctionInputOptionsSpec": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "values"
                ]
            },
            "UiSlot": {
                "description": "",
                "properties": {
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "displayScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DisplayScope"
                        },
                        "description": ""
                    },
                    "postAction": {
                        "$ref": "#/components/schemas/ExecutionPostAction"
                    },
                    "displayIcon": {
                        "type": "string",
                        "description": ""
                    },
                    "defaultInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DLFunctionDefaultInputSpec"
                        },
                        "description": ""
                    },
                    "inputOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DLFunctionInputOptionsSpec"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "moduleName",
                    "functionName",
                    "displayName",
                    "displayScopes",
                    "postAction"
                ]
            },
            "PackageMetadata": {
                "description": "",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "system": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object"
            },
            "APIPackage": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "codebase": {
                        "$ref": "#/components/schemas/Codebase"
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Module"
                        },
                        "description": "List of modules PackageModules of the package"
                    },
                    "uiHooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UiHook"
                        },
                        "description": ""
                    },
                    "slots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UiSlot"
                        },
                        "description": ""
                    },
                    "serviceConfig": {
                        "$ref": "#/components/schemas/ServiceConfig"
                    },
                    "type": {
                        "enum": [
                            "app",
                            "faas"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "requirements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageRequirement"
                        },
                        "description": "The Requirement list (list of packages your code requires to run)."
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/PackageMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "version",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "name",
                    "global",
                    "projectId",
                    "codebase",
                    "modules",
                    "type"
                ]
            },
            "PackagesPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIPackage"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "IPipelineExecution": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "executionId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "nodeId",
                    "executionId"
                ]
            },
            "ItemStatusEvent": {
                "description": "",
                "properties": {
                    "pipelineId": {
                        "type": "string",
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "type": "object",
                        "properties": {
                            "taskId": {
                                "type": "string",
                                "description": ""
                            },
                            "assignmentId": {
                                "type": "string",
                                "description": ""
                            },
                            "status": {
                                "type": "string",
                                "description": ""
                            },
                            "creator": {
                                "type": "string",
                                "description": ""
                            },
                            "timestamp": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "pipelineId",
                    "nodeId",
                    "status",
                    "action"
                ]
            },
            "ExecutionEventContext": {
                "description": "",
                "properties": {
                    "resource": {
                        "enum": [
                            "items",
                            "annotations",
                            "datasets",
                            "executions",
                            "items.status",
                            "tasks",
                            "assignments",
                            "recipes",
                            "ontologies",
                            "packages",
                            "compositions",
                            "pipelines",
                            "pipeline.run",
                            "services",
                            "triggers",
                            "models",
                            "settings",
                            "projects",
                            "users",
                            "groups",
                            "trigger_cmds",
                            "orgs",
                            "projectGuests",
                            "integrations",
                            "apps",
                            "dpk",
                            "billingResources",
                            "subscriptions",
                            "accounts",
                            "drivers"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "source": {
                        "enum": [
                            "ui",
                            "sdk",
                            "other",
                            "system",
                            "unknown"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    },
                    "resourceId": {
                        "type": "string",
                        "description": ""
                    },
                    "userId": {
                        "type": "string",
                        "description": ""
                    },
                    "datasetId": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "body": {
                        "type": "object",
                        "description": ""
                    },
                    "itemStatusEvent": {
                        "$ref": "#/components/schemas/ItemStatusEvent"
                    }
                },
                "type": "object"
            },
            "APIExecution": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "attempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "toTerminate": {
                        "type": "boolean",
                        "description": ""
                    },
                    "input": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "status": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExecutionStatusReport"
                        },
                        "description": ""
                    },
                    "statusLog": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExecutionStatusReport"
                        },
                        "description": ""
                    },
                    "latestStatus": {
                        "$ref": "#/components/schemas/ExecutionStatusReport"
                    },
                    "duration": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "triggerId": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The service name where the execution was executed"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": "The module containing the function code"
                    },
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "packageName": {
                        "type": "string",
                        "description": ""
                    },
                    "packageRevision": {
                        "type": "object",
                        "description": ""
                    },
                    "serviceVersion": {
                        "type": "object",
                        "description": ""
                    },
                    "pipeline": {
                        "$ref": "#/components/schemas/IPipelineExecution"
                    },
                    "syncReplyTo": {
                        "type": "object",
                        "properties": {
                            "exchange": {
                                "type": "string",
                                "description": ""
                            },
                            "route": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": "Used when running execution in sync mode"
                    },
                    "eventContext": {
                        "$ref": "#/components/schemas/ExecutionEventContext"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "attempts",
                    "maxAttempts",
                    "toTerminate",
                    "input",
                    "status",
                    "statusLog",
                    "latestStatus",
                    "duration",
                    "projectId",
                    "serviceId",
                    "packageId",
                    "packageName",
                    "packageRevision",
                    "serviceVersion",
                    "syncReplyTo"
                ]
            },
            "ExecutionsPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIExecution"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "APIExecutionPatch": {
                "description": "",
                "properties": {
                    "duration": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "serviceVersion": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "ActivitiesDescriptor_": {
                "description": "",
                "properties": {},
                "type": "object",
                "additionalProperties": {}
            },
            "APIWebHook": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "project": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "httpMethod": {
                        "enum": [
                            "GET",
                            "POST"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "hookUrl": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "project",
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "name",
                    "httpMethod",
                    "hookUrl"
                ]
            },
            "WebHooksPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIWebHook"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "IDpkComponentPanel": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "minRole": {
                        "type": "string",
                        "description": ""
                    },
                    "supportedSlots": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": ""
                                },
                                "id": {
                                    "type": "string",
                                    "description": ""
                                },
                                "configuration": {
                                    "$ref": "#/components/schemas/Dictionary"
                                }
                            }
                        },
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "conditions": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "defaultSettings": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "minRole",
                    "supportedSlots",
                    "icon",
                    "metadata"
                ]
            },
            "IDpkComponentModel": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "IDpkComponentModule": {
                "description": "",
                "properties": {
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "config": {
                        "$ref": "#/components/schemas/IServiceAppConfig"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "entryPoint": {
                        "type": "string",
                        "description": ""
                    },
                    "className": {
                        "type": "string",
                        "description": ""
                    },
                    "initInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionIO"
                        },
                        "description": ""
                    },
                    "functions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Function"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "entryPoint",
                    "initInputs",
                    "functions"
                ]
            },
            "IDpkComponentTrigger": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "IDpkComponentService": {
                "description": "",
                "properties": {
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "initParams": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "panelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "initParams",
                    "panelNames",
                    "botUserName",
                    "maxAttempts"
                ]
            },
            "IDpkComponentToolbars": {
                "description": "",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "conditions": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "invoke": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "location": {
                        "type": "string",
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "invoke"
                ]
            },
            "APIDpk": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "description": {
                        "type": "string",
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "codebase": {
                        "$ref": "#/components/schemas/Codebase"
                    },
                    "trusted": {
                        "type": "boolean",
                        "description": ""
                    },
                    "scope": {
                        "type": "string",
                        "description": ""
                    },
                    "latest": {
                        "type": "boolean",
                        "description": ""
                    },
                    "components": {
                        "type": "object",
                        "properties": {
                            "panels": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentPanel"
                                },
                                "description": ""
                            },
                            "models": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentModel"
                                },
                                "description": ""
                            },
                            "modules": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentModule"
                                },
                                "description": ""
                            },
                            "triggers": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentTrigger"
                                },
                                "description": ""
                            },
                            "services": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentService"
                                },
                                "description": ""
                            },
                            "toolbars": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentToolbars"
                                },
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "url",
                    "version",
                    "updatedAt",
                    "createdAt",
                    "creator",
                    "displayName",
                    "description",
                    "icon",
                    "tags",
                    "codebase",
                    "scope",
                    "latest",
                    "components"
                ]
            },
            "APIPostDpk": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The app name"
                    },
                    "version": {
                        "type": "string",
                        "description": "The app version"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of categories linked to the app"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display Name"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the dpk"
                    },
                    "icon": {
                        "type": "string",
                        "description": "icon style - should present in the ui platform"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags linked to the app"
                    },
                    "codebase": {
                        "$ref": "#/components/schemas/Codebase"
                    },
                    "scope": {
                        "type": "string",
                        "description": "the scope is belong to"
                    },
                    "trusted": {
                        "type": "boolean",
                        "description": ""
                    },
                    "components": {
                        "type": "object",
                        "properties": {
                            "panels": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentPanel"
                                },
                                "description": "the panels component"
                            },
                            "models": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentModel"
                                },
                                "description": "the models component"
                            },
                            "modules": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentModule"
                                },
                                "description": "the modules component"
                            },
                            "triggers": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentTrigger"
                                },
                                "description": "the triggers component"
                            },
                            "services": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentService"
                                },
                                "description": "the services component"
                            },
                            "toolbars": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentToolbars"
                                },
                                "description": "the toolbars component"
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "codebase",
                    "components"
                ]
            },
            "CursorPageAPIDpk": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIDpk"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "PartialAPIDpk": {
                "description": "Make all properties in T optional",
                "properties": {},
                "type": "object"
            },
            "APIApp": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "orgId": {
                        "type": "string",
                        "description": ""
                    },
                    "dpkName": {
                        "type": "string",
                        "description": ""
                    },
                    "dpkVersion": {
                        "type": "string",
                        "description": ""
                    },
                    "compositionId": {
                        "type": "string",
                        "description": ""
                    },
                    "scope": {
                        "enum": [
                            "system"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "routes": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "dpk": {
                        "$ref": "#/components/schemas/PartialAPIDpk"
                    },
                    "trusted": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "projectId",
                    "orgId",
                    "dpkName",
                    "dpkVersion",
                    "compositionId",
                    "routes"
                ]
            },
            "APIPostApp": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The app name"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project where the app should be install"
                    },
                    "dpkName": {
                        "type": "string",
                        "description": "A unique DPK app name"
                    },
                    "dpkVersion": {
                        "type": "string",
                        "description": "The version of the dpk app"
                    },
                    "scope": {
                        "enum": [
                            "system"
                        ],
                        "type": "string",
                        "description": "The app scope"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "dpkName"
                ]
            },
            "APIPatchApp": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The app name"
                    },
                    "dpkName": {
                        "type": "string",
                        "description": "A unique DPK app name"
                    },
                    "dpkVersion": {
                        "type": "string",
                        "description": "The version of the dpk app"
                    },
                    "trusted": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "dpkName"
                ]
            },
            "MigrationSpec": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    {
                        "properties": {
                            "report": {
                                "type": "boolean"
                            },
                            "fix": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SettingsValueTypes": {
                "enum": [
                    "boolean",
                    "number",
                    "select",
                    "multi-select",
                    "string",
                    "object",
                    "array"
                ],
                "type": "string"
            },
            "PlatformEntityType": {
                "enum": [
                    "user",
                    "task",
                    "dataset",
                    "project",
                    "billing-project",
                    "org",
                    "billing-org"
                ],
                "type": "string"
            },
            "Role": {
                "enum": [
                    "owner",
                    "annotator",
                    "engineer",
                    "annotationManager"
                ],
                "type": "string"
            },
            "OrgRole": {
                "enum": [
                    "owner",
                    "admin",
                    "member",
                    "worker"
                ],
                "type": "string"
            },
            "SettingScope": {
                "properties": {
                    "type": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PlatformEntityType"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "DATALOOP"
                                ]
                            }
                        ]
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "*"
                                ]
                            }
                        ]
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "$ref": "#/components/schemas/OrgRole"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "*"
                                ]
                            }
                        ]
                    },
                    "preventOverride": {
                        "type": "boolean"
                    },
                    "visible": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "type",
                    "id",
                    "role",
                    "preventOverride",
                    "visible"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SettingsTypes": {
                "enum": [
                    "feature_flag",
                    "user_settings"
                ],
                "type": "string"
            },
            "APIFeatureFlag": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the date the feature flag expired"
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "value of that is interpreted from the expired at date. it signals if the flag is expired or not"
                    }
                },
                "required": [
                    "id",
                    "defaultValue",
                    "name",
                    "value",
                    "valueType",
                    "scope",
                    "metadata",
                    "settingType",
                    "expired"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SettingsSectionNames": {
                "enum": [
                    "Account",
                    "Contact",
                    "Applications",
                    "Studio",
                    "Platform",
                    "SDK"
                ],
                "type": "string"
            },
            "APIUserSetting": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    },
                    "description": {
                        "type": "string",
                        "description": "description field for the user setting"
                    },
                    "inputs": {
                        "description": "inputs specified for the user setting"
                    },
                    "icon": {
                        "type": "string",
                        "description": "an icon for the setting"
                    },
                    "hint": {
                        "type": "string",
                        "description": "a hint for the setting"
                    },
                    "sectionName": {
                        "$ref": "#/components/schemas/SettingsSectionNames",
                        "description": "the main section that the setting belongs to"
                    },
                    "subSectionName": {
                        "type": "string",
                        "description": "the sub section that the setting belongs to"
                    }
                },
                "required": [
                    "id",
                    "defaultValue",
                    "name",
                    "value",
                    "valueType",
                    "scope",
                    "metadata",
                    "settingType",
                    "inputs",
                    "sectionName"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "IUserContext": {
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "ID of the User"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the Org"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the Project"
                    },
                    "taskId": {
                        "type": "string",
                        "description": "ID of the Task"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "ID of the Dataset"
                    }
                },
                "required": [
                    "userId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateSettingRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    }
                },
                "required": [
                    "name",
                    "valueType",
                    "scope",
                    "settingType"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateFeatureFlagRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "the date the feature flag expired"
                    }
                },
                "required": [
                    "name",
                    "valueType",
                    "scope",
                    "settingType"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateUserSettingRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description field for the user setting"
                    },
                    "inputs": {
                        "description": "inputs specified for the user setting"
                    },
                    "icon": {
                        "type": "string",
                        "nullable": true,
                        "description": "an icon for the setting"
                    },
                    "hint": {
                        "type": "string",
                        "nullable": true,
                        "description": "a hint for the setting"
                    },
                    "sectionName": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SettingsSectionNames"
                            }
                        ],
                        "nullable": true,
                        "description": "the main section that the setting belongs to"
                    },
                    "subSectionName": {
                        "type": "string",
                        "nullable": true,
                        "description": "the sub section that the setting belongs to"
                    }
                },
                "required": [
                    "name",
                    "valueType",
                    "scope",
                    "settingType",
                    "sectionName"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_SettingScope_": {
                "properties": {
                    "type": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PlatformEntityType"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "DATALOOP"
                                ]
                            }
                        ],
                        "description": "The type for which the setting belongs"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "*"
                                ]
                            }
                        ],
                        "description": "The id for which the setting belongs"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "$ref": "#/components/schemas/OrgRole"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "*"
                                ]
                            }
                        ],
                        "description": "The role for which the setting belongs"
                    },
                    "preventOverride": {
                        "type": "boolean",
                        "description": "allow other settings to override this setting"
                    },
                    "visible": {
                        "type": "boolean",
                        "description": "a toggle if the setting is visible or not"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "PatchFeatureFlagRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SettingsValueTypes"
                            }
                        ],
                        "nullable": true,
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Partial_SettingScope_"
                            }
                        ],
                        "nullable": true,
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "the date the feature flag expired"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "PatchUserSettingRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SettingsValueTypes"
                            }
                        ],
                        "nullable": true,
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Partial_SettingScope_"
                            }
                        ],
                        "nullable": true,
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description field for the user setting"
                    },
                    "inputs": {
                        "description": "inputs specified for the user setting"
                    },
                    "icon": {
                        "type": "string",
                        "nullable": true,
                        "description": "an icon for the setting"
                    },
                    "hint": {
                        "type": "string",
                        "nullable": true,
                        "description": "a hint for the setting"
                    },
                    "sectionName": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SettingsSectionNames"
                            }
                        ],
                        "nullable": true,
                        "description": "the main section that the setting belongs to"
                    },
                    "subSectionName": {
                        "type": "string",
                        "nullable": true,
                        "description": "the sub section that the setting belongs to"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APIUserSetting-or-APIFeatureFlag_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/APIUserSetting"
                                },
                                {
                                    "$ref": "#/components/schemas/APIFeatureFlag"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "IVersion": {
                "properties": {
                    "latestVersion": {
                        "type": "string"
                    },
                    "latestForcedVersion": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "latestVersion",
                    "latestForcedVersion"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UIHours": {
                "properties": {
                    "sum": {
                        "type": "number",
                        "format": "double"
                    },
                    "roles": {
                        "properties": {},
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sum",
                    "roles"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APICallResourceDescriptor": {
                "properties": {
                    "sum": {
                        "type": "number",
                        "format": "double"
                    },
                    "actions": {
                        "properties": {},
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sum",
                    "actions"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APICallSourceDescriptor": {
                "properties": {
                    "sum": {
                        "type": "number",
                        "format": "double"
                    },
                    "resources": {
                        "properties": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/APICallResourceDescriptor"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sum",
                    "resources"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APICallDescriptor": {
                "properties": {
                    "ui": {
                        "$ref": "#/components/schemas/APICallSourceDescriptor"
                    },
                    "sdk": {
                        "$ref": "#/components/schemas/APICallSourceDescriptor"
                    },
                    "system": {
                        "$ref": "#/components/schemas/APICallSourceDescriptor"
                    },
                    "other": {
                        "$ref": "#/components/schemas/APICallSourceDescriptor"
                    },
                    "sum": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "ui",
                    "sdk",
                    "system",
                    "other",
                    "sum"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "StorageModificationSourceDescriptor": {
                "properties": {
                    "added": {
                        "type": "number",
                        "format": "double"
                    },
                    "removed": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "added",
                    "removed"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "StorageModificationDescriptor": {
                "properties": {
                    "ui": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "sdk": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "system": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "other": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "unknown": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "total": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    }
                },
                "required": [
                    "ui",
                    "sdk",
                    "system",
                    "other",
                    "total"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "StorageDatasetDescriptor": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "modified": {
                        "$ref": "#/components/schemas/StorageModificationDescriptor"
                    }
                },
                "required": [
                    "id",
                    "modified"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "StorageDescriptor": {
                "properties": {
                    "totalModified": {
                        "$ref": "#/components/schemas/StorageModificationDescriptor"
                    },
                    "totalPersist": {
                        "type": "number",
                        "format": "double"
                    },
                    "datasets": {
                        "items": {
                            "$ref": "#/components/schemas/StorageDatasetDescriptor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "totalModified",
                    "totalPersist",
                    "datasets"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PodType": {
                "enum": [
                    "regular-xs",
                    "regular-s",
                    "regular-m",
                    "regular-l",
                    "highmem-xs",
                    "highmem-s",
                    "highmem-m",
                    "highmem-l",
                    "gpu-k80-s",
                    "gpu-k80-m"
                ],
                "type": "string"
            },
            "ServiceType": {
                "enum": [
                    "system",
                    "regular"
                ],
                "type": "string"
            },
            "FaasUsageServiceInstanceDescriptor": {
                "properties": {
                    "serviceId": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "instanceType": {
                        "$ref": "#/components/schemas/PodType"
                    },
                    "sum": {
                        "type": "number",
                        "format": "double"
                    },
                    "hours": {
                        "type": "number",
                        "format": "double"
                    },
                    "serviceType": {
                        "$ref": "#/components/schemas/ServiceType"
                    }
                },
                "required": [
                    "serviceId",
                    "serviceName",
                    "instanceType",
                    "sum",
                    "hours"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FaasGlobalServiceDescriptor": {
                "properties": {
                    "serviceId": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "calls": {
                        "type": "number",
                        "format": "double"
                    },
                    "totalDuration": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "serviceId",
                    "serviceName",
                    "calls",
                    "totalDuration"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FaasUsageDescriptor": {
                "properties": {
                    "services": {
                        "items": {
                            "$ref": "#/components/schemas/FaasUsageServiceInstanceDescriptor"
                        },
                        "type": "array"
                    },
                    "globalServices": {
                        "items": {
                            "$ref": "#/components/schemas/FaasGlobalServiceDescriptor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "services"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemsCount": {
                "properties": {
                    "total": {
                        "type": "number",
                        "format": "double"
                    },
                    "totalAnnotated": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "total",
                    "totalAnnotated"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIUsageEntry": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "orgName": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "accountName": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "uiHours": {
                        "$ref": "#/components/schemas/UIHours"
                    },
                    "apiCalls": {
                        "$ref": "#/components/schemas/APICallDescriptor"
                    },
                    "storage": {
                        "$ref": "#/components/schemas/StorageDescriptor"
                    },
                    "faasUsage": {
                        "$ref": "#/components/schemas/FaasUsageDescriptor"
                    },
                    "items": {
                        "$ref": "#/components/schemas/ItemsCount"
                    },
                    "annotations": {
                        "type": "number",
                        "format": "double"
                    },
                    "keyframes": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "project",
                    "date",
                    "uiHours",
                    "apiCalls",
                    "storage",
                    "items",
                    "annotations",
                    "keyframes"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AlertStatus": {
                "enum": [
                    "created",
                    "emailSent",
                    "acknowledged",
                    "closed"
                ],
                "type": "string"
            },
            "AlertTier": {
                "enum": [
                    "preliminary",
                    "acute",
                    "enforcement"
                ],
                "type": "string"
            },
            "APIAlert": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/AlertStatus"
                    },
                    "description": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "metadata": {},
                    "accountId": {
                        "type": "string"
                    },
                    "tier": {
                        "$ref": "#/components/schemas/AlertTier"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "code",
                    "status",
                    "description",
                    "date",
                    "accountId",
                    "tier"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FieldSort": {
                "properties": {
                    "field": {
                        "type": "string",
                        "enum": [
                            "date",
                            "id"
                        ]
                    },
                    "direction": {
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ]
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "ResourceAuditEventType": {
                "type": "string",
                "enum": [
                    "deleted",
                    "updated",
                    "created"
                ]
            },
            "ResourceAuditLog": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ctx": {
                        "properties": {
                            "projectName": {
                                "type": "string"
                            },
                            "org": {
                                "type": "string"
                            },
                            "project": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "user": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "eventType": {
                        "$ref": "#/components/schemas/ResourceAuditEventType"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "entityName": {
                        "type": "string"
                    }
                },
                "required": [
                    "_id",
                    "time",
                    "ctx",
                    "user",
                    "entityType",
                    "eventType",
                    "entityId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AuditLogsCursorPage": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceAuditLog"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Address": {
                "properties": {
                    "line1": {
                        "type": "string"
                    },
                    "line2": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "required": [
                    "line1",
                    "country",
                    "city"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaxType": {
                "enum": [
                    "ae_trn",
                    "au_abn",
                    "au_arn",
                    "br_cnpj",
                    "br_cpf",
                    "ca_bn",
                    "ca_gst_hst",
                    "ca_pst_bc",
                    "ca_pst_mb",
                    "ca_pst_sk",
                    "ca_qst",
                    "ch_vat",
                    "cl_tin",
                    "es_cif",
                    "eu_vat",
                    "gb_vat",
                    "ge_vat",
                    "hk_br",
                    "id_npwp",
                    "il_vat",
                    "in_gst",
                    "jp_cn",
                    "jp_rn",
                    "kr_brn",
                    "li_uid",
                    "mx_rfc",
                    "my_frp",
                    "my_itn",
                    "my_sst",
                    "no_vat",
                    "nz_gst",
                    "ru_inn",
                    "ru_kpp",
                    "sa_vat",
                    "sg_gst",
                    "sg_uen",
                    "th_vat",
                    "tw_vat",
                    "ua_vat",
                    "us_ein",
                    "za_vat"
                ],
                "type": "string"
            },
            "TaxData": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TaxType"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DBBillingAccount": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "companyName": {
                        "type": "string"
                    },
                    "companyPhone": {
                        "type": "string"
                    },
                    "billingContact": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "recipients": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "taxData": {
                        "$ref": "#/components/schemas/TaxData"
                    },
                    "creator": {
                        "type": "string"
                    }
                },
                "required": [
                    "_id",
                    "companyName",
                    "companyPhone",
                    "billingContact",
                    "accountId",
                    "recipients",
                    "address",
                    "createdAt",
                    "creator"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PartialBillingAccount": {
                "properties": {
                    "companyName": {
                        "type": "string"
                    },
                    "companyPhone": {
                        "type": "string"
                    },
                    "billingContact": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "recipients": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "taxData": {
                        "properties": {
                            "value": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/components/schemas/TaxType"
                            }
                        },
                        "required": [
                            "value",
                            "type"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "accountId",
                    "address"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PaymentDriverType": {
                "type": "string",
                "enum": [
                    "credits",
                    "stripe"
                ],
                "nullable": false
            },
            "DBPaymentDriverConfiguration": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "billingAccountId": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/PaymentDriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "metadata": {}
                },
                "required": [
                    "_id",
                    "name",
                    "billingAccountId",
                    "type",
                    "creator"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreditCard": {
                "properties": {
                    "brand": {
                        "type": "string",
                        "description": "Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
                    },
                    "country": {
                        "type": "string",
                        "nullable": true,
                        "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
                    },
                    "exp_month": {
                        "type": "number",
                        "format": "double",
                        "description": "Two-digit number representing the card's expiration month."
                    },
                    "exp_year": {
                        "type": "number",
                        "format": "double",
                        "description": "Four-digit number representing the card's expiration year."
                    },
                    "fingerprint": {
                        "type": "string",
                        "nullable": true,
                        "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*"
                    },
                    "funding": {
                        "type": "string",
                        "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
                    },
                    "last4": {
                        "type": "string",
                        "description": "The last four digits of the card."
                    }
                },
                "required": [
                    "brand",
                    "country",
                    "exp_month",
                    "exp_year",
                    "funding",
                    "last4"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PaymentMethod": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the object."
                    },
                    "card": {
                        "$ref": "#/components/schemas/CreditCard"
                    },
                    "driverId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ContactAddress": {
                "properties": {
                    "line1": {
                        "type": "string"
                    },
                    "line2": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "required": [
                    "line1",
                    "country",
                    "city"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ContactInfo": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/ContactAddress"
                    }
                },
                "required": [
                    "email",
                    "phone",
                    "address"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "LineItem": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "subscription": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "description",
                    "price",
                    "subscription"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "InvoiceStatus": {
                "enum": [
                    "submitted",
                    "paid",
                    "partiallyPaid",
                    "debt",
                    "Failed Payment",
                    "refunded"
                ],
                "type": "string"
            },
            "Currency": {
                "type": "string",
                "enum": [
                    "USD",
                    "EUR",
                    "NIS"
                ]
            },
            "PaymentDetails": {
                "properties": {
                    "driverType": {
                        "type": "string"
                    },
                    "driverId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "chargeDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "last4": {
                        "type": "string"
                    }
                },
                "required": [
                    "driverType",
                    "driverId",
                    "chargeDate",
                    "amount",
                    "currency"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Invoice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the invoice"
                    },
                    "account": {
                        "type": "string",
                        "description": "DL account ID"
                    },
                    "contacts": {
                        "items": {
                            "$ref": "#/components/schemas/ContactInfo"
                        },
                        "type": "array",
                        "description": "Detailed information about all of the invoice contacts"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/LineItem"
                        },
                        "type": "array",
                        "description": "Detailing all the billable products included in the invoice"
                    },
                    "totalPrice": {
                        "type": "number",
                        "format": "double",
                        "description": "Total billed amount"
                    },
                    "billedPeriod": {
                        "properties": {
                            "endDate": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "startDate": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "endDate",
                            "startDate"
                        ],
                        "type": "object",
                        "description": "Date range of the resource usage"
                    },
                    "status": {
                        "$ref": "#/components/schemas/InvoiceStatus",
                        "description": "Current invoice status"
                    },
                    "payments": {
                        "items": {
                            "$ref": "#/components/schemas/PaymentDetails"
                        },
                        "type": "array",
                        "description": "All payments details"
                    },
                    "stripeInvoiceUrl": {
                        "type": "string",
                        "description": "When applicable, include a link to a pdf invoice hosted by Stripe"
                    },
                    "stripeInvoiceId": {
                        "type": "string",
                        "description": "When applicable, include the identifier of a Stripe invoice object"
                    },
                    "stripeInvoiceNumber": {
                        "type": "string",
                        "description": "When applicable, include the number of a Stripe invoice"
                    },
                    "pdfLocation": {
                        "type": "string",
                        "description": "When applicable, include the location in which the DL archive stores the Stripe invoice pdf"
                    },
                    "chargeInProgress": {
                        "type": "boolean",
                        "description": "Specifies whether a charge is currently in progress"
                    }
                },
                "required": [
                    "id",
                    "account",
                    "contacts",
                    "items",
                    "totalPrice",
                    "billedPeriod",
                    "status",
                    "payments"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BillingResourceKey": {
                "enum": [
                    "annotation-tool-hours",
                    "data-points",
                    "api-calls",
                    "hosted-storage",
                    "system-compute",
                    "compute-cpu-regular-xs",
                    "compute-cpu-regular-s",
                    "compute-cpu-regular-m",
                    "compute-cpu-regular-l",
                    "compute-cpu-highmem-xs",
                    "compute-cpu-highmem-s",
                    "compute-cpu-highmem-m",
                    "compute-cpu-highmem-l",
                    "compute-gpu-k80-s",
                    "compute-gpu-k80-m",
                    "unlimited-seats",
                    "default-annotation-studios",
                    "lidar",
                    "auto-annotation-tools",
                    "ml-model-assisted-annotation",
                    "ai-video-tracker",
                    "data-bug-tracking",
                    "storage-integration",
                    "data-visualization",
                    "metadata-search",
                    "data-versioning",
                    "output-format-converters",
                    "workforce-management-tool",
                    "analytics-dashboard",
                    "advanced-analytics-history",
                    "multiple-workforces",
                    "sdk-access",
                    "api-access",
                    "data-pipeline-filters",
                    "human-tasks",
                    "faas",
                    "model-management",
                    "email-customer-support",
                    "knowledge-base",
                    "faq",
                    "instructional-video-library-access",
                    "ticket-based-troubleshooting",
                    "access-to-customer-success-representation-pool",
                    "debug-and-guide-via-tracking-sys",
                    "on-demand-calls",
                    "engineering-consulting",
                    "dedicated-customer-success",
                    "quarterly-customer-success-check-in",
                    "on-demand-customer-success-calls",
                    "monthly-customer-success-calls",
                    "weekly-customer-success-calls",
                    "developer-success-assistance",
                    "professional-services-or-developer-success-lead-onboarding",
                    "professional-services-custom-development",
                    "managed-labeling-service",
                    "professional-services",
                    "role-and-group-based-access-control",
                    "custom-project-dashboard",
                    "enterprise-support-sla",
                    "sso-integration",
                    "mfa-integration",
                    "ip-whitelist",
                    "vpc-deployment"
                ],
                "type": "string"
            },
            "RangeOrFeatureTier": {
                "properties": {
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "range": {
                        "properties": {
                            "higher": {
                                "type": "number",
                                "format": "double"
                            },
                            "lower": {
                                "type": "number",
                                "format": "double"
                            }
                        },
                        "required": [
                            "higher",
                            "lower"
                        ],
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "price"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "OverQuota": {
                "properties": {
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "price",
                    "limit"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIBillableResource": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "key": {
                        "$ref": "#/components/schemas/BillingResourceKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "unit": {
                        "type": "string"
                    },
                    "tiers": {
                        "items": {
                            "$ref": "#/components/schemas/RangeOrFeatureTier"
                        },
                        "type": "array"
                    },
                    "overQuota": {
                        "$ref": "#/components/schemas/OverQuota"
                    },
                    "displayedInInvoice": {
                        "type": "boolean"
                    },
                    "group": {
                        "type": "string"
                    },
                    "tier": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "key",
                    "name",
                    "type",
                    "description",
                    "icon"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "MetricGroup": {
                "enum": [
                    "Annotation tool studios",
                    "automation",
                    "Data QA tools",
                    "Data management",
                    "Workforce management",
                    "Data pipelines",
                    "Customer support",
                    "Customer care",
                    "Enterprise features",
                    "General"
                ],
                "type": "string"
            },
            "BillingResource": {
                "properties": {
                    "key": {
                        "$ref": "#/components/schemas/BillingResourceKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "unit": {
                        "type": "string"
                    },
                    "displayedInInvoice": {
                        "type": "boolean"
                    },
                    "group": {
                        "$ref": "#/components/schemas/MetricGroup"
                    },
                    "tier": {
                        "type": "string"
                    }
                },
                "required": [
                    "key",
                    "name",
                    "type",
                    "description",
                    "icon"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Plan": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "resources": {
                        "items": {
                            "$ref": "#/components/schemas/BillingResource"
                        },
                        "type": "array"
                    },
                    "annualPlanPrice": {
                        "type": "number",
                        "format": "double"
                    },
                    "monthlyPlanPrice": {
                        "type": "number",
                        "format": "double"
                    },
                    "annualDiscountPercentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "price": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "key",
                    "name",
                    "description",
                    "resources"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BillingPeriod": {
                "type": "string",
                "enum": [
                    "monthly",
                    "annual",
                    "custom"
                ]
            },
            "ScopeType": {
                "enum": [
                    "org",
                    "project"
                ],
                "type": "string"
            },
            "BillingStatus": {
                "enum": [
                    "future",
                    "active",
                    "paused",
                    "blocked",
                    "expired",
                    "canceled",
                    "renewed"
                ],
                "type": "string"
            },
            "APISubscription": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the subscription"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url for the subscription"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan",
                        "description": "Plan detailing the resources allocated to the subscription"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Latest update date"
                    },
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod",
                        "description": "Subscription period"
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Subscription start time"
                    },
                    "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Subscription expiration time"
                    },
                    "scope": {
                        "properties": {
                            "entityId": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/components/schemas/ScopeType"
                            }
                        },
                        "required": [
                            "entityId",
                            "type"
                        ],
                        "type": "object",
                        "description": "Subscription scope type and id"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "DL account Id"
                    },
                    "autoRenewal": {
                        "type": "boolean",
                        "description": "Whether the subscription will auto renew when it's current quota expires"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BillingStatus",
                        "description": "Current status"
                    },
                    "paymentDriverId": {
                        "type": "string"
                    },
                    "paymentMethodId": {
                        "type": "string"
                    },
                    "addon": {
                        "type": "boolean",
                        "description": "Whether the subscription is an addon or not"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "plan",
                    "createdAt",
                    "period",
                    "startTime",
                    "endTime",
                    "scope",
                    "accountId",
                    "status"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BillingScope": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ScopeType"
                    },
                    "entityId": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "entityId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SubscriptionInput": {
                "properties": {
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/BillingScope"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    },
                    "account": {
                        "type": "string"
                    },
                    "driverId": {
                        "type": "string"
                    },
                    "methodId": {
                        "type": "string"
                    },
                    "planKey": {
                        "type": "string"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    }
                },
                "required": [
                    "period",
                    "scope",
                    "autoRenewal",
                    "account"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "EditSubscriptionInput": {
                "properties": {
                    "autoRenewal": {
                        "type": "boolean"
                    },
                    "paymentDriverId": {
                        "type": "string"
                    },
                    "paymentMethodId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "RenewSubscriptionInput": {
                "properties": {
                    "chargeSubscription": {
                        "type": "boolean"
                    },
                    "force": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "chargeSubscription"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APISubscription_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APISubscription"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CustomSubscriptionInput": {
                "properties": {
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/BillingScope"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    },
                    "account": {
                        "type": "string"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    }
                },
                "required": [
                    "period",
                    "startDate",
                    "endDate",
                    "scope",
                    "autoRenewal",
                    "account",
                    "plan"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SubscriptionUpgradeInput": {
                "properties": {
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    },
                    "planKey": {
                        "type": "string"
                    },
                    "paymentDriverId": {
                        "type": "string"
                    },
                    "paymentMethodId": {
                        "type": "string"
                    },
                    "driverId": {
                        "type": "string"
                    },
                    "methodId": {
                        "type": "string"
                    }
                },
                "required": [
                    "period",
                    "planKey"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SubscriptionExtensionInput": {
                "properties": {
                    "resource": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "resource",
                    "amount"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UsageLog": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "usage": {
                        "type": "number",
                        "format": "double"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "date",
                    "usage",
                    "project"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ResourceUsage": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "used": {
                        "type": "number",
                        "format": "double"
                    },
                    "usageLog": {
                        "items": {
                            "$ref": "#/components/schemas/UsageLog"
                        },
                        "type": "array"
                    },
                    "dateDepleted": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "key",
                    "used",
                    "usageLog"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UsageReport": {
                "properties": {
                    "subscriptionId": {
                        "type": "string"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    },
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "account": {
                        "type": "string"
                    },
                    "usage": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceUsage"
                        },
                        "type": "array"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "subscriptionId",
                    "plan",
                    "period",
                    "startDate",
                    "endDate",
                    "account",
                    "usage",
                    "autoRenewal"
                ],
                "type": "object",
                "additionalProperties": true
            }
        },
        "examples": {},
        "headers": {},
        "parameters": {},
        "requestBodies": {
            "IPostPipeline": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/IPostPipeline"
                        }
                    }
                },
                "required": true
            },
            "APIPackage": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIPackage"
                        }
                    }
                },
                "required": true
            },
            "IPostComposition": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/IPostComposition"
                        }
                    }
                },
                "required": true
            },
            "QueryString": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/QueryString"
                        }
                    }
                },
                "required": true
            },
            "ICacheOptions": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ICacheOptions"
                        }
                    }
                },
                "required": true
            },
            "LogQuery": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LogQuery"
                        }
                    }
                },
                "required": true
            },
            "APIWebHook": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIWebHook"
                        }
                    }
                },
                "required": true
            }
        },
        "responses": {},
        "securitySchemes": {
            "cookieAuth": {
                "type": "apiKey",
                "name": "JWT",
                "in": "cookie"
            }
        }
    },
    "host": "rc-gate.dataloop.ai",
    "schemes": [
        "https"
    ],
    "x-servers": [
        {
            "url": "https://rc-gate.dataloop.ai/api/v1",
            "description": "Main Dataloop Gateway"
        }
    ],
    "security": [
        {
            "cookieAuth": []
        }
    ]
}